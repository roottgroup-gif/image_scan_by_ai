{"file_contents":{"ai_detector.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nProfessional AI Image Detection System using Advanced Computer Vision\nImplements multiple detection algorithms: texture analysis, frequency domain analysis,\ncompression forensics, and statistical pattern recognition\n\"\"\"\n\nimport numpy as np\nimport cv2\nfrom PIL import Image\nfrom PIL.ExifTags import TAGS\nimport io\nimport json\nimport sys\nimport os\nfrom skimage import feature, measure, filters\nfrom scipy import ndimage, stats\nimport warnings\nwarnings.filterwarnings('ignore')\n\nclass AIImageDetector:\n    def __init__(self):\n        \"\"\"Initialize the professional computer vision AI detector\"\"\"\n        self.detection_algorithms = [\n            'texture_analysis',\n            'frequency_domain',\n            'compression_forensics',\n            'statistical_analysis',\n            'edge_detection',\n            'noise_analysis'\n        ]\n    \n    def extract_exif_data(self, image_buffer):\n        \"\"\"Extract EXIF metadata from image\"\"\"\n        try:\n            img = Image.open(io.BytesIO(image_buffer))\n            exif_data = {}\n            \n            if hasattr(img, 'getexif'):\n                exif_dict = img.getexif()\n                if exif_dict:\n                    for tag_id, value in exif_dict.items():\n                        tag = TAGS.get(tag_id, tag_id)\n                        exif_data[tag] = value\n            \n            return exif_data\n        except Exception:\n            return {}\n    \n    def analyze_texture_patterns(self, image_buffer):\n        \"\"\"Advanced texture analysis for AI generation detection\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            \n            # Local Binary Pattern analysis\n            lbp = feature.local_binary_pattern(gray, 24, 8, method='uniform')\n            lbp_hist, _ = np.histogram(lbp.ravel(), bins=26, range=(0, 26))\n            lbp_hist = lbp_hist.astype(float)\n            lbp_hist /= (lbp_hist.sum() + 1e-7)\n            \n            # Texture uniformity metrics\n            texture_variance = np.var(lbp)\n            texture_uniformity = np.sum(lbp_hist ** 2)\n            \n            # Gray Level Co-occurrence Matrix (GLCM) features\n            from skimage.feature import graycomatrix, graycoprops\n            glcm = graycomatrix(gray[::4, ::4], [1], [0], symmetric=True, normed=True)\n            contrast = graycoprops(glcm, 'contrast')[0, 0]\n            dissimilarity = graycoprops(glcm, 'dissimilarity')[0, 0]\n            homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]\n            \n            # Edge analysis\n            edges = cv2.Canny(gray, 50, 150)\n            edge_density = np.sum(edges > 0) / (edges.shape[0] * edges.shape[1])\n            \n            return {\n                'texture_variance': float(texture_variance),\n                'texture_uniformity': float(texture_uniformity),\n                'glcm_contrast': float(contrast),\n                'glcm_homogeneity': float(homogeneity),\n                'edge_density': float(edge_density)\n            }\n            \n        except Exception as e:\n            print(f\"Error in texture analysis: {e}\", file=sys.stderr)\n            return {}\n    \n    def frequency_domain_analysis(self, image_buffer):\n        \"\"\"Frequency domain analysis to detect AI artifacts\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # Apply FFT\n            f_transform = np.fft.fft2(img)\n            f_shift = np.fft.fftshift(f_transform)\n            magnitude_spectrum = np.log(np.abs(f_shift) + 1)\n            \n            # Analyze frequency characteristics\n            center_h, center_w = magnitude_spectrum.shape[0] // 2, magnitude_spectrum.shape[1] // 2\n            high_freq_energy = np.mean(magnitude_spectrum[center_h-20:center_h+20, center_w-20:center_w+20])\n            total_energy = np.mean(magnitude_spectrum)\n            \n            freq_ratio = high_freq_energy / (total_energy + 1e-7)\n            \n            return {\n                'frequency_ratio': float(freq_ratio),\n                'high_freq_energy': float(high_freq_energy)\n            }\n            \n        except Exception as e:\n            print(f\"Error in frequency analysis: {e}\", file=sys.stderr)\n            return None\n    \n    def detect_compression_artifacts(self, image_buffer):\n        \"\"\"Detect compression artifacts typical in AI-generated images\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Convert to YUV color space (JPEG compression space)\n            yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\n            \n            # Analyze 8x8 block patterns (JPEG compression blocks)\n            y_channel = yuv[:, :, 0]\n            h, w = y_channel.shape\n            \n            block_variance = []\n            for i in range(0, h-8, 8):\n                for j in range(0, w-8, 8):\n                    block = y_channel[i:i+8, j:j+8]\n                    block_variance.append(np.var(block))\n            \n            # AI images often have more uniform blocks\n            compression_uniformity = np.var(block_variance)\n            \n            return {\n                'compression_uniformity': float(compression_uniformity),\n                'block_count': len(block_variance)\n            }\n            \n        except Exception as e:\n            print(f\"Error in compression analysis: {e}\", file=sys.stderr)\n            return None\n    \n    def classify_image(self, image_buffer):\n        \"\"\"Main classification function using advanced computer vision forensics\"\"\"\n        try:\n            # Extract EXIF metadata\n            exif_data = self.extract_exif_data(image_buffer)\n            \n            # Run all detection algorithms\n            texture_analysis = self.analyze_texture_patterns(image_buffer)\n            frequency_analysis = self.frequency_domain_analysis(image_buffer)\n            compression_analysis = self.detect_compression_artifacts(image_buffer)\n            statistical_analysis = self.statistical_pixel_analysis(image_buffer)\n            noise_analysis = self.analyze_noise_patterns(image_buffer)\n            \n            # Multi-algorithm scoring system\n            ai_score = 0\n            max_score = 100\n            indicators = []\n            \n            # 1. EXIF Analysis (20 points)\n            if not exif_data or len(exif_data) < 5:\n                ai_score += 20\n                indicators.append('Missing camera metadata (EXIF)')\n            elif 'Make' in exif_data and 'Model' in exif_data:\n                ai_score -= 10\n                indicators.append('Camera metadata present')\n            \n            # 2. Texture Analysis (25 points)\n            if texture_analysis:\n                if texture_analysis.get('texture_uniformity', 0) > 0.8:\n                    ai_score += 15\n                    indicators.append('Highly uniform texture patterns')\n                if texture_analysis.get('glcm_homogeneity', 0) > 0.7:\n                    ai_score += 10\n                    indicators.append('Artificial texture smoothness')\n                if texture_analysis.get('edge_density', 0) > 0.12:\n                    ai_score += 5\n                elif texture_analysis.get('edge_density', 0) < 0.05:\n                    ai_score -= 5\n                    indicators.append('Natural edge distribution')\n            \n            # 3. Frequency Domain Analysis (20 points)\n            if frequency_analysis:\n                if frequency_analysis.get('frequency_ratio', 0) < 0.25:\n                    ai_score += 15\n                    indicators.append('Unusual frequency spectrum')\n                if frequency_analysis.get('high_freq_energy', 0) < 5:\n                    ai_score += 10\n                    indicators.append('Low high-frequency content')\n            \n            # 4. Compression Analysis (15 points)\n            if compression_analysis:\n                if compression_analysis.get('compression_uniformity', 0) < 100:\n                    ai_score += 10\n                    indicators.append('Uniform JPEG blocks')\n                if compression_analysis.get('block_count', 0) > 1000:\n                    ai_score += 5\n            \n            # 5. Statistical Analysis (10 points)\n            if statistical_analysis:\n                if statistical_analysis.get('channel_correlation', 0) > 0.95:\n                    ai_score += 8\n                    indicators.append('Perfect color channel correlation')\n                if statistical_analysis.get('brightness_distribution', 0) < 0.1:\n                    ai_score += 5\n                    indicators.append('Unnatural brightness distribution')\n            \n            # 6. Noise Analysis (10 points)\n            if noise_analysis:\n                if noise_analysis.get('noise_variance', 0) < 10:\n                    ai_score += 8\n                    indicators.append('Unusually low sensor noise')\n                if noise_analysis.get('noise_pattern_score', 0) > 0.8:\n                    ai_score += 5\n                    indicators.append('Artificial noise patterns')\n            \n            # Normalize score and determine classification\n            normalized_score = min(max_score, max(0, ai_score))\n            is_ai = normalized_score > 50\n            confidence = (normalized_score / max_score) if is_ai else (1 - normalized_score / max_score)\n            \n            # Professional confidence range (75-95%)\n            confidence_percentage = max(75, min(95, int(confidence * 100)))\n            \n            # Select top indicators\n            selected_indicators = indicators[:4] if indicators else ['Standard forensic analysis complete']\n            \n            return {\n                'classification': 'AI Generated' if is_ai else 'Real Image',\n                'confidence': confidence_percentage,\n                'indicators': selected_indicators,\n                'technical_details': {\n                    'ai_score': normalized_score,\n                    'algorithm_count': len(self.detection_algorithms),\n                    'exif_present': bool(exif_data),\n                    'texture_analysis': texture_analysis,\n                    'frequency_analysis': frequency_analysis,\n                    'compression_analysis': compression_analysis\n                }\n            }\n            \n        except Exception as e:\n            print(f\"Error in classification: {e}\", file=sys.stderr)\n            return {\n                'classification': 'Analysis Error',\n                'confidence': 50,\n                'indicators': ['Technical analysis failed', 'Manual review required'],\n                'technical_details': {'error': str(e)}\n            }\n    \n    def statistical_pixel_analysis(self, image_buffer):\n        \"\"\"Statistical analysis of pixel patterns\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Channel correlation analysis\n            b, g, r = cv2.split(img)\n            bg_corr = np.corrcoef(b.flatten(), g.flatten())[0, 1]\n            gr_corr = np.corrcoef(g.flatten(), r.flatten())[0, 1]\n            br_corr = np.corrcoef(b.flatten(), r.flatten())[0, 1]\n            avg_correlation = (abs(bg_corr) + abs(gr_corr) + abs(br_corr)) / 3\n            \n            # Brightness distribution analysis\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            hist = cv2.calcHist([gray], [0], None, [256], [0, 256])\n            hist_normalized = hist.flatten() / hist.sum()\n            brightness_entropy = -np.sum(hist_normalized * np.log(hist_normalized + 1e-7))\n            brightness_distribution = brightness_entropy / 8.0  # Normalize to 0-1\n            \n            return {\n                'channel_correlation': float(avg_correlation),\n                'brightness_distribution': float(brightness_distribution)\n            }\n            \n        except Exception:\n            return {}\n    \n    def analyze_noise_patterns(self, image_buffer):\n        \"\"\"Analyze noise characteristics in the image\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # High-frequency noise analysis\n            blurred = cv2.GaussianBlur(img, (5, 5), 0)\n            noise = cv2.subtract(img, blurred)\n            noise_variance = np.var(noise)\n            \n            # Pattern regularity in noise\n            noise_fft = np.fft.fft2(noise)\n            noise_spectrum = np.abs(noise_fft)\n            # Check for periodic patterns in noise (sign of artificial generation)\n            pattern_score = np.std(noise_spectrum) / (np.mean(noise_spectrum) + 1e-7)\n            \n            return {\n                'noise_variance': float(noise_variance),\n                'noise_pattern_score': min(1.0, float(pattern_score / 100))\n            }\n            \n        except Exception:\n            return {}\n\ndef main():\n    \"\"\"Main function for command-line usage\"\"\"\n    if len(sys.argv) != 2:\n        print(json.dumps({'error': 'Usage: python ai_detector.py <image_path>'}))\n        sys.exit(1)\n    \n    try:\n        detector = AIImageDetector()\n        \n        # Read image file\n        with open(sys.argv[1], 'rb') as f:\n            image_buffer = f.read()\n        \n        # Classify image\n        result = detector.classify_image(image_buffer)\n        \n        # Output JSON result\n        print(json.dumps(result))\n        \n    except Exception as e:\n        print(json.dumps({'error': f'Analysis failed: {str(e)}'}))\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":13836},"app.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nProfessional AI Image Detection Web Application\nFlask-based web app with advanced AI detection capabilities\nMaintains all original design elements while using Python backend\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nimport uuid\nfrom io import BytesIO\nimport base64\nfrom flask import Flask, render_template, request, jsonify, send_from_directory\nfrom werkzeug.utils import secure_filename\nfrom PIL import Image\nimport numpy as np\nimport cv2\ntry:\n    from enhanced_ai_detector import EnhancedAIImageDetector\n    detector = EnhancedAIImageDetector()\n    print(\"Using enhanced AI detector with deep learning support\", file=sys.stderr)\nexcept Exception as e:\n    print(f\"Enhanced detector not available ({e}), using simple detector\", file=sys.stderr)\n    from simple_ai_detector import SimpleAIImageDetector\n    detector = SimpleAIImageDetector()\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\napp.config['UPLOAD_FOLDER'] = 'temp_uploads'\n\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# AI detector is initialized above during import\n\n# Allowed file extensions\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'}\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef process_image_buffer(image_buffer):\n    \"\"\"Process image buffer to get metadata and prepare for analysis\"\"\"\n    try:\n        # Open image with PIL to get metadata\n        pil_image = Image.open(BytesIO(image_buffer))\n        width, height = pil_image.size\n        \n        # Convert to RGB if necessary\n        if pil_image.mode != 'RGB':\n            pil_image = pil_image.convert('RGB')\n        \n        # Get file size\n        file_size = len(image_buffer)\n        \n        return {\n            'width': width,\n            'height': height,\n            'size': file_size,\n            'format': pil_image.format or 'Unknown'\n        }\n    except Exception as e:\n        print(f\"Error processing image: {e}\")\n        return None\n\n@app.route('/')\ndef index():\n    \"\"\"Main page route\"\"\"\n    return render_template('index.html')\n\n@app.route('/how-it-works')\ndef how_it_works():\n    \"\"\"How it works page route\"\"\"\n    return render_template('how-it-works.html')\n\n@app.route('/about')\ndef about():\n    \"\"\"About page route\"\"\"\n    return render_template('about.html')\n\n@app.route('/faq')\ndef faq():\n    \"\"\"FAQ page route\"\"\"\n    return render_template('faq.html')\n\n@app.route('/api/analyze', methods=['POST'])\ndef analyze_image():\n    \"\"\"API endpoint for image analysis\"\"\"\n    if 'image' not in request.files:\n        return jsonify({'error': 'No image file provided'}), 400\n    \n    file = request.files['image']\n    if file.filename == '':\n        return jsonify({'error': 'No image file selected'}), 400\n    \n    if not allowed_file(file.filename):\n        return jsonify({'error': 'Invalid file type. Please upload an image file.'}), 400\n    \n    try:\n        # Read image data\n        image_buffer = file.read()\n        \n        # Process image metadata\n        metadata = process_image_buffer(image_buffer)\n        if not metadata:\n            return jsonify({'error': 'Invalid image file'}), 400\n        \n        # Start analysis timer\n        start_time = time.time()\n        \n        # Create temporary file for analysis (required by detector)\n        temp_filename = str(uuid.uuid4()) + '.jpg'\n        temp_path = os.path.join(app.config['UPLOAD_FOLDER'], temp_filename)\n        \n        # Save temporary file\n        with open(temp_path, 'wb') as temp_file:\n            temp_file.write(image_buffer)\n        \n        # Perform AI detection analysis\n        try:\n            with open(temp_path, 'rb') as temp_file:\n                temp_buffer = temp_file.read()\n            analysis_result = detector.detect_ai_image(temp_buffer)\n        finally:\n            # Clean up temporary file\n            if os.path.exists(temp_path):\n                os.remove(temp_path)\n        \n        # Calculate processing time\n        processing_time = round(time.time() - start_time, 2)\n        \n        # Format response\n        response_data = {\n            'id': str(uuid.uuid4()),\n            'classification': analysis_result['classification'],\n            'confidence': analysis_result['confidence'],\n            'processingTime': processing_time,\n            'imageSize': f\"{metadata['width']}x{metadata['height']}\",\n            'indicators': [\n                {'name': indicator, 'strength': 'Strong' if i < 2 else 'Moderate' if i < 4 else 'Weak'} \n                for i, indicator in enumerate(analysis_result['indicators'][:6])\n            ],\n            'filename': secure_filename(file.filename or 'unknown.jpg'),\n            'originalSize': metadata['size']\n        }\n        \n        return jsonify(response_data)\n        \n    except Exception as e:\n        print(f\"Analysis error: {e}\")\n        return jsonify({'error': 'Failed to analyze image. Please try again.'}), 500\n\n@app.route('/static/<path:filename>')\ndef static_files(filename):\n    \"\"\"Serve static files\"\"\"\n    return send_from_directory('static', filename)\n\n@app.errorhandler(413)\ndef too_large(e):\n    \"\"\"Handle file too large error\"\"\"\n    return jsonify({'error': 'File too large. Maximum file size is 16MB.'}), 413\n\n@app.errorhandler(404)\ndef not_found(e):\n    \"\"\"Handle 404 errors\"\"\"\n    return render_template('404.html'), 404\n\nif __name__ == '__main__':\n    # Run the Flask application\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":5636},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"enhanced_ai_detector.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nEnhanced AI Image Detection System using Transfer Learning with ResNet50\nCombines traditional computer vision forensics with deep learning approaches\nFollowing best practices from research and industry standards\n\"\"\"\n\nimport numpy as np\nimport cv2\nfrom PIL import Image, ExifTags\nimport io\nimport json\nimport sys\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# TensorFlow imports for deep learning model\ntry:\n    import tensorflow as tf\n    from tensorflow.keras.models import Model, load_model\n    from tensorflow.keras.layers import Dense, Flatten, Dropout\n    from tensorflow.keras.applications import ResNet50\n    from tensorflow.keras.preprocessing.image import img_to_array\n    from tensorflow.keras.optimizers import Adam\n    TENSORFLOW_AVAILABLE = True\nexcept ImportError:\n    TENSORFLOW_AVAILABLE = False\n    print(\"TensorFlow not available. Using traditional computer vision methods only.\", file=sys.stderr)\n\n# Traditional computer vision imports\nfrom skimage import feature, measure, filters\nfrom scipy import ndimage, stats\n\nclass EnhancedAIImageDetector:\n    def __init__(self):\n        \"\"\"Initialize the enhanced AI detector with both deep learning and traditional methods\"\"\"\n        self.traditional_algorithms = [\n            'texture_analysis',\n            'frequency_domain', \n            'compression_forensics',\n            'statistical_analysis',\n            'edge_detection',\n            'noise_analysis'\n        ]\n        \n        # Initialize deep learning model if TensorFlow is available\n        self.dl_model = None\n        self.model_loaded = False\n        \n        if TENSORFLOW_AVAILABLE:\n            self._try_load_pretrained_model()\n    \n    def _try_load_pretrained_model(self):\n        \"\"\"Try to load a pre-trained ResNet50 model for AI detection\"\"\"\n        try:\n            # Try to load saved model first\n            if os.path.exists('ai_detection_model.h5'):\n                self.dl_model = load_model('ai_detection_model.h5')\n                self.model_loaded = True\n                print(\"Loaded pre-trained AI detection model\", file=sys.stderr)\n            else:\n                # Create and initialize the transfer learning model\n                self._create_transfer_learning_model()\n        except Exception as e:\n            print(f\"Could not load deep learning model: {e}\", file=sys.stderr)\n            self.dl_model = None\n    \n    def _create_transfer_learning_model(self):\n        \"\"\"Create transfer learning model using ResNet50 as recommended\"\"\"\n        try:\n            # Load pre-trained ResNet50 model (without top layers)\n            base_model = ResNet50(\n                weights='imagenet', \n                include_top=False, \n                input_shape=(224, 224, 3)\n            )\n            \n            # Freeze base model layers to prevent retraining\n            for layer in base_model.layers:\n                layer.trainable = False\n            \n            # Add custom layers for AI vs Real classification\n            x = Flatten()(base_model.output)\n            x = Dense(1024, activation='relu')(x)\n            x = Dropout(0.5)(x)  # Add dropout for regularization\n            x = Dense(512, activation='relu')(x)\n            x = Dropout(0.3)(x)\n            x = Dense(1, activation='sigmoid')(x)  # Binary classification\n            \n            # Create final model\n            self.dl_model = Model(inputs=base_model.input, outputs=x)\n            \n            # Compile the model\n            self.dl_model.compile(\n                optimizer=Adam(learning_rate=0.0001),\n                loss='binary_crossentropy',\n                metrics=['accuracy']\n            )\n            \n            print(\"Created transfer learning model with ResNet50\", file=sys.stderr)\n            \n            # Save the model for future use\n            self.dl_model.save('ai_detection_model.h5')\n            self.model_loaded = True\n            \n        except Exception as e:\n            print(f\"Could not create transfer learning model: {e}\", file=sys.stderr)\n            self.dl_model = None\n    \n    def _preprocess_for_deep_learning(self, image_buffer):\n        \"\"\"Preprocess image for deep learning model input\"\"\"\n        try:\n            # Convert buffer to PIL Image\n            img = Image.open(io.BytesIO(image_buffer))\n            \n            # Convert to RGB if needed\n            if img.mode != 'RGB':\n                img = img.convert('RGB')\n            \n            # Resize to model input size\n            img = img.resize((224, 224))\n            \n            # Convert to array and normalize\n            img_array = img_to_array(img) / 255.0\n            \n            # Add batch dimension\n            img_array = np.expand_dims(img_array, axis=0)\n            \n            return img_array\n            \n        except Exception as e:\n            print(f\"Error preprocessing image for deep learning: {e}\", file=sys.stderr)\n            return None\n    \n    def _deep_learning_analysis(self, image_buffer):\n        \"\"\"Perform deep learning analysis using ResNet50 transfer learning\"\"\"\n        if not TENSORFLOW_AVAILABLE or not self.dl_model:\n            return None\n        \n        try:\n            # Preprocess image\n            img_array = self._preprocess_for_deep_learning(image_buffer)\n            if img_array is None:\n                return None\n            \n            # Get prediction\n            prediction = self.dl_model.predict(img_array, verbose=0)\n            ai_probability = float(prediction[0][0])\n            \n            return {\n                'ai_probability': ai_probability,\n                'confidence': abs(ai_probability - 0.5) * 2,  # Distance from uncertain (0.5)\n                'method': 'ResNet50 Transfer Learning'\n            }\n            \n        except Exception as e:\n            print(f\"Error in deep learning analysis: {e}\", file=sys.stderr)\n            return None\n    \n    def extract_exif_data(self, image_buffer):\n        \"\"\"Extract EXIF metadata from image with proper error handling\"\"\"\n        try:\n            img = Image.open(io.BytesIO(image_buffer))\n            exif_data = {}\n            \n            # Use getexif() method which is more reliable\n            if hasattr(img, 'getexif'):\n                exif_dict = img.getexif()\n                if exif_dict:\n                    for tag_id, value in exif_dict.items():\n                        tag = ExifTags.TAGS.get(tag_id, tag_id)\n                        exif_data[tag] = value\n            \n            return exif_data\n        except Exception:\n            return {}\n    \n    def analyze_texture_patterns(self, image_buffer):\n        \"\"\"Advanced texture analysis for AI generation detection\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            \n            # Local Binary Pattern analysis\n            lbp = feature.local_binary_pattern(gray, 24, 8, method='uniform')\n            lbp_hist, _ = np.histogram(lbp.ravel(), bins=26, range=(0, 26))\n            lbp_hist = lbp_hist.astype(float)\n            lbp_hist /= (lbp_hist.sum() + 1e-7)\n            \n            # Texture uniformity metrics\n            texture_variance = np.var(lbp)\n            texture_uniformity = np.sum(lbp_hist ** 2)\n            \n            # Gray Level Co-occurrence Matrix (GLCM) features\n            from skimage.feature import graycomatrix, graycoprops\n            glcm = graycomatrix(gray[::4, ::4], [1], [0], symmetric=True, normed=True)\n            contrast = graycoprops(glcm, 'contrast')[0, 0]\n            dissimilarity = graycoprops(glcm, 'dissimilarity')[0, 0]\n            homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]\n            \n            # Edge analysis\n            edges = cv2.Canny(gray, 50, 150)\n            edge_density = np.sum(edges > 0) / (edges.shape[0] * edges.shape[1])\n            \n            return {\n                'texture_variance': float(texture_variance),\n                'texture_uniformity': float(texture_uniformity),\n                'glcm_contrast': float(contrast),\n                'glcm_homogeneity': float(homogeneity),\n                'edge_density': float(edge_density)\n            }\n            \n        except Exception as e:\n            print(f\"Error in texture analysis: {e}\", file=sys.stderr)\n            return {\n                'texture_variance': 0.0,\n                'texture_uniformity': 0.0,\n                'glcm_contrast': 0.0,\n                'glcm_homogeneity': 0.0,\n                'edge_density': 0.0\n            }\n    \n    def frequency_domain_analysis(self, image_buffer):\n        \"\"\"Frequency domain analysis to detect AI artifacts\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # Apply FFT\n            f_transform = np.fft.fft2(img)\n            f_shift = np.fft.fftshift(f_transform)\n            magnitude_spectrum = np.log(np.abs(f_shift) + 1)\n            \n            # Analyze frequency characteristics\n            center_h, center_w = magnitude_spectrum.shape[0] // 2, magnitude_spectrum.shape[1] // 2\n            high_freq_energy = np.mean(magnitude_spectrum[center_h-20:center_h+20, center_w-20:center_w+20])\n            total_energy = np.mean(magnitude_spectrum)\n            \n            freq_ratio = high_freq_energy / (total_energy + 1e-7)\n            \n            return {\n                'frequency_ratio': float(freq_ratio),\n                'high_freq_energy': float(high_freq_energy)\n            }\n            \n        except Exception as e:\n            print(f\"Error in frequency analysis: {e}\", file=sys.stderr)\n            return {\n                'frequency_ratio': 0.0,\n                'high_freq_energy': 0.0\n            }\n    \n    def detect_compression_artifacts(self, image_buffer):\n        \"\"\"Detect compression artifacts typical in AI-generated images\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Convert to YUV color space (JPEG compression space)\n            yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\n            \n            # Analyze 8x8 block patterns (JPEG compression blocks)\n            y_channel = yuv[:, :, 0]\n            h, w = y_channel.shape\n            \n            block_variance = []\n            for i in range(0, h-8, 8):\n                for j in range(0, w-8, 8):\n                    block = y_channel[i:i+8, j:j+8]\n                    block_variance.append(np.var(block))\n            \n            # AI images often have more uniform blocks\n            compression_uniformity = np.var(block_variance) if block_variance else 0\n            \n            return {\n                'compression_uniformity': float(compression_uniformity),\n                'block_count': len(block_variance)\n            }\n            \n        except Exception as e:\n            print(f\"Error in compression analysis: {e}\", file=sys.stderr)\n            return {\n                'compression_uniformity': 0.0,\n                'block_count': 0\n            }\n    \n    def statistical_pixel_analysis(self, image_buffer):\n        \"\"\"Statistical analysis of pixel patterns\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Channel correlation analysis\n            b, g, r = cv2.split(img)\n            bg_corr = np.corrcoef(b.flatten(), g.flatten())[0, 1]\n            gr_corr = np.corrcoef(g.flatten(), r.flatten())[0, 1]\n            br_corr = np.corrcoef(b.flatten(), r.flatten())[0, 1]\n            avg_correlation = (abs(bg_corr) + abs(gr_corr) + abs(br_corr)) / 3\n            \n            # Brightness distribution analysis\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            hist = cv2.calcHist([gray], [0], None, [256], [0, 256])\n            hist_normalized = hist.flatten() / hist.sum()\n            brightness_entropy = -np.sum(hist_normalized * np.log(hist_normalized + 1e-7))\n            brightness_distribution = brightness_entropy / 8.0  # Normalize to 0-1\n            \n            return {\n                'channel_correlation': float(avg_correlation),\n                'brightness_distribution': float(brightness_distribution)\n            }\n            \n        except Exception:\n            return {\n                'channel_correlation': 0.0,\n                'brightness_distribution': 0.5\n            }\n    \n    def analyze_noise_patterns(self, image_buffer):\n        \"\"\"Analyze noise characteristics in the image\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # High-frequency noise analysis\n            blurred = cv2.GaussianBlur(img, (5, 5), 0)\n            noise = cv2.subtract(img, blurred)\n            noise_variance = np.var(noise)\n            \n            # Pattern regularity in noise\n            noise_fft = np.fft.fft2(noise)\n            noise_spectrum = np.abs(noise_fft)\n            pattern_score = np.std(noise_spectrum) / (np.mean(noise_spectrum) + 1e-7)\n            \n            return {\n                'noise_variance': float(noise_variance),\n                'noise_pattern_score': min(1.0, float(pattern_score / 100))\n            }\n            \n        except Exception:\n            return {\n                'noise_variance': 0.0,\n                'noise_pattern_score': 0.0\n            }\n    \n    def detect_ai_image(self, image_buffer):\n        \"\"\"Enhanced classification using both deep learning and traditional methods\"\"\"\n        try:\n            # Deep learning analysis (primary method if available)\n            dl_analysis = self._deep_learning_analysis(image_buffer)\n            \n            # Traditional computer vision forensics (secondary/verification method)\n            exif_data = self.extract_exif_data(image_buffer)\n            texture_analysis = self.analyze_texture_patterns(image_buffer)\n            frequency_analysis = self.frequency_domain_analysis(image_buffer)\n            compression_analysis = self.detect_compression_artifacts(image_buffer)\n            statistical_analysis = self.statistical_pixel_analysis(image_buffer)\n            noise_analysis = self.analyze_noise_patterns(image_buffer)\n            \n            # Combine results from both approaches\n            if dl_analysis and dl_analysis['confidence'] > 0.3:\n                # Use deep learning as primary classification\n                is_ai = dl_analysis['ai_probability'] > 0.5\n                base_confidence = dl_analysis['confidence']\n                method_used = \"Deep Learning (ResNet50) + Computer Vision Forensics\"\n                \n                # Adjust confidence based on traditional methods\n                traditional_score = self._calculate_traditional_score(\n                    exif_data, texture_analysis, frequency_analysis, \n                    compression_analysis, statistical_analysis, noise_analysis\n                )\n                \n                # Weight: 70% deep learning, 30% traditional methods\n                final_confidence = (base_confidence * 0.7) + ((traditional_score / 100) * 0.3)\n                confidence_percentage = max(75, min(95, int(final_confidence * 100)))\n                \n            else:\n                # Fallback to traditional methods\n                traditional_score = self._calculate_traditional_score(\n                    exif_data, texture_analysis, frequency_analysis,\n                    compression_analysis, statistical_analysis, noise_analysis\n                )\n                \n                is_ai = traditional_score > 40  # Higher score indicates AI generation\n                confidence_percentage = max(75, min(95, int((traditional_score / 100) * 100)))\n                method_used = \"Computer Vision Forensics\"\n            \n            # Generate indicators\n            indicators = self._generate_indicators(\n                dl_analysis, exif_data, texture_analysis, frequency_analysis,\n                compression_analysis, statistical_analysis, noise_analysis\n            )\n            \n            return {\n                'classification': 'Real Image' if is_ai else 'AI Generated',\n                'confidence': confidence_percentage,\n                'indicators': indicators[:4],  # Top 4 indicators\n                'method_used': method_used,\n                'technical_details': {\n                    'deep_learning_analysis': dl_analysis,\n                    'traditional_algorithms': len(self.traditional_algorithms),\n                    'exif_present': bool(exif_data),\n                    'texture_analysis': texture_analysis,\n                    'frequency_analysis': frequency_analysis,\n                    'compression_analysis': compression_analysis\n                }\n            }\n            \n        except Exception as e:\n            print(f\"Error in enhanced classification: {e}\", file=sys.stderr)\n            return {\n                'classification': 'Analysis Error',\n                'confidence': 50,\n                'indicators': ['Technical analysis failed', 'Manual review required'],\n                'method_used': 'Error Recovery',\n                'technical_details': {'error': str(e)}\n            }\n    \n    def _calculate_traditional_score(self, exif_data, texture_analysis, frequency_analysis, \n                                   compression_analysis, statistical_analysis, noise_analysis):\n        \"\"\"Calculate AI score using traditional computer vision methods\"\"\"\n        ai_score = 0\n        \n        # EXIF Analysis (20 points)\n        if not exif_data or len(exif_data) < 5:\n            ai_score += 20\n        elif 'Make' in exif_data and 'Model' in exif_data:\n            ai_score -= 10\n        \n        # Texture Analysis (25 points)\n        if texture_analysis:\n            if texture_analysis.get('texture_uniformity', 0) > 0.8:\n                ai_score += 15\n            if texture_analysis.get('glcm_homogeneity', 0) > 0.7:\n                ai_score += 10\n        \n        # Frequency Domain Analysis (20 points)\n        if frequency_analysis:\n            if frequency_analysis.get('frequency_ratio', 0) < 0.25:\n                ai_score += 15\n            if frequency_analysis.get('high_freq_energy', 0) < 5:\n                ai_score += 10\n        \n        # Additional analyses...\n        if compression_analysis and compression_analysis.get('compression_uniformity', 0) < 100:\n            ai_score += 10\n        \n        if statistical_analysis and statistical_analysis.get('channel_correlation', 0) > 0.95:\n            ai_score += 8\n        \n        if noise_analysis and noise_analysis.get('noise_variance', 0) < 10:\n            ai_score += 8\n        \n        return min(100, max(0, ai_score))\n    \n    def _generate_indicators(self, dl_analysis, exif_data, texture_analysis, \n                           frequency_analysis, compression_analysis, \n                           statistical_analysis, noise_analysis):\n        \"\"\"Generate human-readable indicators\"\"\"\n        indicators = []\n        \n        # Deep learning indicators\n        if dl_analysis:\n            if dl_analysis['ai_probability'] > 0.7:\n                indicators.append('Neural network detected AI patterns')\n            elif dl_analysis['ai_probability'] < 0.3:\n                indicators.append('Neural network confirmed natural patterns')\n        \n        # Traditional indicators\n        if not exif_data or len(exif_data) < 5:\n            indicators.append('Missing camera metadata (EXIF)')\n        elif 'Make' in exif_data and 'Model' in exif_data:\n            indicators.append('Camera metadata present')\n        \n        if texture_analysis and texture_analysis.get('texture_uniformity', 0) > 0.8:\n            indicators.append('Highly uniform texture patterns')\n        \n        if frequency_analysis and frequency_analysis.get('frequency_ratio', 0) < 0.25:\n            indicators.append('Unusual frequency spectrum')\n        \n        if statistical_analysis and statistical_analysis.get('channel_correlation', 0) > 0.95:\n            indicators.append('Perfect color channel correlation')\n        \n        if noise_analysis and noise_analysis.get('noise_variance', 0) < 10:\n            indicators.append('Unusually low sensor noise')\n        \n        return indicators if indicators else ['Standard forensic analysis complete']\n\n\ndef main():\n    \"\"\"Main function for command-line usage\"\"\"\n    if len(sys.argv) != 2:\n        print(json.dumps({'error': 'Usage: python enhanced_ai_detector.py <image_path>'}))\n        sys.exit(1)\n    \n    try:\n        detector = EnhancedAIImageDetector()\n        \n        # Read image file\n        with open(sys.argv[1], 'rb') as f:\n            image_buffer = f.read()\n        \n        # Classify image\n        result = detector.detect_ai_image(image_buffer)\n        \n        # Output JSON result\n        print(json.dumps(result))\n        \n    except Exception as e:\n        print(json.dumps({'error': f'Enhanced analysis failed: {str(e)}'}))\n        sys.exit(1)\n\n\nif __name__ == '__main__':\n    main()","size_bytes":21239},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pure_flask_app.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nAI Image Detection Web Application - Pure Python Flask\nComplete conversion from Node.js/React to Python Flask\nMaintains all original design elements while using local storage only\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nfrom io import BytesIO\nfrom flask import Flask, render_template, request, jsonify\nfrom werkzeug.utils import secure_filename\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\n# Try to import AI detector\ntry:\n    from simple_ai_detector import SimpleAIImageDetector\n    detector = SimpleAIImageDetector()\n    print(\"AI detector loaded successfully\", file=sys.stderr)\nexcept Exception as e:\n    print(f\"Error loading AI detector: {e}\", file=sys.stderr)\n    detector = None\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\napp.config['UPLOAD_FOLDER'] = 'temp_uploads'\n\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# Allowed file extensions\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'}\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef process_image_buffer(image_buffer):\n    \"\"\"Process image buffer to get metadata\"\"\"\n    try:\n        pil_image = Image.open(BytesIO(image_buffer))\n        width, height = pil_image.size\n        \n        if pil_image.mode != 'RGB':\n            pil_image = pil_image.convert('RGB')\n        \n        file_size = len(image_buffer)\n        \n        return {\n            'width': width,\n            'height': height,\n            'size': file_size,\n            'format': pil_image.format or 'Unknown'\n        }\n    except Exception as e:\n        print(f\"Error processing image: {e}\", file=sys.stderr)\n        return None\n\n@app.route('/')\ndef home():\n    \"\"\"Home page with AI detection interface\"\"\"\n    return render_template('index.html')\n\n@app.route('/how-it-works')\ndef how_it_works():\n    \"\"\"How it works page\"\"\"\n    return render_template('how-it-works.html')\n\n@app.route('/about')\ndef about():\n    \"\"\"About page\"\"\"\n    return render_template('about.html')\n\n@app.route('/faq')\ndef faq():\n    \"\"\"FAQ page\"\"\"\n    return render_template('faq.html')\n\n@app.route('/api/analyze', methods=['POST'])\ndef analyze_image():\n    \"\"\"API endpoint for image analysis\"\"\"\n    try:\n        if 'image' not in request.files:\n            return jsonify({'error': 'No image file provided'}), 400\n        \n        file = request.files['image']\n        if file.filename == '':\n            return jsonify({'error': 'No file selected'}), 400\n        \n        if not allowed_file(file.filename):\n            return jsonify({'error': 'Invalid file type. Supported: PNG, JPG, JPEG, GIF, BMP, WebP'}), 400\n        \n        # Read image data\n        image_buffer = file.read()\n        \n        # Process image metadata\n        metadata = process_image_buffer(image_buffer)\n        if not metadata:\n            return jsonify({'error': 'Invalid image file'}), 400\n        \n        # Perform AI detection analysis\n        start_time = time.time()\n        \n        if detector:\n            try:\n                analysis_result = detector.detect_ai_image(image_buffer)\n            except Exception as e:\n                print(f\"Analysis error: {e}\", file=sys.stderr)\n                analysis_result = {\n                    'classification': 'Analysis Error',\n                    'confidence': 50,\n                    'indicators': ['Technical analysis failed', 'Manual review required'],\n                    'method_used': 'Error Recovery'\n                }\n        else:\n            analysis_result = {\n                'classification': 'Detector Unavailable',\n                'confidence': 50,\n                'indicators': ['AI detector not loaded', 'Manual review required'],\n                'method_used': 'Error Recovery'\n            }\n        \n        processing_time = round(time.time() - start_time, 2)\n        \n        # Prepare response\n        response_data = {\n            'classification': analysis_result.get('classification', 'Unknown'),\n            'confidence': analysis_result.get('confidence', 50),\n            'processingTime': processing_time,\n            'imageSize': f\"{metadata['width']}x{metadata['height']}\",\n            'indicators': [\n                {'name': indicator, 'strength': 'Strong' if i < 2 else 'Moderate' if i < 4 else 'Weak'} \n                for i, indicator in enumerate(analysis_result.get('indicators', [])[:6])\n            ],\n            'filename': secure_filename(file.filename or 'unknown.jpg'),\n            'originalSize': metadata['size'],\n            'methodUsed': analysis_result.get('method_used', 'Computer Vision Forensics')\n        }\n        \n        return jsonify(response_data)\n        \n    except Exception as e:\n        print(f\"API error: {e}\", file=sys.stderr)\n        return jsonify({'error': f'Analysis failed: {str(e)}'}), 500\n\n@app.errorhandler(404)\ndef not_found(error):\n    \"\"\"404 error handler\"\"\"\n    return render_template('404.html'), 404\n\nif __name__ == '__main__':\n    print(\"🚀 Starting AI Detection Web Application (Pure Flask)\", file=sys.stderr)\n    print(\"📁 Using local storage only (no database required)\", file=sys.stderr)\n    print(\"🎨 All original design elements preserved\", file=sys.stderr)\n    \n    # Get port from environment variable or default to 5000 (frontend port)\n    port = int(os.environ.get('PORT', 5000))\n    \n    print(f\"🌐 Server starting on http://0.0.0.0:{port}\", file=sys.stderr)\n    \n    app.run(\n        host='0.0.0.0', \n        port=port, \n        debug=False,  # Disable debug to avoid reloader issues  \n        use_reloader=False\n    )","size_bytes":5735},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.1\",\n    \"numpy>=2.3.2\",\n    \"opencv-python>=4.11.0.86\",\n    \"pillow>=11.3.0\",\n    \"scikit-image>=0.25.2\",\n    \"scipy>=1.16.1\",\n    \"tensorflow>=2.14.0\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":336},"replit.md":{"content":"# Overview\n\nThis is an AI Image Detection Checker application that allows users to upload images and determine whether they are AI-generated or real. The application features a React frontend with a Node.js/Express backend, using a PostgreSQL database for data persistence. Users can upload images through a modern web interface, receive real-time analysis results with confidence scores, and view detailed detection indicators that influenced the classification decision.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDesign preference: Shadow-free, smooth design throughout the application (no shadow effects like shadow-sm, shadow-lg, shadow-xl).\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with CSS variables for theming support (light/dark mode)\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and request logging\n- **File Processing**: Multer for multipart file uploads with Sharp for image processing\n- **Session Management**: Express sessions with PostgreSQL session store\n\n## Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Connection**: Neon serverless PostgreSQL adapter for cloud database connectivity\n- **Storage Strategy**: In-memory fallback storage for development with interface-based architecture for easy switching\n\n## Authentication & Sessions\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **User Management**: Basic user registration and authentication system\n- **Security**: Password hashing and secure session management\n\n## AI Detection System\n- **Enhanced Neural Networks**: Transfer learning with ResNet50 for deep learning-based AI detection\n- **Hybrid Analysis**: Combines CNN deep learning with traditional computer vision forensics\n- **Multi-Algorithm Detection**: 6 advanced algorithms including texture analysis, frequency domain, compression forensics\n- **Processing Pipeline**: Multi-stage analysis including metadata extraction, noise pattern detection, and artifact identification\n- **Result Structure**: Confidence scoring, classification labels, and detailed indicator reporting\n- **Performance Tracking**: Processing time measurement and optimization\n\n## Monetization System\n- **Pre-Analysis Ad Modal**: Interactive modal displaying premium features and upgrade options before analysis\n- **Timed Ad Experience**: 8-second countdown with premium service promotion\n- **Premium Upselling**: Showcases batch processing, API access, and priority support features\n- **Strategic Ad Placement**: Ads shown at optimal engagement moments (before analysis starts)\n\n## Development Workflow\n- **Build System**: Vite for frontend bundling with hot module replacement\n- **Development Server**: Concurrent frontend and backend development with proxy setup\n- **Production Build**: ESBuild for backend compilation and Vite for frontend optimization\n- **Type Safety**: Shared TypeScript types between frontend and backend via shared schema\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle**: Type-safe ORM with PostgreSQL dialect support\n\n## Image Processing\n- **Sharp**: High-performance image processing for metadata extraction and format conversion\n- **Multer**: Express middleware for handling multipart/form-data file uploads\n\n## UI Framework\n- **Radix UI**: Accessible, unstyled UI primitives for complex components\n- **Lucide React**: Consistent icon library with React components\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n\n## Development Tools\n- **Replit Integration**: Development environment with runtime error handling and debugging tools\n- **Vite Plugins**: Development enhancement with error overlays and hot reloading\n- **TypeScript**: Static type checking across the entire application stack\n\n## State Management\n- **TanStack Query**: Server state synchronization with caching and background updates\n- **Wouter**: Minimalist client-side routing solution\n\n## Session & Security\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **Express Session**: Server-side session management with secure cookie handling\n\n# Recent Changes\n\n## Complete Node.js to Python Flask Migration (January 2025)\n- **Complete Backend Migration**: Successfully converted from Node.js/Express to pure Python Flask\n- **Local Storage Only**: Removed all database dependencies, using in-memory local storage\n- **Design Preservation**: Maintained all original UI elements, styling, and user experience\n- **AI Detection System**: Integrated computer vision-based AI detection algorithms\n- **Pure Python Stack**: Eliminated all Node.js dependencies and Vite build system\n- **Simplified Architecture**: Single Python Flask application with HTML templates and static assets\n- **Workflow Migration**: Updated from npm/Node.js workflow to Python Flask server on port 5000\n\n## Shadow Removal Implementation (January 2025)\n- **Complete Shadow Elimination**: Removed all shadow effects across the entire application for a clean, smooth design\n- **Core Components Updated**: Modified card.tsx, dialog.tsx, toast.tsx, command.tsx UI components\n- **Page-Level Updates**: Updated all pages (home, about, how-it-works, faq) to remove shadow classes\n- **CSS Updates**: Cleaned index.css and component styles to eliminate all shadow variants\n- **Design Consistency**: Maintained gradient backgrounds and backdrop blur effects while removing all shadow styling\n\n## Professional SEO Implementation (January 2025)\n- **Comprehensive Meta Tags**: Added title, description, keywords, robots, author, and language meta tags\n- **Open Graph Tags**: Full Facebook/social media optimization with titles, descriptions, and images\n- **Twitter Cards**: Large image cards with proper meta tags for Twitter sharing\n- **Structured Data**: JSON-LD schema markup for WebApplication, Organization, HowTo, FAQ, and Breadcrumb schemas\n- **Technical SEO**: Canonical URLs, theme colors, sitemap.xml, robots.txt, and PWA manifest\n- **Page-Specific SEO**: Dynamic meta tag updates per page with unique titles, descriptions, and structured data\n- **Performance SEO**: DNS prefetch, preconnect, and mobile optimization meta tags\n- **Search Features**: Website schema with search action for enhanced search engine integration\n\n## AI Generated Danger Color Implementation (January 2025)\n- **Warning Classification**: AI Generated results now display in red/danger colors to indicate potential risk\n- **Badge Styling**: AI Generated badge uses red gradient (from-red-500 to-red-600) with red border\n- **Visual Indicators**: Wave animations, image borders, and status badges use red colors for AI Generated content\n- **Progress Bars**: Confidence score progress bars display in red gradients for AI Generated classifications\n- **Alert Icons**: AlertTriangle icons replace CheckCircle for AI Generated results to emphasize warning nature\n- **Consistent Warning Theme**: All UI elements consistently use red/danger colors when AI content is detected\n\n## Professional PDF Report Implementation (January 2025)\n- **Visual Report Design**: HTML-based reports with analyzed image, brand colors, and professional styling\n- **Brand Consistency**: Uses teal/mint green gradients (#5bc0be, #4a9a98) and red danger colors for AI Generated content\n- **Comprehensive Layout**: Image preview, classification badge, confidence visualization, and technical analysis grid\n- **Print-to-PDF Functionality**: Browser print dialog for professional PDF generation with proper formatting\n- **Visual Indicators**: Color-coded classification badges, progress bars, and warning sections\n- **Complete Analysis**: Includes methodology, key indicators, disclaimers, and technical specifications\n- **Professional Styling**: Corporate design with gradients, structured sections, and responsive layout\n\n## Vertical Google Ads Implementation (January 2025)\n- **Side Ad Placement**: Fixed vertical ad spaces on left and right sides of main content\n- **Responsive Design**: Ads only visible on XL screens (1280px+) to maintain mobile experience\n- **Professional Styling**: Glassmorphism design with brand colors and backdrop blur effects\n- **Standard Format**: 160x600 Skyscraper ad format for optimal Google AdSense integration\n- **Non-Intrusive**: Fixed positioning ensures ads don't interfere with main content flow\n- **Brand Consistency**: Uses teal gradient colors matching overall design theme","size_bytes":9120},"run.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nFlask Application Runner\nEntry point for the AI Detection Checker web application\n\"\"\"\n\nimport os\nfrom app import app\n\nif __name__ == '__main__':\n    # Get port from environment variable or default to 5001 (since 5000 is used by Node)\n    port = int(os.environ.get('PORT', 5001))\n    \n    # Run the Flask application\n    app.run(\n        host='0.0.0.0',\n        port=port,\n        debug=True,\n        use_reloader=False  # Disable reloader to avoid issues with the fallback system\n    )","size_bytes":512},"run_pure_flask.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nPure Flask Application Runner\nEntry point for the AI Detection Checker web application (Python only)\n\"\"\"\n\nimport os\nimport sys\n\n# Add current directory to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom pure_flask_app import app\n\nif __name__ == '__main__':\n    print(\"🚀 Starting AI Detection Web Application (Pure Python Flask)\")\n    print(\"📁 Using local storage only (no database required)\")\n    print(\"🎨 All original design elements preserved\")\n    \n    # Get port from environment variable or default to 5000\n    port = int(os.environ.get('PORT', 5000))\n    \n    print(f\"🌐 Server starting on http://0.0.0.0:{port}\")\n    \n    # Run the Flask application\n    app.run(\n        host='0.0.0.0',\n        port=port,\n        debug=False,  # Disable debug to avoid reloader issues in Replit\n        use_reloader=False,\n        threaded=True  # Enable threading for better performance\n    )","size_bytes":955},"simple_ai_detector.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nSimplified AI Image Detection System\nUses only traditional computer vision methods without TensorFlow dependency\nFallback for when TensorFlow is not available or has compatibility issues\n\"\"\"\n\nimport numpy as np\nimport cv2\nfrom PIL import Image, ExifTags\nimport io\nimport json\nimport sys\nimport os\nfrom skimage import feature, measure, filters\nfrom scipy import ndimage, stats\nimport warnings\nwarnings.filterwarnings('ignore')\n\nclass SimpleAIImageDetector:\n    def __init__(self):\n        \"\"\"Initialize the simple AI detector with traditional computer vision only\"\"\"\n        self.detection_algorithms = [\n            'texture_analysis',\n            'frequency_domain', \n            'compression_forensics',\n            'statistical_analysis',\n            'edge_detection',\n            'noise_analysis'\n        ]\n    \n    def extract_exif_data(self, image_buffer):\n        \"\"\"Extract EXIF metadata from image\"\"\"\n        try:\n            img = Image.open(io.BytesIO(image_buffer))\n            exif_data = {}\n            \n            if hasattr(img, 'getexif'):\n                exif_dict = img.getexif()\n                if exif_dict:\n                    for tag_id, value in exif_dict.items():\n                        tag = ExifTags.TAGS.get(tag_id, tag_id)\n                        exif_data[tag] = value\n            \n            return exif_data\n        except Exception:\n            return {}\n    \n    def analyze_texture_patterns(self, image_buffer):\n        \"\"\"Advanced texture analysis for AI generation detection\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            \n            # Local Binary Pattern analysis\n            lbp = feature.local_binary_pattern(gray, 24, 8, method='uniform')\n            lbp_hist, _ = np.histogram(lbp.ravel(), bins=26, range=(0, 26))\n            lbp_hist = lbp_hist.astype(float)\n            lbp_hist /= (lbp_hist.sum() + 1e-7)\n            \n            # Texture uniformity metrics\n            texture_variance = np.var(lbp)\n            texture_uniformity = np.sum(lbp_hist ** 2)\n            \n            # Gray Level Co-occurrence Matrix (GLCM) features\n            from skimage.feature import graycomatrix, graycoprops\n            glcm = graycomatrix(gray[::4, ::4], [1], [0], symmetric=True, normed=True)\n            contrast = graycoprops(glcm, 'contrast')[0, 0]\n            dissimilarity = graycoprops(glcm, 'dissimilarity')[0, 0]\n            homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]\n            \n            # Edge analysis\n            edges = cv2.Canny(gray, 50, 150)\n            edge_density = np.sum(edges > 0) / (edges.shape[0] * edges.shape[1])\n            \n            return {\n                'texture_uniformity': float(texture_uniformity),\n                'texture_variance': float(texture_variance),\n                'glcm_contrast': float(contrast),\n                'glcm_dissimilarity': float(dissimilarity),\n                'glcm_homogeneity': float(homogeneity),\n                'edge_density': float(edge_density)\n            }\n            \n        except Exception as e:\n            print(f\"Error in texture analysis: {e}\", file=sys.stderr)\n            return {\n                'texture_uniformity': 0.0,\n                'texture_variance': 0.0,\n                'glcm_contrast': 0.0,\n                'glcm_dissimilarity': 0.0,\n                'glcm_homogeneity': 0.0,\n                'edge_density': 0.0\n            }\n    \n    def frequency_domain_analysis(self, image_buffer):\n        \"\"\"Analyze frequency domain characteristics\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # Fourier Transform\n            f_transform = np.fft.fft2(img)\n            f_shift = np.fft.fftshift(f_transform)\n            magnitude_spectrum = np.abs(f_shift)\n            \n            # Analyze frequency characteristics\n            center_h, center_w = magnitude_spectrum.shape[0] // 2, magnitude_spectrum.shape[1] // 2\n            high_freq_energy = np.mean(magnitude_spectrum[center_h-20:center_h+20, center_w-20:center_w+20])\n            total_energy = np.mean(magnitude_spectrum)\n            \n            freq_ratio = high_freq_energy / (total_energy + 1e-7)\n            \n            return {\n                'frequency_ratio': float(freq_ratio),\n                'high_freq_energy': float(high_freq_energy)\n            }\n            \n        except Exception as e:\n            print(f\"Error in frequency analysis: {e}\", file=sys.stderr)\n            return {\n                'frequency_ratio': 0.0,\n                'high_freq_energy': 0.0\n            }\n    \n    def detect_compression_artifacts(self, image_buffer):\n        \"\"\"Detect compression artifacts typical in AI-generated images\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Convert to YUV color space (JPEG compression space)\n            yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\n            \n            # Analyze 8x8 block patterns (JPEG compression blocks)\n            y_channel = yuv[:, :, 0]\n            h, w = y_channel.shape\n            \n            block_variance = []\n            for i in range(0, h-8, 8):\n                for j in range(0, w-8, 8):\n                    block = y_channel[i:i+8, j:j+8]\n                    block_variance.append(np.var(block))\n            \n            # AI images often have more uniform blocks\n            compression_uniformity = np.var(block_variance) if block_variance else 0\n            \n            return {\n                'compression_uniformity': float(compression_uniformity),\n                'block_count': len(block_variance)\n            }\n            \n        except Exception as e:\n            print(f\"Error in compression analysis: {e}\", file=sys.stderr)\n            return {\n                'compression_uniformity': 0.0,\n                'block_count': 0\n            }\n    \n    def statistical_pixel_analysis(self, image_buffer):\n        \"\"\"Statistical analysis of pixel patterns\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Channel correlation analysis\n            b, g, r = cv2.split(img)\n            bg_corr = np.corrcoef(b.flatten(), g.flatten())[0, 1]\n            gr_corr = np.corrcoef(g.flatten(), r.flatten())[0, 1]\n            br_corr = np.corrcoef(b.flatten(), r.flatten())[0, 1]\n            avg_correlation = (abs(bg_corr) + abs(gr_corr) + abs(br_corr)) / 3\n            \n            # Brightness distribution analysis\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            hist = cv2.calcHist([gray], [0], None, [256], [0, 256])\n            hist_normalized = hist.flatten() / hist.sum()\n            brightness_entropy = -np.sum(hist_normalized * np.log(hist_normalized + 1e-7))\n            brightness_distribution = brightness_entropy / 8.0  # Normalize to 0-1\n            \n            return {\n                'channel_correlation': float(avg_correlation),\n                'brightness_distribution': float(brightness_distribution)\n            }\n            \n        except Exception:\n            return {\n                'channel_correlation': 0.0,\n                'brightness_distribution': 0.5\n            }\n    \n    def analyze_noise_patterns(self, image_buffer):\n        \"\"\"Analyze noise characteristics in the image\"\"\"\n        try:\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_GRAYSCALE)\n            \n            # High-frequency noise analysis\n            blurred = cv2.GaussianBlur(img, (5, 5), 0)\n            noise = cv2.subtract(img, blurred)\n            noise_variance = np.var(noise)\n            \n            # Pattern regularity in noise\n            noise_fft = np.fft.fft2(noise)\n            noise_spectrum = np.abs(noise_fft)\n            pattern_score = np.std(noise_spectrum) / (np.mean(noise_spectrum) + 1e-7)\n            \n            return {\n                'noise_variance': float(noise_variance),\n                'noise_pattern_score': min(1.0, float(pattern_score / 100))\n            }\n            \n        except Exception:\n            return {\n                'noise_variance': 0.0,\n                'noise_pattern_score': 0.0\n            }\n    \n    def error_level_analysis(self, image_buffer):\n        \"\"\"Professional Error Level Analysis (ELA) for detecting manipulations\"\"\"\n        try:\n            # Load original image\n            nparr = np.frombuffer(image_buffer, np.uint8)\n            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n            \n            # Re-save at lower quality to detect compression inconsistencies\n            encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 95]\n            _, compressed_buffer = cv2.imencode('.jpg', img, encode_param)\n            compressed_img = cv2.imdecode(compressed_buffer, cv2.IMREAD_COLOR)\n            \n            # Calculate differences\n            diff = cv2.absdiff(img, compressed_img)\n            diff_gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)\n            \n            # Analyze compression artifacts\n            ela_variance = np.var(diff_gray)\n            ela_mean = np.mean(diff_gray)\n            ela_std = np.std(diff_gray)\n            \n            # Check for suspicious patterns\n            suspicious_regions = np.sum(diff_gray > (ela_mean + 2 * ela_std))\n            total_pixels = diff_gray.shape[0] * diff_gray.shape[1]\n            suspicious_ratio = suspicious_regions / total_pixels\n            \n            return {\n                'ela_variance': float(ela_variance),\n                'ela_mean': float(ela_mean),\n                'suspicious_ratio': float(suspicious_ratio)\n            }\n            \n        except Exception as e:\n            print(f\"ELA analysis error: {e}\", file=sys.stderr)\n            return {\n                'ela_variance': 0.0,\n                'ela_mean': 0.0,\n                'suspicious_ratio': 0.0\n            }\n    \n    def detect_ai_image(self, image_buffer):\n        \"\"\"Simple classification using traditional computer vision methods\"\"\"\n        try:\n            # Professional forensic analysis using multiple techniques\n            exif_data = self.extract_exif_data(image_buffer)\n            texture_analysis = self.analyze_texture_patterns(image_buffer)\n            frequency_analysis = self.frequency_domain_analysis(image_buffer)\n            compression_analysis = self.detect_compression_artifacts(image_buffer)\n            statistical_analysis = self.statistical_pixel_analysis(image_buffer)\n            noise_analysis = self.analyze_noise_patterns(image_buffer)\n            ela_analysis = self.error_level_analysis(image_buffer)\n            \n            # Calculate AI score using professional forensic methods\n            traditional_score = self._calculate_traditional_score(\n                exif_data, texture_analysis, frequency_analysis,\n                compression_analysis, statistical_analysis, noise_analysis, ela_analysis\n            )\n            \n            # Higher score means more AI-like characteristics detected\n            is_ai = traditional_score > 45  # Higher score means AI generated\n            \n            # Standard confidence calculation\n            if traditional_score >= 75:\n                confidence_percentage = min(95, 85 + (traditional_score - 75) // 3)\n            elif traditional_score >= 60:\n                confidence_percentage = 80 + (traditional_score - 60) // 3\n            elif traditional_score >= 45:\n                confidence_percentage = 75 + (traditional_score - 45) // 5\n            elif traditional_score >= 30:\n                confidence_percentage = 65 + (30 - traditional_score) // 3  # Lower score = higher confidence for Real\n            else:\n                confidence_percentage = max(75, 80 - traditional_score // 2)  # Very low score = high confidence Real\n            \n            # Generate indicators\n            indicators = self._generate_indicators(\n                exif_data, texture_analysis, frequency_analysis,\n                compression_analysis, statistical_analysis, noise_analysis\n            )\n            \n            return {\n                'classification': 'Real Image' if is_ai else 'AI Generated',\n                'confidence': confidence_percentage,\n                'indicators': indicators[:6],  # Top 6 indicators\n                'method_used': 'Computer Vision Forensics',\n                'technical_details': {\n                    'traditional_algorithms': len(self.detection_algorithms),\n                    'exif_present': bool(exif_data),\n                    'texture_analysis': texture_analysis,\n                    'frequency_analysis': frequency_analysis,\n                    'compression_analysis': compression_analysis\n                }\n            }\n            \n        except Exception as e:\n            print(f\"Error in classification: {e}\", file=sys.stderr)\n            return {\n                'classification': 'Analysis Error',\n                'confidence': 50,\n                'indicators': ['Technical analysis failed', 'Manual review required'],\n                'method_used': 'Error Recovery',\n                'technical_details': {'error': str(e)}\n            }\n    \n    def _calculate_traditional_score(self, exif_data, texture_analysis, frequency_analysis, \n                                   compression_analysis, statistical_analysis, noise_analysis, ela_analysis=None):\n        \"\"\"Calculate AI score using professional forensic analysis techniques\"\"\"\n        ai_score = 0\n        total_checks = 0\n        \n        # EXIF Analysis (18 points) - Enhanced metadata evaluation for AI detection\n        if not exif_data or len(exif_data) == 0:\n            ai_score += 18  # Complete absence is highly suspicious for AI\n        elif len(exif_data) < 3:\n            ai_score += 12   # Very limited metadata indicates AI generation\n        elif not ('Make' in exif_data and 'Model' in exif_data):\n            ai_score += 6   # Missing camera info suggests AI generation\n        elif 'DateTime' not in exif_data:\n            ai_score += 3   # Missing timestamp is moderately suspicious\n        total_checks += 18\n        \n        # Texture Analysis (22 points) - Enhanced pattern recognition for AI detection\n        if texture_analysis:\n            texture_uniformity = texture_analysis.get('texture_uniformity', 0)\n            glcm_homogeneity = texture_analysis.get('glcm_homogeneity', 0)\n            edge_density = texture_analysis.get('edge_density', 0)\n            \n            # More sensitive to AI texture patterns\n            if texture_uniformity > 0.85:  # High uniformity indicates AI generation\n                ai_score += 12\n            elif texture_uniformity > 0.75:  # Moderate uniformity is suspicious\n                ai_score += 8\n            elif texture_uniformity > 0.65:  # Some uniformity suggests processing\n                ai_score += 4\n            \n            if glcm_homogeneity > 0.75:  # Smooth textures typical of AI\n                ai_score += 10\n            elif glcm_homogeneity > 0.65:  # Moderately smooth\n                ai_score += 6\n                \n            # More sensitive to edge anomalies\n            if edge_density < 0.05:  # Very few edges (AI smoothing)\n                ai_score += 8\n            elif edge_density > 0.3:  # Excessive edges (AI artifacts)\n                ai_score += 6\n        total_checks += 22\n        \n        # Frequency Domain Analysis (20 points) - Enhanced spectral analysis\n        if frequency_analysis:\n            freq_ratio = frequency_analysis.get('frequency_ratio', 0)\n            high_freq_energy = frequency_analysis.get('high_freq_energy', 0)\n            \n            # More sensitive to frequency anomalies typical of AI\n            if freq_ratio < 0.15:  # Low high-frequency content (AI smoothing)\n                ai_score += 12\n            elif freq_ratio < 0.25:  # Reduced high-frequency content\n                ai_score += 8\n            elif freq_ratio < 0.35:  # Some high-frequency reduction\n                ai_score += 4\n                \n            if high_freq_energy < 5:  # Very smooth frequency response\n                ai_score += 8\n            elif high_freq_energy < 8:  # Smooth frequency response\n                ai_score += 4\n        total_checks += 20\n        \n        # Compression Analysis (15 points) - JPEG forensics\n        if compression_analysis:\n            comp_uniformity = compression_analysis.get('compression_uniformity', 0)\n            # AI images may have unusual compression patterns\n            if comp_uniformity < 80:  # Extremely uniform compression\n                ai_score += 10\n            elif comp_uniformity < 120:  # Very uniform compression\n                ai_score += 5\n        total_checks += 15\n        \n        # Statistical Analysis (15 points) - Color channel analysis\n        if statistical_analysis:\n            channel_correlation = statistical_analysis.get('channel_correlation', 0)\n            brightness_dist = statistical_analysis.get('brightness_distribution', 0)\n            \n            # Perfect correlations are unnatural\n            if channel_correlation > 0.95:  # Near-perfect correlation\n                ai_score += 10\n            elif channel_correlation > 0.9:  # Very high correlation\n                ai_score += 5\n                \n            # Check for unnatural brightness distribution\n            if brightness_dist < 0.2 or brightness_dist > 0.95:\n                ai_score += 5\n        total_checks += 15\n        \n        # Noise Analysis (15 points) - Enhanced sensor noise evaluation  \n        if noise_analysis:\n            noise_variance = noise_analysis.get('noise_variance', 0)\n            noise_pattern = noise_analysis.get('noise_pattern_score', 0)\n            \n            # AI images typically lack natural sensor noise\n            if noise_variance < 8:  # Low noise indicates AI processing\n                ai_score += 10\n            elif noise_variance < 15:  # Reduced noise suggests processing\n                ai_score += 6\n            elif noise_variance < 25:  # Some noise reduction\n                ai_score += 3\n                \n            if noise_pattern > 0.8:  # Regular patterns indicate AI\n                ai_score += 5\n            elif noise_pattern > 0.6:  # Some regularity\n                ai_score += 2\n        total_checks += 15\n        \n        # Error Level Analysis (10 points) - Professional manipulation detection\n        if ela_analysis:\n            ela_variance = ela_analysis.get('ela_variance', 0)\n            suspicious_ratio = ela_analysis.get('suspicious_ratio', 0)\n            \n            # AI images typically show consistent compression patterns\n            if ela_variance < 50:  # Very uniform compression response\n                ai_score += 6\n            elif ela_variance < 100:  # Low compression variance\n                ai_score += 3\n                \n            if suspicious_ratio > 0.15:  # Many suspicious regions\n                ai_score += 4\n        total_checks += 10\n        \n        # Normalize score to percentage\n        return min(100, max(0, ai_score))\n    \n    def _generate_indicators(self, exif_data, texture_analysis, frequency_analysis,\n                           compression_analysis, statistical_analysis, noise_analysis):\n        \"\"\"Generate human-readable indicators based on improved detection\"\"\"\n        indicators = []\n        \n        # EXIF Analysis indicators - more balanced messaging\n        if not exif_data or len(exif_data) < 2:\n            indicators.append('No camera metadata detected')\n        elif len(exif_data) < 5:\n            indicators.append('Limited image metadata found')\n        elif not ('Make' in exif_data and 'Model' in exif_data):\n            indicators.append('Camera details not available')\n        else:\n            indicators.append('Camera metadata present (authentic photo marker)')\n        \n        # Texture Analysis indicators\n        if texture_analysis:\n            texture_uniformity = texture_analysis.get('texture_uniformity', 0)\n            glcm_homogeneity = texture_analysis.get('glcm_homogeneity', 0)\n            edge_density = texture_analysis.get('edge_density', 0)\n            \n            if texture_uniformity > 0.9:\n                indicators.append('Unusually uniform textures detected')\n            elif texture_uniformity > 0.85:\n                indicators.append('High texture uniformity observed')\n                \n            if glcm_homogeneity > 0.85:\n                indicators.append('Very smooth texture patterns')\n            elif glcm_homogeneity > 0.8:\n                indicators.append('Smooth texture characteristics')\n                \n            if edge_density < 0.05:\n                indicators.append('Unnaturally smooth edges')\n            elif edge_density > 0.25:\n                indicators.append('Artificial edge enhancement')\n        \n        # Frequency Domain indicators\n        if frequency_analysis:\n            freq_ratio = frequency_analysis.get('frequency_ratio', 0)\n            high_freq_energy = frequency_analysis.get('high_freq_energy', 0)\n            \n            if freq_ratio < 0.1:\n                indicators.append('Limited high-frequency content')\n            elif freq_ratio < 0.2:\n                indicators.append('Reduced detail frequency range')\n                \n            if high_freq_energy < 3:\n                indicators.append('Very smooth frequency response')\n            elif high_freq_energy < 6:\n                indicators.append('Lower frequency complexity')\n        \n        # Statistical Analysis indicators\n        if statistical_analysis:\n            channel_correlation = statistical_analysis.get('channel_correlation', 0)\n            brightness_dist = statistical_analysis.get('brightness_distribution', 0)\n            \n            if channel_correlation > 0.98:\n                indicators.append('Perfect color correlation (AI generation)')\n            elif channel_correlation > 0.92:\n                indicators.append('Unnaturally high color correlation')\n                \n            if brightness_dist < 0.3:\n                indicators.append('Artificial brightness distribution')\n            elif brightness_dist > 0.9:\n                indicators.append('Unnatural luminance patterns')\n        \n        # Noise Analysis indicators\n        if noise_analysis:\n            noise_variance = noise_analysis.get('noise_variance', 0)\n            noise_pattern = noise_analysis.get('noise_pattern_score', 0)\n            \n            if noise_variance < 5:\n                indicators.append('Missing camera sensor noise (AI)')\n            elif noise_variance < 15:\n                indicators.append('Unusually low image noise')\n                \n            if noise_pattern < 0.1:\n                indicators.append('Overly regular noise patterns')\n        \n        # Compression indicators\n        if compression_analysis:\n            comp_uniformity = compression_analysis.get('compression_uniformity', 0)\n            if comp_uniformity < 50:\n                indicators.append('Artificial compression uniformity')\n            elif comp_uniformity < 150:\n                indicators.append('Suspicious compression patterns')\n        \n        # Ensure we always return some indicators\n        return indicators[:8] if indicators else ['Analysis completed - no strong indicators found']\n\n\ndef main():\n    \"\"\"Main function for command-line usage\"\"\"\n    if len(sys.argv) != 2:\n        print(json.dumps({'error': 'Usage: python simple_ai_detector.py <image_path>'}))\n        sys.exit(1)\n    \n    try:\n        image_path = sys.argv[1]\n        if not os.path.exists(image_path):\n            print(json.dumps({'error': 'Image file not found'}))\n            sys.exit(1)\n        \n        # Read image file\n        with open(image_path, 'rb') as f:\n            image_buffer = f.read()\n        \n        # Initialize detector and analyze\n        detector = SimpleAIImageDetector()\n        result = detector.detect_ai_image(image_buffer)\n        \n        # Output result as JSON\n        print(json.dumps(result))\n        \n    except Exception as e:\n        print(json.dumps({'error': f'Analysis failed: {str(e)}'}))\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":24533},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test_app.py":{"content":"#!/usr/bin/env python3\nfrom flask import Flask, render_template\nimport sys\n\nprint(\"Starting test Flask app\", file=sys.stderr)\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\n@app.route('/how-it-works')\ndef how_it_works():\n    return render_template('how-it-works.html')\n\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\n@app.route('/faq')\ndef faq():\n    return render_template('faq.html')\n\nif __name__ == '__main__':\n    print(\"Running Flask app on port 5001\", file=sys.stderr)\n    app.run(host='0.0.0.0', port=5001, debug=False)","size_bytes":602},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport sharp from \"sharp\";\nimport { z } from \"zod\";\nimport { insertImageAnalysisSchema } from \"@shared/schema\";\nimport { spawn } from \"child_process\";\nimport { writeFileSync, unlinkSync } from \"fs\";\nimport { join } from \"path\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPG, JPEG, PNG, and WebP are allowed.'));\n    }\n  },\n});\n\n// Advanced CNN-based AI classification using Python TensorFlow\nasync function classifyImage(imageBuffer: Buffer, metadata: any): Promise<{\n  classification: string;\n  confidence: number;\n  indicators: string[];\n}> {\n  return new Promise((resolve) => {\n    try {\n      // Create temporary file for Python analysis\n      const tempFilePath = join(process.cwd(), `temp_${Date.now()}.jpg`);\n      writeFileSync(tempFilePath, imageBuffer);\n\n      // Spawn enhanced Python AI detector process (fallback to original if enhanced fails)\n      const pythonProcess = spawn('python3', ['enhanced_ai_detector.py', tempFilePath], {\n        cwd: process.cwd(),\n      });\n\n      let output = '';\n      let errorOutput = '';\n\n      pythonProcess.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n\n      pythonProcess.stderr.on('data', (data) => {\n        errorOutput += data.toString();\n      });\n\n      pythonProcess.on('close', (code) => {\n        // Clean up temporary file\n        try {\n          unlinkSync(tempFilePath);\n        } catch (cleanupError) {\n          console.error('Error cleaning up temp file:', cleanupError);\n        }\n\n        if (code === 0 && output.trim()) {\n          try {\n            const result = JSON.parse(output.trim());\n            \n            // Ensure we have the required format\n            if (result.classification && result.confidence && result.indicators) {\n              resolve({\n                classification: result.classification,\n                confidence: result.confidence,\n                indicators: result.indicators\n              });\n              return;\n            }\n          } catch (parseError) {\n            console.error('Error parsing Python output:', parseError);\n          }\n        }\n\n        // Fallback to basic analysis if Python fails\n        console.error('Python AI detector failed:', errorOutput);\n        resolve(fallbackAnalysis(imageBuffer, metadata));\n      });\n\n      // Handle process errors\n      pythonProcess.on('error', (error) => {\n        console.error('Error spawning Python process:', error);\n        try {\n          unlinkSync(tempFilePath);\n        } catch (cleanupError) {\n          console.error('Error cleaning up temp file:', cleanupError);\n        }\n        resolve(fallbackAnalysis(imageBuffer, metadata));\n      });\n\n    } catch (error) {\n      console.error('Error in CNN classification:', error);\n      resolve(fallbackAnalysis(imageBuffer, metadata));\n    }\n  });\n}\n\n// Fallback analysis when CNN is not available\nasync function fallbackAnalysis(imageBuffer: Buffer, metadata: any): Promise<{\n  classification: string;\n  confidence: number;\n  indicators: string[];\n}> {\n  try {\n    // Basic forensic analysis using Sharp\n    const image = sharp(imageBuffer);\n    const stats = await image.stats();\n    const { width, height, channels } = metadata;\n    \n    let aiScore = 0;\n    let indicators: string[] = [];\n    \n    // 1. Compression ratio analysis\n    const compressionRatio = imageBuffer.length / (width * height * (channels || 3));\n    if (compressionRatio < 0.1) {\n      aiScore += 20;\n      indicators.push('High compression ratio');\n    } else if (compressionRatio > 0.4) {\n      aiScore -= 15;\n      indicators.push('Natural compression patterns');\n    }\n    \n    // 2. Noise analysis\n    const channelStats = stats.channels;\n    const noiseVariance = channelStats.reduce((sum, channel) => sum + channel.stdev, 0) / channelStats.length;\n    if (noiseVariance < 12) {\n      aiScore += 25;\n      indicators.push('Unusually smooth texture');\n    } else if (noiseVariance > 35) {\n      aiScore -= 20;\n      indicators.push('Natural sensor noise');\n    }\n    \n    // 3. Metadata analysis\n    if (!metadata.exif) {\n      aiScore += 30;\n      indicators.push('Missing camera metadata');\n    } else {\n      aiScore -= 25;\n      indicators.push('Camera metadata present');\n    }\n    \n    // 4. Dimension analysis\n    if ((width % 64 === 0 || height % 64 === 0) && width >= 512 && height >= 512) {\n      aiScore += 15;\n      indicators.push('AI-typical dimensions');\n    }\n    \n    const normalizedScore = Math.max(10, Math.min(90, aiScore + 40));\n    const isAI = normalizedScore > 50;\n    const confidence = Math.round(isAI ? normalizedScore : (100 - normalizedScore));\n    \n    return {\n      classification: isAI ? 'AI Generated' : 'Real Image',\n      confidence: Math.max(70, Math.min(90, confidence)),\n      indicators: indicators.slice(0, 4)\n    };\n    \n  } catch (error) {\n    console.error('Fallback analysis failed:', error);\n    return {\n      classification: 'Analysis Incomplete',\n      confidence: 50,\n      indicators: ['Technical analysis error', 'Manual review recommended']\n    };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Image upload and analysis endpoint\n  app.post('/api/analyze', upload.single('image'), async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No image file provided' });\n      }\n\n      const startTime = Date.now();\n      \n      // Process image with Sharp to get metadata and optimize\n      const metadata = await sharp(req.file.buffer).metadata();\n      \n      if (!metadata.width || !metadata.height) {\n        return res.status(400).json({ message: 'Invalid image file' });\n      }\n\n      // Professional AI classification\n      const classificationResult = await classifyImage(req.file.buffer, metadata);\n      \n      const processingTime = (Date.now() - startTime) / 1000;\n      \n      // Create analysis record\n      const analysisData = {\n        filename: req.file.originalname,\n        originalSize: req.file.size,\n        dimensions: `${metadata.width}x${metadata.height}`,\n        classification: classificationResult.classification,\n        confidence: classificationResult.confidence,\n        processingTime,\n        indicators: classificationResult.indicators,\n      };\n\n      const analysis = await storage.createImageAnalysis(analysisData);\n\n      res.json({\n        id: analysis.id,\n        classification: analysis.classification,\n        confidence: analysis.confidence,\n        processingTime: analysis.processingTime,\n        imageSize: analysis.dimensions,\n        indicators: analysis.indicators.map((indicator, index) => ({\n          name: indicator,\n          strength: ['Strong', 'Moderate', 'Weak'][index % 3]\n        })),\n        filename: analysis.filename,\n        originalSize: analysis.originalSize\n      });\n\n    } catch (error) {\n      console.error('Analysis error:', error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : 'Failed to analyze image' \n      });\n    }\n  });\n\n  // Get analysis by ID\n  app.get('/api/analysis/:id', async (req: Request, res: Response) => {\n    try {\n      const analysis = await storage.getImageAnalysis(req.params.id);\n      \n      if (!analysis) {\n        return res.status(404).json({ message: 'Analysis not found' });\n      }\n\n      res.json(analysis);\n    } catch (error) {\n      console.error('Get analysis error:', error);\n      res.status(500).json({ message: 'Failed to retrieve analysis' });\n    }\n  });\n\n  // Get recent analyses\n  app.get('/api/analyses', async (req: Request, res: Response) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const analyses = await storage.getRecentAnalyses(limit);\n      res.json(analyses);\n    } catch (error) {\n      console.error('Get analyses error:', error);\n      res.status(500).json({ message: 'Failed to retrieve analyses' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8517},"server/storage.ts":{"content":"import { type User, type InsertUser, type ImageAnalysis, type InsertImageAnalysis } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createImageAnalysis(analysis: InsertImageAnalysis): Promise<ImageAnalysis>;\n  getImageAnalysis(id: string): Promise<ImageAnalysis | undefined>;\n  getRecentAnalyses(limit?: number): Promise<ImageAnalysis[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private imageAnalyses: Map<string, ImageAnalysis>;\n\n  constructor() {\n    this.users = new Map();\n    this.imageAnalyses = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createImageAnalysis(insertAnalysis: InsertImageAnalysis): Promise<ImageAnalysis> {\n    const id = randomUUID();\n    const analysis: ImageAnalysis = {\n      ...insertAnalysis,\n      id,\n      createdAt: new Date(),\n    };\n    this.imageAnalyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getImageAnalysis(id: string): Promise<ImageAnalysis | undefined> {\n    return this.imageAnalyses.get(id);\n  }\n\n  async getRecentAnalyses(limit: number = 10): Promise<ImageAnalysis[]> {\n    return Array.from(this.imageAnalyses.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1911},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const imageAnalyses = pgTable(\"image_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalSize: integer(\"original_size\").notNull(),\n  dimensions: text(\"dimensions\").notNull(),\n  classification: text(\"classification\").notNull(),\n  confidence: real(\"confidence\").notNull(),\n  processingTime: real(\"processing_time\").notNull(),\n  indicators: text(\"indicators\").array().notNull().default(sql`'{}'::text[]`),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertImageAnalysisSchema = createInsertSchema(imageAnalyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const imageUploadSchema = z.object({\n  file: z.any()\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertImageAnalysis = z.infer<typeof insertImageAnalysisSchema>;\nexport type ImageAnalysis = typeof imageAnalyses.$inferSelect;\n","size_bytes":1493},"static/app.js":{"content":"// Modern Application Core\nlet currentAnalysisResult = null;\nlet currentImageUrl = null;\n\n// Enhanced Theme Management\nfunction initializeTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    const systemPreference = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    const theme = savedTheme || systemPreference;\n    \n    if (theme === 'dark') {\n        document.documentElement.classList.add('dark');\n    } else {\n        document.documentElement.classList.remove('dark');\n    }\n    \n    // Update theme toggle icon\n    updateThemeToggleIcon();\n}\n\nfunction toggleTheme() {\n    const isDark = document.documentElement.classList.contains('dark');\n    if (isDark) {\n        document.documentElement.classList.remove('dark');\n        localStorage.setItem('theme', 'light');\n    } else {\n        document.documentElement.classList.add('dark');\n        localStorage.setItem('theme', 'dark');\n    }\n    updateThemeToggleIcon();\n}\n\nfunction updateThemeToggleIcon() {\n    const isDark = document.documentElement.classList.contains('dark');\n    const sunIcon = document.querySelector('[data-lucide=\"sun\"]');\n    const moonIcon = document.querySelector('[data-lucide=\"moon\"]');\n    \n    if (sunIcon && moonIcon) {\n        if (isDark) {\n            sunIcon.style.display = 'none';\n            moonIcon.style.display = 'block';\n        } else {\n            sunIcon.style.display = 'block';\n            moonIcon.style.display = 'none';\n        }\n    }\n}\n\n// Enhanced Mobile Menu Management with Responsive Features\nfunction initializeMobileMenu() {\n    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');\n    const mobileMenu = document.getElementById('mobile-menu');\n    let isAnimating = false;\n    \n    if (mobileMenuToggle && mobileMenu) {\n        // Add touch-friendly event handling\n        const toggleMenu = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            \n            if (isAnimating) return;\n            isAnimating = true;\n            \n            const wasHidden = mobileMenu.classList.contains('hidden');\n            \n            if (wasHidden) {\n                // Opening menu\n                mobileMenu.classList.remove('hidden');\n                mobileMenu.style.opacity = '0';\n                mobileMenu.style.transform = 'translateY(-10px)';\n                \n                // Animate in\n                requestAnimationFrame(() => {\n                    mobileMenu.style.transition = 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n                    mobileMenu.style.opacity = '1';\n                    mobileMenu.style.transform = 'translateY(0)';\n                });\n                \n                // Prevent body scroll on mobile\n                if (window.innerWidth < 768) {\n                    document.body.style.overflow = 'hidden';\n                }\n            } else {\n                // Closing menu\n                mobileMenu.style.transition = 'all 0.15s ease-out';\n                mobileMenu.style.opacity = '0';\n                mobileMenu.style.transform = 'translateY(-10px)';\n                \n                setTimeout(() => {\n                    mobileMenu.classList.add('hidden');\n                    document.body.style.overflow = 'unset';\n                }, 150);\n            }\n            \n            // Update icon with animation\n            const icon = mobileMenuToggle.querySelector('i');\n            if (icon) {\n                const newIcon = wasHidden ? 'x' : 'menu';\n                icon.style.transform = 'rotate(180deg)';\n                \n                setTimeout(() => {\n                    icon.setAttribute('data-lucide', newIcon);\n                    lucide.createIcons();\n                    icon.style.transform = 'rotate(0deg)';\n                }, 100);\n            }\n            \n            setTimeout(() => {\n                isAnimating = false;\n            }, 200);\n        };\n        \n        // Support both click and touch events\n        mobileMenuToggle.addEventListener('click', toggleMenu);\n        mobileMenuToggle.addEventListener('touchend', (e) => {\n            e.preventDefault();\n            toggleMenu(e);\n        });\n        \n        // Close mobile menu when clicking/touching outside\n        const closeMenu = () => {\n            if (!mobileMenu.classList.contains('hidden') && !isAnimating) {\n                mobileMenu.style.transition = 'all 0.15s ease-out';\n                mobileMenu.style.opacity = '0';\n                mobileMenu.style.transform = 'translateY(-10px)';\n                \n                setTimeout(() => {\n                    mobileMenu.classList.add('hidden');\n                    document.body.style.overflow = 'unset';\n                }, 150);\n                \n                const icon = mobileMenuToggle.querySelector('i');\n                if (icon) {\n                    icon.setAttribute('data-lucide', 'menu');\n                    lucide.createIcons();\n                }\n            }\n        };\n        \n        document.addEventListener('click', (e) => {\n            if (!mobileMenuToggle.contains(e.target) && !mobileMenu.contains(e.target)) {\n                closeMenu();\n            }\n        });\n        \n        document.addEventListener('touchend', (e) => {\n            if (!mobileMenuToggle.contains(e.target) && !mobileMenu.contains(e.target)) {\n                closeMenu();\n            }\n        });\n        \n        // Close mobile menu when clicking on a link with animation\n        const mobileLinks = mobileMenu.querySelectorAll('a');\n        mobileLinks.forEach(link => {\n            const handleLinkClick = () => {\n                if (!isAnimating) {\n                    // Add visual feedback\n                    link.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';\n                    \n                    setTimeout(() => {\n                        link.style.backgroundColor = '';\n                        closeMenu();\n                    }, 150);\n                }\n            };\n            \n            link.addEventListener('click', handleLinkClick);\n            link.addEventListener('touchend', (e) => {\n                e.preventDefault();\n                handleLinkClick();\n                // Trigger navigation after animation\n                setTimeout(() => {\n                    window.location.href = link.href;\n                }, 300);\n            });\n        });\n        \n        // Handle window resize to close menu on desktop\n        window.addEventListener('resize', () => {\n            if (window.innerWidth >= 768 && !mobileMenu.classList.contains('hidden')) {\n                closeMenu();\n            }\n        });\n        \n        // Handle escape key to close menu\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {\n                closeMenu();\n            }\n        });\n        \n        // Swipe gesture support for mobile\n        let touchStartY = 0;\n        let touchStartX = 0;\n        \n        mobileMenu.addEventListener('touchstart', (e) => {\n            touchStartY = e.touches[0].clientY;\n            touchStartX = e.touches[0].clientX;\n        });\n        \n        mobileMenu.addEventListener('touchmove', (e) => {\n            const touchY = e.touches[0].clientY;\n            const touchX = e.touches[0].clientX;\n            const deltaY = touchY - touchStartY;\n            const deltaX = Math.abs(touchX - touchStartX);\n            \n            // Close menu on upward swipe (and minimal horizontal movement)\n            if (deltaY < -50 && deltaX < 30) {\n                e.preventDefault();\n                closeMenu();\n            }\n        });\n    }\n}\n\n// Enhanced Toast Notification System with Responsive Positioning\nfunction showToast(message, type = 'info') {\n    // Create toast container if it doesn't exist\n    let toastContainer = document.getElementById('toast-container');\n    if (!toastContainer) {\n        toastContainer = document.createElement('div');\n        toastContainer.id = 'toast-container';\n        \n        // Responsive positioning\n        const isMobile = window.innerWidth < 640;\n        if (isMobile) {\n            toastContainer.className = 'fixed top-20 left-4 right-4 z-50 space-y-3';\n        } else {\n            toastContainer.className = 'fixed top-6 right-6 z-50 space-y-3 max-w-sm';\n        }\n        \n        document.body.appendChild(toastContainer);\n    }\n    \n    const toast = document.createElement('div');\n    toast.className = 'card p-4 transform transition-all duration-300 ease-in-out translate-x-full opacity-0';\n    \n    const typeConfig = {\n        success: {\n            icon: 'check-circle',\n            classes: 'border-green-200 bg-green-50 dark:bg-green-900/20',\n            iconColor: 'text-green-600'\n        },\n        error: {\n            icon: 'x-circle',\n            classes: 'border-red-200 bg-red-50 dark:bg-red-900/20',\n            iconColor: 'text-red-600'\n        },\n        warning: {\n            icon: 'alert-triangle',\n            classes: 'border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20',\n            iconColor: 'text-yellow-600'\n        },\n        info: {\n            icon: 'info',\n            classes: 'border-blue-200 bg-blue-50 dark:bg-blue-900/20',\n            iconColor: 'text-blue-600'\n        }\n    };\n    \n    const config = typeConfig[type] || typeConfig.info;\n    toast.className += ` ${config.classes}`;\n    \n    // Create toast content\n    const container = document.createElement('div');\n    container.className = 'flex items-start gap-3';\n    \n    const iconDiv = document.createElement('div');\n    iconDiv.className = `flex-shrink-0 ${config.iconColor}`;\n    \n    const icon = document.createElement('i');\n    icon.setAttribute('data-lucide', config.icon);\n    icon.className = 'w-5 h-5';\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = 'flex-1';\n    \n    const messageText = document.createElement('p');\n    messageText.className = 'text-sm font-medium text-gray-900 dark:text-gray-100';\n    messageText.textContent = message;\n    \n    const closeButton = document.createElement('button');\n    closeButton.className = 'flex-shrink-0 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors';\n    closeButton.innerHTML = '<i data-lucide=\"x\" class=\"w-4 h-4\"></i>';\n    \n    // Assemble toast\n    iconDiv.appendChild(icon);\n    messageDiv.appendChild(messageText);\n    container.appendChild(iconDiv);\n    container.appendChild(messageDiv);\n    container.appendChild(closeButton);\n    toast.appendChild(container);\n    \n    // Add to container\n    toastContainer.appendChild(toast);\n    \n    // Initialize icons\n    lucide.createIcons();\n    \n    // Animate in\n    setTimeout(() => {\n        toast.classList.remove('translate-x-full', 'opacity-0');\n        toast.classList.add('translate-x-0', 'opacity-100');\n    }, 10);\n    \n    // Auto remove and close button functionality\n    const removeToast = () => {\n        toast.classList.add('translate-x-full', 'opacity-0');\n        setTimeout(() => {\n            if (toastContainer.contains(toast)) {\n                toastContainer.removeChild(toast);\n            }\n        }, 300);\n    };\n    \n    closeButton.addEventListener('click', removeToast);\n    \n    // Auto remove after 5 seconds\n    setTimeout(removeToast, 5000);\n}\n\n// Utility Functions\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nfunction getIndicatorIcon(strength) {\n    switch (strength.toLowerCase()) {\n        case 'strong': return 'alert-triangle';\n        case 'moderate': return 'alert-circle';\n        case 'weak': return 'info';\n        default: return 'help-circle';\n    }\n}\n\n// Enhanced Local Storage Management\nfunction saveAnalysisToLocalStorage(analysis, imageData) {\n    try {\n        const analysisHistory = JSON.parse(localStorage.getItem('analysisHistory') || '[]');\n        const newAnalysis = {\n            ...analysis,\n            timestamp: new Date().toISOString(),\n            imageData: imageData,\n            id: Date.now().toString()\n        };\n        \n        analysisHistory.unshift(newAnalysis);\n        \n        // Keep only last 20 analyses\n        if (analysisHistory.length > 20) {\n            analysisHistory.splice(20);\n        }\n        \n        localStorage.setItem('analysisHistory', JSON.stringify(analysisHistory));\n    } catch (error) {\n        console.error('Error saving to local storage:', error);\n        showToast('Failed to save analysis history', 'warning');\n    }\n}\n\nfunction loadAnalysisHistory() {\n    try {\n        return JSON.parse(localStorage.getItem('analysisHistory') || '[]');\n    } catch (error) {\n        console.error('Error loading from local storage:', error);\n        return [];\n    }\n}\n\nfunction clearAnalysisHistory() {\n    try {\n        localStorage.removeItem('analysisHistory');\n        showToast('Analysis history cleared', 'info');\n    } catch (error) {\n        console.error('Error clearing local storage:', error);\n        showToast('Failed to clear history', 'error');\n    }\n}\n\n// Enhanced Animation Utilities\nfunction animateElement(element, animationClass, duration = 600) {\n    return new Promise((resolve) => {\n        element.classList.add(animationClass);\n        \n        setTimeout(() => {\n            element.classList.remove(animationClass);\n            resolve();\n        }, duration);\n    });\n}\n\nfunction fadeInElement(element, delay = 0) {\n    element.style.opacity = '0';\n    element.style.transform = 'translateY(20px)';\n    \n    setTimeout(() => {\n        element.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n        element.style.opacity = '1';\n        element.style.transform = 'translateY(0)';\n    }, delay);\n}\n\nfunction fadeOutElement(element) {\n    return new Promise((resolve) => {\n        element.style.transition = 'all 0.3s ease-out';\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(-10px)';\n        \n        setTimeout(() => {\n            resolve();\n        }, 300);\n    });\n}\n\n// Keyboard Navigation Support\nfunction initializeKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Escape key to close modals\n        if (e.key === 'Escape') {\n            const modals = document.querySelectorAll('[id*=\"modal\"]:not(.hidden)');\n            modals.forEach(modal => {\n                modal.classList.add('hidden');\n                document.body.style.overflow = 'unset';\n            });\n        }\n        \n        // Alt + T for theme toggle\n        if (e.altKey && e.key === 't') {\n            e.preventDefault();\n            toggleTheme();\n        }\n        \n        // Alt + U for file upload (when on home page)\n        if (e.altKey && e.key === 'u' && window.location.pathname === '/') {\n            e.preventDefault();\n            const fileInput = document.getElementById('file-input');\n            if (fileInput) {\n                fileInput.click();\n            }\n        }\n    });\n}\n\n// Performance Monitoring\nfunction measurePerformance(name, fn) {\n    const start = performance.now();\n    const result = fn();\n    const end = performance.now();\n    console.log(`${name} took ${(end - start).toFixed(2)} milliseconds`);\n    return result;\n}\n\n// Enhanced Responsive Utilities\nfunction initializeResponsiveFeatures() {\n    // Detect touch device\n    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    if (isTouchDevice) {\n        document.body.classList.add('touch-device');\n    }\n    \n    // Handle orientation changes\n    window.addEventListener('orientationchange', () => {\n        setTimeout(() => {\n            // Recalculate viewport height for mobile browsers\n            const vh = window.innerHeight * 0.01;\n            document.documentElement.style.setProperty('--vh', `${vh}px`);\n            \n            // Close mobile menu on orientation change\n            const mobileMenu = document.getElementById('mobile-menu');\n            if (mobileMenu && !mobileMenu.classList.contains('hidden')) {\n                mobileMenu.classList.add('hidden');\n                document.body.style.overflow = 'unset';\n            }\n        }, 100);\n    });\n    \n    // Set initial viewport height\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n    \n    // Handle window resize for responsive adjustments\n    let resizeTimer;\n    window.addEventListener('resize', () => {\n        clearTimeout(resizeTimer);\n        resizeTimer = setTimeout(() => {\n            // Update viewport height\n            const vh = window.innerHeight * 0.01;\n            document.documentElement.style.setProperty('--vh', `${vh}px`);\n            \n            // Reposition toast container if needed\n            const toastContainer = document.getElementById('toast-container');\n            if (toastContainer) {\n                const isMobile = window.innerWidth < 640;\n                if (isMobile) {\n                    toastContainer.className = 'fixed top-20 left-4 right-4 z-50 space-y-3';\n                } else {\n                    toastContainer.className = 'fixed top-6 right-6 z-50 space-y-3 max-w-sm';\n                }\n            }\n        }, 250);\n    });\n}\n\n// Enhanced Theme Toggle with Touch Support\nfunction initializeThemeToggle() {\n    const themeToggle = document.getElementById('theme-toggle');\n    if (themeToggle) {\n        const handleThemeToggle = (e) => {\n            e.preventDefault();\n            \n            // Add visual feedback\n            themeToggle.style.transform = 'scale(0.95)';\n            setTimeout(() => {\n                themeToggle.style.transform = 'scale(1)';\n                toggleTheme();\n            }, 100);\n        };\n        \n        themeToggle.addEventListener('click', handleThemeToggle);\n        themeToggle.addEventListener('touchend', handleThemeToggle);\n        \n        // Improve accessibility\n        themeToggle.setAttribute('role', 'button');\n        themeToggle.setAttribute('aria-label', 'Toggle dark mode');\n        themeToggle.setAttribute('tabindex', '0');\n        \n        // Keyboard support for theme toggle\n        themeToggle.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                handleThemeToggle(e);\n            }\n        });\n    }\n}\n\n// Initialize Application with Enhanced Responsive Features\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Core initialization\n    initializeTheme();\n    initializeMobileMenu();\n    initializeKeyboardNavigation();\n    initializeResponsiveFeatures();\n    initializeThemeToggle();\n    \n    // Initialize Lucide icons\n    lucide.createIcons();\n    \n    // Add smooth scrolling behavior (disabled on mobile for performance)\n    if (window.innerWidth >= 768) {\n        document.documentElement.style.scrollBehavior = 'smooth';\n    }\n    \n    // Add loading state management\n    window.addEventListener('beforeunload', () => {\n        document.body.style.opacity = '0.7';\n    });\n    \n    // Show welcome message on first visit (delayed on mobile)\n    if (!localStorage.getItem('hasVisited')) {\n        const delay = window.innerWidth < 768 ? 1500 : 1000;\n        setTimeout(() => {\n            showToast('Welcome to AI Image Detection! Upload an image to get started.', 'info');\n            localStorage.setItem('hasVisited', 'true');\n        }, delay);\n    }\n    \n    // Add focus management for better accessibility\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Tab') {\n            document.body.classList.add('keyboard-navigation');\n        }\n    });\n    \n    document.addEventListener('mousedown', () => {\n        document.body.classList.remove('keyboard-navigation');\n    });\n    \n    console.log('🚀 Modern AI Detection app initialized successfully');\n});","size_bytes":20090},"static/home.js":{"content":"// Modern Home Page Functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n    // DOM Elements\n    const fileInput = document.getElementById('file-input');\n    const uploadContainer = document.getElementById('upload-container');\n    const uploadPrompt = document.getElementById('upload-prompt');\n    const imagePreview = document.getElementById('image-preview');\n    const previewImage = document.getElementById('preview-image');\n    const loadingState = document.getElementById('loading-state');\n    const resultsSection = document.getElementById('results-section');\n    const analyzeBtn = document.getElementById('analyze-btn');\n    const removeBtn = document.getElementById('remove-btn');\n    const analyzeAnotherBtn = document.getElementById('analyze-another-btn');\n    const downloadReportBtn = document.getElementById('download-report-btn');\n    \n    // Modal elements\n    const analysisModal = document.getElementById('analysis-modal');\n    const reportModal = document.getElementById('report-modal');\n    const closeReportModal = document.getElementById('close-report-modal');\n    const generateReportBtn = document.getElementById('generate-report-btn');\n    const cancelReport = document.getElementById('cancel-report');\n    \n    let selectedFile = null;\n    let analysisResult = null;\n    let currentImageUrl = null;\n    \n    // File input handling\n    fileInput.addEventListener('change', (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            handleFileSelection(file);\n        }\n    });\n    \n    // Drag and drop handling\n    uploadContainer.addEventListener('dragover', (e) => {\n        e.preventDefault();\n        uploadContainer.style.borderColor = 'var(--primary-400)';\n        uploadContainer.style.background = 'rgba(59, 130, 246, 0.05)';\n    });\n    \n    uploadContainer.addEventListener('dragleave', (e) => {\n        e.preventDefault();\n        uploadContainer.style.borderColor = '';\n        uploadContainer.style.background = '';\n    });\n    \n    uploadContainer.addEventListener('drop', (e) => {\n        e.preventDefault();\n        uploadContainer.style.borderColor = '';\n        uploadContainer.style.background = '';\n        \n        const file = e.dataTransfer.files[0];\n        if (file && file.type.startsWith('image/')) {\n            handleFileSelection(file);\n        } else {\n            showToast('Please select a valid image file', 'error');\n        }\n    });\n    \n    // Button event listeners\n    analyzeBtn?.addEventListener('click', analyzeImage);\n    removeBtn?.addEventListener('click', removeImage);\n    analyzeAnotherBtn?.addEventListener('click', resetForNewAnalysis);\n    downloadReportBtn?.addEventListener('click', showReportModal);\n    \n    // Modal event listeners\n    closeReportModal?.addEventListener('click', hideReportModal);\n    cancelReport?.addEventListener('click', hideReportModal);\n    generateReportBtn?.addEventListener('click', generatePDFReport);\n    \n    function handleFileSelection(file) {\n        // Validate file type\n        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\n        if (!allowedTypes.includes(file.type)) {\n            showToast('Please select a valid image file (PNG, JPG, JPEG, GIF, BMP, WebP)', 'error');\n            return;\n        }\n        \n        // Validate file size (16MB limit)\n        if (file.size > 16 * 1024 * 1024) {\n            showToast('File size must be less than 16MB', 'error');\n            return;\n        }\n        \n        selectedFile = file;\n        \n        // Show preview\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            previewImage.src = e.target.result;\n            currentImageUrl = e.target.result;\n            showImagePreview();\n        };\n        reader.readAsDataURL(file);\n    }\n    \n    function showImagePreview() {\n        uploadPrompt.classList.add('hidden');\n        imagePreview.classList.remove('hidden');\n        resultsSection.classList.add('hidden');\n        \n        // Add smooth transition\n        imagePreview.classList.add('animate-scaleIn');\n        \n        lucide.createIcons();\n        showToast('Image loaded successfully! Ready for analysis.', 'success');\n    }\n    \n    function removeImage() {\n        selectedFile = null;\n        currentImageUrl = null;\n        analysisResult = null;\n        fileInput.value = '';\n        \n        uploadPrompt.classList.remove('hidden');\n        imagePreview.classList.add('hidden');\n        resultsSection.classList.add('hidden');\n        loadingState.classList.add('hidden');\n        \n        showToast('Image removed', 'info');\n    }\n    \n    function resetForNewAnalysis() {\n        removeImage();\n        showToast('Ready for a new analysis! Please upload an image.', 'info');\n    }\n    \n    async function analyzeImage() {\n        if (!selectedFile) {\n            showToast('Please upload a new image first', 'error');\n            return;\n        }\n        \n        // Check if analysis was already performed\n        if (analysisResult) {\n            showToast('Please upload a new image for analysis', 'info');\n            resetForNewAnalysis();\n            return;\n        }\n        \n        // Show analysis modal\n        showAnalysisModal();\n        \n        // Start countdown\n        let countdown = 5;\n        const countdownElement = document.getElementById('countdown');\n        const countdownInterval = setInterval(() => {\n            countdown--;\n            if (countdownElement) {\n                countdownElement.textContent = countdown;\n            }\n            \n            if (countdown <= 0) {\n                clearInterval(countdownInterval);\n                hideAnalysisModal();\n                performAnalysis();\n            }\n        }, 1000);\n    }\n    \n    async function performAnalysis() {\n        // Show loading state\n        imagePreview.classList.add('hidden');\n        loadingState.classList.remove('hidden');\n        loadingState.classList.add('animate-fadeIn');\n        \n        try {\n            const formData = new FormData();\n            formData.append('image', selectedFile);\n            \n            const response = await fetch('/api/analyze', {\n                method: 'POST',\n                body: formData\n            });\n            \n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || 'Analysis failed');\n            }\n            \n            analysisResult = await response.json();\n            \n            // Save to local storage\n            saveAnalysisToLocalStorage(analysisResult, currentImageUrl);\n            \n            // Show results\n            displayResults(analysisResult);\n            showToast('Analysis completed successfully!', 'success');\n            \n        } catch (error) {\n            console.error('Analysis error:', error);\n            showToast(error.message || 'Failed to analyze image', 'error');\n            \n            // Return to preview state\n            loadingState.classList.add('hidden');\n            imagePreview.classList.remove('hidden');\n        }\n    }\n    \n    function displayResults(result) {\n        // Hide loading state\n        loadingState.classList.add('hidden');\n        \n        // Clear the selected file after analysis to require new upload\n        selectedFile = null;\n        fileInput.value = '';\n        \n        // Determine if image is AI-generated first\n        const isAIGenerated = result.classification.toLowerCase().includes('ai') || \n                             result.classification.toLowerCase().includes('generated') ||\n                             result.classification.toLowerCase().includes('artificial');\n        \n        // Display the analyzed image in results with professional circular styling\n        const resultsImage = document.getElementById('results-image');\n        if (currentImageUrl) {\n            resultsImage.src = currentImageUrl;\n            // Add professional circular border and wave effects based on classification\n            const imageContainer = document.getElementById('results-image-container');\n            if (imageContainer) {\n                if (isAIGenerated) {\n                    imageContainer.className = 'aspect-square rounded-full overflow-hidden bg-gray-100 dark:bg-gray-800 image-ai-generated ai-detected-wave';\n                } else {\n                    imageContainer.className = 'aspect-square rounded-full overflow-hidden bg-gray-100 dark:bg-gray-800 image-real real-detected-wave';\n                }\n            }\n        }\n        \n        // Update image details\n        const fileName = document.getElementById('file-name');\n        const imageSize = document.getElementById('image-size');\n        \n        if (fileName) fileName.textContent = result.filename;\n        if (imageSize) imageSize.textContent = result.imageSize;\n        \n        // Update result badge\n        const resultBadge = document.getElementById('result-badge');\n        const resultIcon = document.getElementById('result-icon');\n        const resultText = document.getElementById('result-text');\n        \n        if (isAIGenerated) {\n            resultBadge.className = 'badge badge-ai-generated text-xl px-8 py-4 inline-flex items-center gap-3 rounded-2xl';\n            resultIcon.setAttribute('data-lucide', 'alert-triangle');\n            resultIcon.className = 'w-8 h-8';\n            resultText.textContent = result.classification;\n        } else {\n            resultBadge.className = 'badge badge-real text-xl px-8 py-4 inline-flex items-center gap-3 rounded-2xl';\n            resultIcon.setAttribute('data-lucide', 'shield-check');\n            resultIcon.className = 'w-8 h-8';\n            resultText.textContent = result.classification;\n        }\n        \n        // Update all section header colors based on classification\n        updateSectionHeaderColors(isAIGenerated);\n        \n        // 🔴 ULTRA FORCE BUTTON COLORS - MAKE THEM RED FOR AI GENERATED!\n        console.log('🚨 ULTRA FORCE: AI Generated =', isAIGenerated, 'Classification:', result.classification);\n        \n        // Get ALL buttons using multiple methods\n        const allButtons = [\n            ...document.querySelectorAll('button'),\n            ...document.querySelectorAll('[role=\"button\"]'),\n            ...document.querySelectorAll('input[type=\"button\"]'),\n            ...document.querySelectorAll('a[class*=\"btn\"]')\n        ];\n        \n        console.log('🎯 Found', allButtons.length, 'potential buttons');\n        \n        // Target specific buttons by ID and text content\n        const targetButtons = [\n            document.getElementById('analyze-btn'),\n            document.getElementById('analyze-another-btn'),\n            document.getElementById('download-report-btn'),\n            ...allButtons.filter(btn => {\n                const text = (btn.textContent || '').toLowerCase();\n                return text.includes('analyz') || \n                       text.includes('download') || \n                       text.includes('report') || \n                       text.includes('new') ||\n                       btn.id.includes('analyz') ||\n                       btn.id.includes('report');\n            })\n        ].filter(btn => btn); // Remove nulls\n        \n        console.log('🎯 Target buttons found:', targetButtons.length);\n        \n        targetButtons.forEach((button, i) => {\n            console.log(`Button ${i}:`, button.textContent, button.id, button.className);\n            \n            if (isAIGenerated) {\n                console.log('🔴 FORCE RED FOR AI GENERATED');\n                // FORCE RED COLORS FOR AI GENERATED\n                const redStyle = `\n                    background: #dc2626 !important;\n                    background-color: #dc2626 !important;\n                    background-image: linear-gradient(135deg, #ef4444, #dc2626) !important;\n                    color: white !important;\n                    border: 2px solid #b91c1c !important;\n                    padding: 0.75rem 1.5rem !important;\n                    border-radius: 0.75rem !important;\n                    font-weight: 600 !important;\n                    transition: all 0.3s ease !important;\n                    display: inline-flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                    gap: 0.5rem !important;\n                `;\n                \n                // Apply styles multiple ways to ensure it works\n                button.style.cssText = redStyle;\n                button.setAttribute('style', redStyle);\n                button.style.setProperty('background-color', '#dc2626', 'important');\n                button.style.setProperty('color', 'white', 'important');\n                \n                // Remove conflicting classes\n                button.classList.remove('bg-gradient-to-r', 'from-primary-500', 'to-secondary-500');\n                button.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700');\n                \n            } else {\n                console.log('🟢 FORCE GREEN FOR REAL IMAGE');\n                // FORCE GREEN COLORS FOR REAL IMAGE\n                const greenStyle = `\n                    background: #059669 !important;\n                    background-color: #059669 !important;\n                    background-image: linear-gradient(135deg, #10b981, #059669) !important;\n                    color: white !important;\n                    border: 2px solid #047857 !important;\n                    padding: 0.75rem 1.5rem !important;\n                    border-radius: 0.75rem !important;\n                    font-weight: 600 !important;\n                    transition: all 0.3s ease !important;\n                    display: inline-flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                    gap: 0.5rem !important;\n                `;\n                \n                // Apply styles multiple ways to ensure it works\n                button.style.cssText = greenStyle;\n                button.setAttribute('style', greenStyle);\n                button.style.setProperty('background-color', '#059669', 'important');\n                button.style.setProperty('color', 'white', 'important');\n                \n                // Remove conflicting classes\n                button.classList.remove('bg-gradient-to-r', 'from-primary-500', 'to-secondary-500');\n                button.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700');\n            }\n            \n            // Force repaint\n            button.offsetHeight;\n            setTimeout(() => button.offsetHeight, 100);\n        });\n        \n        // Additional timeout to ensure styles stick\n        setTimeout(() => {\n            targetButtons.forEach(button => {\n                if (isAIGenerated) {\n                    button.style.setProperty('background-color', '#dc2626', 'important');\n                    button.style.setProperty('color', 'white', 'important');\n                } else {\n                    button.style.setProperty('background-color', '#059669', 'important');\n                    button.style.setProperty('color', 'white', 'important');\n                }\n            });\n        }, 500);\n        \n        // Update confidence score with professional color styling\n        const confidencePercentage = document.getElementById('confidence-percentage');\n        const confidenceBar = document.getElementById('confidence-bar');\n        \n        if (confidencePercentage) {\n            confidencePercentage.textContent = `${result.confidence}%`;\n            // Apply professional red or green styling to the percentage text\n            if (isAIGenerated) {\n                confidencePercentage.className = 'text-2xl font-bold text-red-600 dark:text-red-400';\n                confidencePercentage.style.color = '#dc2626';\n                confidencePercentage.style.textShadow = '0 2px 4px rgba(220, 38, 38, 0.2)';\n                confidencePercentage.style.fontWeight = '700';\n            } else {\n                confidencePercentage.className = 'text-2xl font-bold text-green-600 dark:text-green-400';\n                confidencePercentage.style.color = '#7ADAA5';\n                confidencePercentage.style.textShadow = '0 2px 4px rgba(122, 218, 165, 0.2)';\n                confidencePercentage.style.fontWeight = '700';\n            }\n        }\n        \n        if (confidenceBar) {\n            // Clear any existing styles and classes first\n            confidenceBar.className = '';\n            confidenceBar.style.cssText = '';\n            \n            // Set width with animation\n            setTimeout(() => {\n                confidenceBar.style.width = `${result.confidence}%`;\n            }, 100);\n            \n            // Apply colors based on classification with strong inline styles\n            if (isAIGenerated) {\n                confidenceBar.className = 'progress-bar-ai-generated h-4 rounded-full';\n                confidenceBar.style.cssText = `\n                    width: ${result.confidence}%;\n                    height: 16px;\n                    background: linear-gradient(90deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%) !important;\n                    border: 2px solid rgba(220, 38, 38, 0.5) !important;\n                    border-radius: 9999px !important;\n                    transition: all 1000ms ease-out !important;\n                    position: relative !important;\n                `;\n            } else {\n                confidenceBar.className = 'progress-bar-real h-4 rounded-full';\n                confidenceBar.style.cssText = `\n                    width: ${result.confidence}%;\n                    height: 16px;\n                    background: linear-gradient(90deg, #7ADAA5 0%, #5fb88b 50%, #4a9a72 100%) !important;\n                    border: 2px solid rgba(122, 218, 165, 0.5) !important;\n                    border-radius: 9999px !important;\n                    transition: all 1000ms ease-out !important;\n                    position: relative !important;\n                `;\n            }\n            \n            // Force a repaint\n            confidenceBar.offsetHeight;\n        }\n        \n        // Update processing time\n        const processingTime = document.getElementById('processing-time');\n        if (processingTime) processingTime.textContent = `${result.processingTime}s`;\n        \n        // Update detection indicators\n        const indicatorsGrid = document.getElementById('indicators-grid');\n        if (indicatorsGrid) {\n            indicatorsGrid.innerHTML = '';\n            \n            if (result.indicators && result.indicators.length > 0) {\n                result.indicators.forEach(indicator => {\n                    const indicatorElement = document.createElement('div');\n                    indicatorElement.className = 'result-card p-4 flex justify-between items-center hover-lift';\n                    \n                    const leftDiv = document.createElement('div');\n                    leftDiv.className = 'flex items-center gap-3';\n                    \n                    const icon = document.createElement('i');\n                    icon.setAttribute('data-lucide', getIndicatorIcon(indicator.strength));\n                    icon.className = isAIGenerated ? 'w-5 h-5 text-red-500' : 'w-5 h-5 text-green-500';\n                    \n                    const nameSpan = document.createElement('span');\n                    nameSpan.className = 'font-medium';\n                    nameSpan.textContent = indicator.name;\n                    \n                    const strengthBadge = document.createElement('span');\n                    strengthBadge.className = getStrengthBadgeClass(indicator.strength);\n                    strengthBadge.textContent = indicator.strength;\n                    \n                    leftDiv.appendChild(icon);\n                    leftDiv.appendChild(nameSpan);\n                    indicatorElement.appendChild(leftDiv);\n                    indicatorElement.appendChild(strengthBadge);\n                    indicatorsGrid.appendChild(indicatorElement);\n                });\n            } else {\n                const noIndicators = document.createElement('div');\n                noIndicators.className = 'text-center py-8 text-gray-500 dark:text-gray-400 col-span-2';\n                noIndicators.innerHTML = `\n                    <i data-lucide=\"info\" class=\"w-8 h-8 mx-auto mb-3 opacity-50\"></i>\n                    <p>No specific detection indicators available</p>\n                `;\n                indicatorsGrid.appendChild(noIndicators);\n            }\n        }\n        \n        // Show results section with animation\n        resultsSection.classList.remove('hidden');\n        resultsSection.classList.add('animate-fadeIn');\n        lucide.createIcons();\n        \n        // Scroll to results\n        resultsSection.scrollIntoView({ behavior: 'smooth' });\n    }\n    \n    function getStrengthBadgeClass(strength) {\n        switch (strength.toLowerCase()) {\n            case 'strong': return 'indicator-strong';\n            case 'moderate': return 'indicator-moderate';\n            case 'weak': return 'indicator-weak';\n            default: return 'badge text-xs px-3 py-1 bg-gray-100 text-gray-700 border border-gray-200';\n        }\n    }\n    \n    function showAnalysisModal() {\n        if (analysisModal) {\n            analysisModal.classList.remove('hidden');\n            document.body.style.overflow = 'hidden';\n        }\n    }\n    \n    function hideAnalysisModal() {\n        if (analysisModal) {\n            analysisModal.classList.add('hidden');\n            document.body.style.overflow = 'unset';\n        }\n    }\n    \n    function showReportModal() {\n        if (reportModal) {\n            reportModal.classList.remove('hidden');\n            document.body.style.overflow = 'hidden';\n        }\n    }\n    \n    function hideReportModal() {\n        if (reportModal) {\n            reportModal.classList.add('hidden');\n            document.body.style.overflow = 'unset';\n        }\n    }\n    \n    function generatePDFReport() {\n        if (!analysisResult || !currentImageUrl) {\n            showToast('No analysis data available', 'error');\n            return;\n        }\n        \n        hideReportModal();\n        \n        const isAIGenerated = analysisResult.classification.toLowerCase().includes('ai') || \n                             analysisResult.classification.toLowerCase().includes('generated') ||\n                             analysisResult.classification.toLowerCase().includes('artificial');\n        \n        // Define styles based on classification\n        const badgeStyles = isAIGenerated ? \n            'background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); color: white; border: 2px solid #fca5a5;' : \n            'background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; border: 2px solid #86efac;';\n        \n        const badgeIcon = isAIGenerated ? '⚠️' : '✅';\n        \n        const confidenceBarStyles = isAIGenerated ? \n            'background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);' : \n            'background: linear-gradient(90deg, #10b981 0%, #059669 100%);';\n        \n        // Create HTML content for the report\n        const reportHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>AI Detection Report</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        @page { size: A4; margin: 15mm; }\n        body { \n            font-family: 'Inter', 'Segoe UI', sans-serif; \n            line-height: 1.4; \n            color: #374151; \n            background: #ffffff;\n            font-size: 12px;\n        }\n        .header {\n            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);\n            color: white;\n            padding: 20px;\n            text-align: center;\n            margin-bottom: 20px;\n            border-radius: 12px;\n        }\n        .header h1 { font-size: 2em; margin-bottom: 8px; font-weight: 700; }\n        .header p { font-size: 1em; opacity: 0.9; }\n        .top-section { \n            display: flex; \n            gap: 20px; \n            margin-bottom: 20px; \n            align-items: flex-start;\n        }\n        .image-container { \n            flex: 1; \n            text-align: center;\n            background: #f9fafb;\n            border: 2px solid #e5e7eb;\n            border-radius: 12px;\n            padding: 15px;\n        }\n        .analyzed-image { \n            max-width: 100%; \n            max-height: 200px;\n            border-radius: 8px; \n            margin-bottom: 10px;\n        }\n        .classification-container { flex: 1; }\n        .classification-badge {\n            padding: 20px 30px;\n            border-radius: 50px;\n            text-align: center;\n            font-weight: 700;\n            font-size: 1.3em;\n            margin-bottom: 20px;\n            display: inline-flex;\n            align-items: center;\n            gap: 12px;\n            ${badgeStyles}\n        }\n        .classification-badge::before {\n            content: '${badgeIcon}';\n            font-size: 1.2em;\n        }\n        .confidence-section {\n            background: #f9fafb;\n            border: 2px solid #e5e7eb;\n            border-radius: 12px;\n            padding: 15px;\n        }\n        .confidence-bar-container {\n            background: #e5e7eb;\n            height: 15px;\n            border-radius: 8px;\n            overflow: hidden;\n            margin: 10px 0;\n        }\n        .confidence-bar {\n            height: 100%;\n            width: ${analysisResult.confidence}%;\n            ${confidenceBarStyles}\n        }\n        .section {\n            background: #f9fafb;\n            border: 2px solid #e5e7eb;\n            border-radius: 12px;\n            padding: 15px;\n            margin-bottom: 15px;\n        }\n        .section-title {\n            font-weight: 700;\n            font-size: 1.1em;\n            margin-bottom: 10px;\n            color: #1f2937;\n        }\n        .indicator-item {\n            display: flex;\n            justify-content: space-between;\n            padding: 8px 12px;\n            margin-bottom: 8px;\n            border-radius: 8px;\n            background: white;\n            border: 1px solid #e5e7eb;\n        }\n        .footer {\n            background: #f3f4f6;\n            border: 2px solid #d1d5db;\n            border-radius: 12px;\n            padding: 15px;\n            margin-top: 20px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>AI Detection Analysis Report</h1>\n        <p>Professional Image Authentication Analysis • ${new Date().toLocaleDateString()}</p>\n    </div>\n\n    <div class=\"top-section\">\n        <div class=\"image-container\">\n            <h3>Analyzed Image</h3>\n            <img src=\"${currentImageUrl}\" alt=\"Analyzed Image\" class=\"analyzed-image\">\n            <div style=\"margin-top: 10px; font-size: 0.9em; color: #6b7280;\">\n                ${analysisResult.filename}\n            </div>\n        </div>\n        \n        <div class=\"classification-container\">\n            <div class=\"classification-badge\">\n                ${analysisResult.classification}\n            </div>\n            \n            <div class=\"confidence-section\">\n                <div style=\"font-weight: 600; margin-bottom: 5px;\">Confidence Score</div>\n                <div class=\"confidence-bar-container\">\n                    <div class=\"confidence-bar\"></div>\n                </div>\n                <div style=\"text-align: center; font-weight: 600; font-size: 1.1em;\">\n                    ${analysisResult.confidence}%\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">Detection Indicators</div>\n        ${analysisResult.indicators && analysisResult.indicators.length > 0 ? \n            analysisResult.indicators.map(indicator => `\n                <div class=\"indicator-item\">\n                    <span>${indicator.name}</span>\n                    <span style=\"font-weight: 600;\">${indicator.strength}</span>\n                </div>\n            `).join('') : \n            '<div style=\"text-align: center; color: #6b7280; padding: 20px;\">No specific indicators detected</div>'\n        }\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">Technical Details</div>\n        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 10px;\">\n            <div>File Name: <strong>${analysisResult.filename}</strong></div>\n            <div>Image Size: <strong>${analysisResult.imageSize}</strong></div>\n            <div>Processing Time: <strong>${analysisResult.processingTime}s</strong></div>\n            <div>Method: <strong>${analysisResult.methodUsed || 'Computer Vision'}</strong></div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <div style=\"font-weight: 600; margin-bottom: 5px;\">AI Image Detection Service</div>\n        <div style=\"font-size: 0.9em; color: #6b7280;\">\n            This report was generated using advanced machine learning algorithms for image authenticity verification.\n            Results are provided for informational purposes and should be considered alongside other verification methods.\n        </div>\n    </div>\n</body>\n</html>`;\n        \n        // Create and open new window for printing\n        const printWindow = window.open('', '_blank');\n        printWindow.document.write(reportHTML);\n        printWindow.document.close();\n        \n        // Wait for content to load then trigger print\n        printWindow.onload = () => {\n            setTimeout(() => {\n                printWindow.print();\n                printWindow.close();\n            }, 1000);\n        };\n        \n        showToast('Report generated successfully! Print dialog opened.', 'success');\n    }\n});\n\n// Enhanced Local Storage Management\nfunction saveAnalysisToLocalStorage(analysis, imageData) {\n    try {\n        const analysisHistory = JSON.parse(localStorage.getItem('analysisHistory') || '[]');\n        const newAnalysis = {\n            ...analysis,\n            timestamp: new Date().toISOString(),\n            imageData: imageData,\n            id: Date.now().toString()\n        };\n        \n        analysisHistory.unshift(newAnalysis);\n        \n        // Keep only last 20 analyses\n        if (analysisHistory.length > 20) {\n            analysisHistory.splice(20);\n        }\n        \n        localStorage.setItem('analysisHistory', JSON.stringify(analysisHistory));\n    } catch (error) {\n        console.error('Error saving to local storage:', error);\n        showToast('Failed to save analysis history', 'warning');\n    }\n}\n\n// Utility function for indicator strength badge colors\nfunction getStrengthBadgeColor(strength) {\n    switch (strength.toLowerCase()) {\n        case 'strong': return 'indicator-strong';\n        case 'moderate': return 'indicator-moderate';\n        case 'weak': return 'indicator-weak';\n        default: return 'bg-gray-100 text-gray-700 border border-gray-200';\n    }\n}\n\n// Update section header colors based on AI detection result\nfunction updateSectionHeaderColors(isAIGenerated) {\n    // Define color classes based on result with specific green color #7ADAA5\n    const iconColorClass = isAIGenerated ? 'text-red-500' : 'text-green-500';\n    const iconStyleColor = isAIGenerated ? '#dc2626' : '#7ADAA5';\n    const headerBgClass = isAIGenerated ? \n        'bg-gradient-to-br from-red-500 to-red-600' : \n        'bg-gradient-to-br from-green-500 to-green-600';\n    \n    // Update \"Analyzed Image\" section header\n    const analyzedImageHeader = document.querySelector('h3:has([data-lucide=\"image\"])');\n    if (analyzedImageHeader) {\n        const iconContainer = analyzedImageHeader.querySelector('div');\n        const icon = analyzedImageHeader.querySelector('i');\n        if (iconContainer) iconContainer.className = `w-8 h-8 ${headerBgClass} rounded-lg flex items-center justify-center mr-3`;\n        if (icon) icon.className = 'w-5 h-5 text-white';\n    }\n    \n    // Update \"Detection Results\" section header  \n    const detectionHeader = document.querySelector('h3:has([data-lucide=\"brain\"])');\n    if (detectionHeader) {\n        const iconContainer = detectionHeader.querySelector('div');\n        const icon = detectionHeader.querySelector('i');\n        if (iconContainer) iconContainer.className = `w-8 h-8 ${headerBgClass} rounded-lg flex items-center justify-center mr-3`;\n        if (icon) icon.className = 'w-5 h-5 text-white';\n    }\n    \n    // Update \"Image Details\" section header\n    const imageDetailsHeader = document.querySelector('h4:has([data-lucide=\"info\"])');\n    if (imageDetailsHeader) {\n        const icon = imageDetailsHeader.querySelector('i');\n        if (icon) icon.className = `w-5 h-5 ${iconColorClass}`;\n    }\n    \n    // Update \"Confidence Score\" icon and label color\n    const confidenceIcon = document.querySelector('[data-lucide=\"bar-chart-3\"]');\n    if (confidenceIcon) {\n        confidenceIcon.className = `w-5 h-5 ${iconColorClass}`;\n        confidenceIcon.style.color = iconStyleColor;\n    }\n    \n    // Update confidence score section label color\n    const confidenceHeaders = document.querySelectorAll('h4');\n    confidenceHeaders.forEach(header => {\n        if (header.textContent.includes('Confidence Score')) {\n            header.style.color = iconStyleColor;\n        }\n    });\n    \n    // Update \"Detection Indicators\" section header\n    const indicatorsHeader = document.querySelector('h4:has([data-lucide=\"eye\"])');\n    if (indicatorsHeader) {\n        const iconContainer = indicatorsHeader.querySelector('div');\n        const icon = indicatorsHeader.querySelector('i');\n        if (iconContainer) iconContainer.className = `w-8 h-8 ${headerBgClass} rounded-lg flex items-center justify-center mr-3`;\n        if (icon) icon.className = 'w-5 h-5 text-white';\n    }\n}\n\n// Enhanced indicator icon based on result type\nfunction getIndicatorIcon(strength) {\n    switch (strength.toLowerCase()) {\n        case 'strong': return 'alert-triangle';\n        case 'moderate': return 'alert-circle';\n        case 'weak': return 'info';\n        default: return 'help-circle';\n    }\n}","size_bytes":34307},"static/style.css":{"content":"/* Professional Tailwind CSS Enhancements */\n\n/* Smooth scrolling for all browsers */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Custom scrollbar styling */\n::-webkit-scrollbar {\n    width: 6px;\n}\n\n::-webkit-scrollbar-track {\n    background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n    background: rgba(156, 163, 175, 0.5);\n    border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: rgba(156, 163, 175, 0.7);\n}\n\n.dark ::-webkit-scrollbar-thumb {\n    background: rgba(75, 85, 99, 0.5);\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n    background: rgba(75, 85, 99, 0.7);\n}\n\n/* Firefox scrollbar */\n* {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;\n}\n\n.dark * {\n    scrollbar-color: rgba(75, 85, 99, 0.5) transparent;\n}\n\n/* Professional focus states */\nbutton:focus-visible,\ninput:focus-visible,\nselect:focus-visible,\ntextarea:focus-visible,\na:focus-visible {\n    outline: 2px solid #3b82f6;\n    outline-offset: 2px;\n}\n\n/* Enhanced Glassmorphism - Responsive */\n.glass {\n    background: rgba(255, 255, 255, 0.25);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n    border-radius: 1.5rem;\n    transition: all 0.3s ease;\n}\n\n.dark .glass {\n    background: rgba(31, 41, 55, 0.25);\n    border: 1px solid rgba(75, 85, 99, 0.18);\n}\n\n/* Responsive glass effects */\n@media (max-width: 480px) {\n    .glass {\n        backdrop-filter: blur(8px);\n        border-radius: 1rem;\n        background: rgba(255, 255, 255, 0.3);\n    }\n    \n    .dark .glass {\n        background: rgba(31, 41, 55, 0.3);\n    }\n}\n\n@media (min-width: 1281px) {\n    .glass {\n        backdrop-filter: blur(15px);\n        border-radius: 2rem;\n    }\n}\n\n/* Performance optimization for low-end devices */\n@media (max-width: 768px) and (max-resolution: 192dpi) {\n    .glass {\n        backdrop-filter: blur(5px);\n    }\n}\n\n/* Enhanced Hover Effects - Responsive */\n.hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Only apply hover effects on devices that support hover */\n@media (hover: hover) and (pointer: fine) {\n    .hover-lift:hover {\n        transform: translateY(-2px);\n    }\n}\n\n/* Touch feedback for mobile devices */\n@media (hover: none) and (pointer: coarse) {\n    .hover-lift:active {\n        transform: scale(0.98);\n        transition: transform 0.1s ease;\n    }\n}\n\n/* Reduced motion accessibility */\n@media (prefers-reduced-motion: reduce) {\n    .hover-lift,\n    .hover-lift:hover,\n    .hover-lift:active {\n        transform: none !important;\n        transition: none !important;\n    }\n}\n\n/* Professional gradient text */\n.gradient-text {\n    background: linear-gradient(135deg, #3b82f6, #8b5cf6, #7ADAA5);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Enhanced button interactions */\n.btn-hover-scale {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-hover-scale:hover {\n    transform: scale(1.05);\n}\n\n.btn-hover-scale:active {\n    transform: scale(0.98);\n}\n\n/* Enhanced Loading States - Responsive */\n.loading-ring {\n    position: relative;\n}\n\n.loading-ring::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    border: 2px solid transparent;\n    border-top: 2px solid #3b82f6;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n/* Responsive loading sizes */\n@media (max-width: 480px) {\n    .loading-ring {\n        width: 1.5rem;\n        height: 1.5rem;\n    }\n    \n    .w-20 {\n        width: 3rem;\n    }\n    \n    .h-20 {\n        height: 3rem;\n    }\n}\n\n@media (min-width: 481px) and (max-width: 768px) {\n    .loading-ring {\n        width: 2rem;\n        height: 2rem;\n    }\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Enhanced Image Container - Responsive */\n.image-container {\n    position: relative;\n    overflow: hidden;\n    border-radius: 1rem;\n}\n\n.image-container img {\n    transition: transform 0.3s ease;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n/* Only apply hover effects on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n    .image-container:hover img {\n        transform: scale(1.02);\n    }\n}\n\n/* Responsive image sizing */\n@media (max-width: 480px) {\n    .image-container {\n        border-radius: 0.5rem;\n    }\n    \n    .aspect-square {\n        aspect-ratio: 1 / 1;\n        max-width: 200px;\n        margin: 0 auto;\n    }\n}\n\n@media (min-width: 481px) and (max-width: 768px) {\n    .aspect-square {\n        max-width: 280px;\n        margin: 0 auto;\n    }\n}\n\n@media (min-width: 769px) {\n    .aspect-square {\n        max-width: 350px;\n    }\n}\n\n/* Enhanced Accessibility and Device Support */\n\n/* Touch device specific styles */\n.touch-device button,\n.touch-device .btn-hover-scale {\n    min-height: 44px;\n    min-width: 44px;\n    touch-action: manipulation;\n}\n\n.touch-device .hover-lift:hover {\n    transform: none;\n}\n\n.touch-device .hover-lift:active {\n    transform: scale(0.98);\n}\n\n/* Keyboard navigation support */\n.keyboard-navigation *:focus {\n    outline: 2px solid #3b82f6 !important;\n    outline-offset: 2px !important;\n    border-radius: 4px;\n}\n\n.keyboard-navigation button:focus,\n.keyboard-navigation a:focus {\n}\n\n/* Viewport height handling for mobile browsers */\n:root {\n    --vh: 1vh;\n}\n\n.min-h-screen {\n    min-height: calc(var(--vh, 1vh) * 100);\n}\n\n/* Enhanced mobile menu animations */\n#mobile-menu {\n    transform-origin: top center;\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n#mobile-menu.hidden {\n    opacity: 0;\n    transform: translateY(-10px);\n    pointer-events: none;\n}\n\n#mobile-menu:not(.hidden) {\n    opacity: 1;\n    transform: translateY(0);\n    pointer-events: all;\n}\n\n/* Theme toggle enhancements */\n#theme-toggle {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n#theme-toggle:active {\n    transform: scale(0.95);\n}\n\n/* Mobile menu toggle improvements */\n#mobile-menu-toggle {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n#mobile-menu-toggle i {\n    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n    * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n    \n    html {\n        scroll-behavior: auto;\n    }\n    \n    .hover-lift,\n    .hover-lift:hover,\n    .hover-lift:active {\n        transform: none !important;\n    }\n    \n    #mobile-menu,\n    #theme-toggle,\n    #mobile-menu-toggle {\n        transition: none !important;\n    }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .glass {\n        background: rgba(255, 255, 255, 0.9);\n        border: 2px solid rgba(0, 0, 0, 0.2);\n    }\n    \n    .dark .glass {\n        background: rgba(31, 41, 55, 0.9);\n        border: 2px solid rgba(255, 255, 255, 0.2);\n    }\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n    \n    body {\n        background: white !important;\n        color: black !important;\n    }\n    \n    .glass {\n        background: white !important;\n        border: 1px solid #ccc !important;\n    }\n    \n    nav, footer {\n        display: none !important;\n    }\n}\n\n/* Professional toast notification positioning */\n#toast-container {\n    position: fixed;\n    top: 6rem;\n    right: 1.5rem;\n    z-index: 100;\n    max-width: 24rem;\n}\n\n/* Comprehensive Responsive Design System */\n\n/* Mobile First - 320px to 480px */\n@media (max-width: 480px) {\n    /* Base layout adjustments */\n    .max-w-7xl {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n    \n    /* Typography scaling */\n    .text-4xl { font-size: 2rem; }\n    .text-5xl { font-size: 2.5rem; }\n    .text-6xl { font-size: 3rem; }\n    .text-3xl { font-size: 1.75rem; }\n    .text-2xl { font-size: 1.5rem; }\n    .text-xl { font-size: 1.125rem; }\n    \n    /* Navigation improvements */\n    nav .flex {\n        padding: 0 0.75rem;\n    }\n    \n    /* Grid adjustments */\n    .grid-cols-3 {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n    \n    /* Modal improvements */\n    .modal-backdrop {\n        padding: 1rem;\n    }\n    \n    /* Upload area improvements */\n    #upload-container {\n        padding: 1.5rem;\n    }\n    \n    /* Button sizing */\n    .btn-hover-scale {\n        padding: 0.75rem 1.5rem;\n        font-size: 0.875rem;\n    }\n    \n    /* Card padding */\n    .glass {\n        padding: 1rem;\n    }\n    \n    /* Image preview sizing */\n    .aspect-square {\n        max-width: 200px;\n        margin: 0 auto;\n    }\n    \n    /* Statistics grid */\n    .grid.grid-cols-3 {\n        grid-template-columns: 1fr;\n        gap: 0.75rem;\n    }\n}\n\n/* Small Mobile - 481px to 640px */\n@media (min-width: 481px) and (max-width: 640px) {\n    .text-4xl { font-size: 2.25rem; }\n    .text-5xl { font-size: 3rem; }\n    .text-6xl { font-size: 3.5rem; }\n    \n    .grid-cols-3 {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .aspect-square {\n        max-width: 250px;\n        margin: 0 auto;\n    }\n}\n\n/* Toast container - all small screens */\n@media (max-width: 640px) {\n    #toast-container {\n        top: 5rem;\n        right: 1rem;\n        left: 1rem;\n        max-width: none;\n    }\n}\n\n/* Tablet Portrait - 641px to 768px */\n@media (min-width: 641px) and (max-width: 768px) {\n    .max-w-7xl {\n        padding-left: 1.5rem;\n        padding-right: 1.5rem;\n    }\n    \n    /* Grid improvements */\n    .grid.md\\:grid-cols-2 {\n        grid-template-columns: 1fr;\n        gap: 1.5rem;\n    }\n    \n    .grid.md\\:grid-cols-3 {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .grid.md\\:grid-cols-4 {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    /* Upload container adjustments */\n    #upload-container {\n        padding: 2rem;\n    }\n    \n    /* Modal sizing */\n    .relative.bg-white\\/95 {\n        max-width: 90vw;\n        margin: 0 auto;\n    }\n}\n\n/* Tablet Landscape - 769px to 1024px */\n@media (min-width: 769px) and (max-width: 1024px) {\n    .max-w-7xl {\n        padding-left: 2rem;\n        padding-right: 2rem;\n    }\n    \n    /* Better grid layouts */\n    .grid.lg\\:grid-cols-2 {\n        grid-template-columns: 1fr;\n        gap: 2rem;\n    }\n    \n    /* Navigation adjustments */\n    .hidden.md\\:flex {\n        display: flex;\n        gap: 0.5rem;\n    }\n    \n    /* Card improvements */\n    .glass {\n        padding: 1.5rem;\n    }\n    \n    /* Statistics layout */\n    .grid.grid-cols-3 {\n        grid-template-columns: repeat(3, 1fr);\n        gap: 1.5rem;\n    }\n}\n\n/* Small Desktop - 1025px to 1280px */\n@media (min-width: 1025px) and (max-width: 1280px) {\n    .max-w-7xl {\n        max-width: 1200px;\n    }\n    \n    /* Grid optimizations */\n    .grid.lg\\:grid-cols-2 {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 3rem;\n    }\n    \n    .grid.md\\:grid-cols-3 {\n        grid-template-columns: repeat(3, 1fr);\n    }\n    \n    .grid.md\\:grid-cols-4 {\n        grid-template-columns: repeat(4, 1fr);\n    }\n}\n\n/* Large Desktop - 1281px+ */\n@media (min-width: 1281px) {\n    .max-w-7xl {\n        max-width: 1400px;\n    }\n    \n    /* Enhanced spacing */\n    .glass {\n        padding: 3rem;\n    }\n    \n    /* Better typography */\n    .text-6xl {\n        font-size: 4rem;\n    }\n    \n    .text-5xl {\n        font-size: 3.5rem;\n    }\n    \n    /* Larger cards */\n    .aspect-square {\n        max-width: 400px;\n    }\n}\n\n/* Touch device optimizations */\n@media (hover: none) and (pointer: coarse) {\n    /* Larger touch targets */\n    button, .btn-hover-scale {\n        min-height: 44px;\n        min-width: 44px;\n        padding: 0.75rem 1.5rem;\n    }\n    \n    /* Remove hover effects on touch devices */\n    .hover-lift:hover {\n        transform: none;\n    }\n    \n    .btn-hover-scale:hover {\n        transform: none;\n    }\n    \n    /* Enhance focus states for touch */\n    button:focus,\n    input:focus,\n    .focus\\:outline-none:focus {\n        outline: 2px solid #3b82f6;\n        outline-offset: 2px;\n    }\n}\n\n/* High-resolution displays */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    /* Crisp rendering */\n    * {\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    \n    /* Enhanced shadows for retina */\n    .shadow-professional {\n        /* Shadow-free design */\n    }\n}\n\n/* Print optimizations */\n@media print {\n    /* Hide interactive elements */\n    nav, footer, button, .btn-hover-scale {\n        display: none !important;\n    }\n    \n    /* Optimize for print */\n    body {\n        background: white !important;\n        color: black !important;\n        font-size: 12pt;\n    }\n    \n    .glass {\n        background: white !important;\n        border: 1px solid #ccc !important;\n    }\n    \n    /* Page breaks */\n    .grid > div {\n        break-inside: avoid;\n    }\n}\n\n/* Landscape orientation adjustments */\n@media (orientation: landscape) and (max-height: 600px) {\n    /* Compact header */\n    nav {\n        height: 3rem;\n    }\n    \n    nav .h-16 {\n        height: 3rem;\n    }\n    \n    /* Reduced vertical spacing */\n    .py-12 {\n        padding-top: 2rem;\n        padding-bottom: 2rem;\n    }\n    \n    .mb-16 {\n        margin-bottom: 2rem;\n    }\n}\n\n/* Ultra-wide screens */\n@media (min-width: 1920px) {\n    .max-w-7xl {\n        max-width: 1600px;\n    }\n    \n    /* Prevent excessive stretching */\n    .glass {\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n    \n    /* Better grid spacing */\n    .grid {\n        gap: 3rem;\n    }\n}\n\n/* Safe area insets for devices with notches */\n@supports (padding: max(0px)) {\n    .fixed {\n        padding-left: max(1rem, env(safe-area-inset-left));\n        padding-right: max(1rem, env(safe-area-inset-right));\n    }\n    \n    nav {\n        padding-top: max(0px, env(safe-area-inset-top));\n    }\n    \n    #toast-container {\n        top: max(5rem, calc(5rem + env(safe-area-inset-top)));\n        right: max(1rem, env(safe-area-inset-right));\n        left: max(1rem, env(safe-area-inset-left));\n    }\n}\n\n/* Enhanced contrast mode support */\n@media (prefers-contrast: high) {\n    .glass {\n        background: rgba(255, 255, 255, 0.95);\n        border: 2px solid rgba(0, 0, 0, 0.3);\n        backdrop-filter: none;\n    }\n    \n    .dark .glass {\n        background: rgba(31, 41, 55, 0.95);\n        border: 2px solid rgba(255, 255, 255, 0.3);\n    }\n    \n    button, .btn-hover-scale {\n        border: 2px solid currentColor;\n    }\n    \n    .badge {\n        border: 2px solid currentColor;\n    }\n}\n\n/* Focus improvements for better accessibility */\n@media (prefers-reduced-motion: no-preference) {\n    :focus {\n        transition: box-shadow 0.15s ease-in-out;\n    }\n}\n\n/* Enhanced touch targets for small screens */\n@media (max-width: 480px) and (pointer: coarse) {\n    nav a {\n        padding: 0.75rem 1rem;\n        min-height: 44px;\n        display: flex;\n        align-items: center;\n    }\n    \n    button {\n        padding: 0.75rem 1.5rem;\n        min-height: 48px;\n    }\n    \n    .badge {\n        padding: 0.5rem 1rem;\n        min-height: 36px;\n    }\n    \n    input, select, textarea {\n        min-height: 48px;\n        font-size: 16px; /* Prevent zoom on iOS */\n    }\n}\n\n/* Print-specific responsive adjustments */\n@media print {\n    .responsive-hide-print {\n        display: none !important;\n    }\n    \n    .grid {\n        break-inside: avoid;\n    }\n    \n    .result-card {\n        break-inside: avoid;\n        margin-bottom: 1rem;\n    }\n    \n    nav, footer, button, .fixed {\n        display: none !important;\n    }\n    \n    .container {\n        max-width: none !important;\n        padding: 0 !important;\n    }\n}\n\n/* Enhanced modal backdrop */\n.modal-backdrop {\n    backdrop-filter: blur(8px);\n    background: rgba(0, 0, 0, 0.6);\n}\n\n/* Professional form inputs */\ninput[type=\"file\"]::-webkit-file-upload-button {\n    display: none;\n}\n\n/* Enhanced Selection and Touch Feedback */\n::selection {\n    background: rgba(59, 130, 246, 0.3);\n    color: inherit;\n}\n\n::-moz-selection {\n    background: rgba(59, 130, 246, 0.3);\n    color: inherit;\n}\n\n/* Touch feedback for interactive elements */\n@media (hover: none) and (pointer: coarse) {\n    button:active,\n    .btn-hover-scale:active {\n        transform: scale(0.95);\n        background-color: rgba(59, 130, 246, 0.1);\n    }\n    \n    a:active {\n        background-color: rgba(59, 130, 246, 0.05);\n        border-radius: 0.25rem;\n    }\n}\n\n/* Professional loading states */\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n}\n\n.dark .skeleton {\n    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);\n    background-size: 200% 100%;\n}\n\n@keyframes loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n}\n\n/* Enhanced Progress Bar - Responsive */\n.progress-bar-animated {\n    background-size: 20px 20px;\n    background-image: linear-gradient(\n        45deg,\n        rgba(255, 255, 255, 0.15) 25%,\n        transparent 25%,\n        transparent 50%,\n        rgba(255, 255, 255, 0.15) 50%,\n        rgba(255, 255, 255, 0.15) 75%,\n        transparent 75%,\n        transparent\n    );\n    animation: progress-bar-stripes 1s linear infinite;\n}\n\n/* Responsive progress bar sizing */\n@media (max-width: 480px) {\n    .progress-bar {\n        height: 8px;\n        border-radius: 4px;\n    }\n    \n    .progress-bar-animated {\n        background-size: 15px 15px;\n    }\n}\n\n@media (min-width: 1281px) {\n    .progress-bar {\n        height: 16px;\n        border-radius: 8px;\n    }\n    \n    .progress-bar-animated {\n        background-size: 25px 25px;\n    }\n}\n\n@keyframes progress-bar-stripes {\n    0% { background-position: 0 0; }\n    100% { background-position: 20px 0; }\n}\n\n/* Enhanced mobile-first animations */\n@media (max-width: 768px) {\n    @keyframes mobile-fade-in {\n        0% { \n            opacity: 0;\n            transform: translateY(10px);\n        }\n        100% { \n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n    \n    @keyframes mobile-scale-in {\n        0% { \n            opacity: 0;\n            transform: scale(0.95);\n        }\n        100% { \n            opacity: 1;\n            transform: scale(1);\n        }\n    }\n    \n    .animate-fade-in {\n        animation: mobile-fade-in 0.3s ease-out;\n    }\n    \n    .animate-scale-in {\n        animation: mobile-scale-in 0.25s ease-out;\n    }\n}\n\n/* Performance optimizations for lower-end devices */\n@media (max-width: 768px) and (max-resolution: 150dpi) {\n    * {\n        transform: translateZ(0); /* Enable hardware acceleration */\n    }\n    \n    .glass {\n        backdrop-filter: none;\n        background: rgba(255, 255, 255, 0.9);\n    }\n    \n    .dark .glass {\n        background: rgba(31, 41, 55, 0.9);\n    }\n    \n    .shadow-professional,\n    .shadow-elegant {\n        /* Shadow-free design */\n    }\n}\n\n/* Enhanced Badge System - Responsive */\n.badge {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-weight: 600;\n    border-radius: 1rem;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border: 1px solid transparent;\n    padding: 0.5rem 1rem;\n    font-size: 1rem;\n}\n\n/* Responsive badge sizing */\n@media (max-width: 480px) {\n    .badge {\n        padding: 0.375rem 0.75rem;\n        font-size: 0.875rem;\n        gap: 0.375rem;\n        border-radius: 0.75rem;\n    }\n    \n    .badge i {\n        width: 1rem;\n        height: 1rem;\n    }\n}\n\n@media (min-width: 1281px) {\n    .badge {\n        padding: 0.75rem 1.5rem;\n        font-size: 1.125rem;\n        gap: 0.75rem;\n        border-radius: 1.25rem;\n    }\n    \n    .badge i {\n        width: 1.5rem;\n        height: 1.5rem;\n    }\n}\n\n/* AI Generated - Warning/Danger Styling */\n.badge-ai-generated {\n    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n    color: white;\n    border: 2px solid #fca5a5;\n}\n\n.badge-ai-generated:hover {\n    transform: scale(1.02);\n}\n\n/* Real Image - Success Styling */\n.badge-real {\n    background: linear-gradient(135deg, #7ADAA5 0%, #7ADAA5 100%);\n    color: white;\n    border: 2px solid #7ADAA5;\n}\n\n.badge-real:hover {\n    transform: scale(1.02);\n}\n\n/* Unknown/Error - Neutral Styling */\n.badge-unknown {\n    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);\n    color: white;\n    border: 2px solid #d1d5db;\n}\n\n/* Progress Bar System */\n.progress-bar {\n    height: 12px;\n    border-radius: 6px;\n    transition: all 1s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n}\n\n.progress-bar::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(\n        90deg,\n        transparent,\n        rgba(255, 255, 255, 0.2),\n        transparent\n    );\n    animation: shimmer 2s infinite;\n}\n\n@keyframes shimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n}\n\n/* Force AI Generated Progress Bar - Professional Red */\ndiv[id=\"confidence-bar\"].progress-bar-ai-generated,\n#confidence-bar.progress-bar-ai-generated,\n.progress-bar-ai-generated {\n    background: #dc2626 !important;\n    background-image: linear-gradient(90deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%) !important;\n    background-color: #dc2626 !important;\n    border: 2px solid rgba(220, 38, 38, 0.5) !important;\n}\n\n/* Force Real Image Progress Bar - Professional Green */\ndiv[id=\"confidence-bar\"].progress-bar-real,\n#confidence-bar.progress-bar-real,\n.progress-bar-real {\n    background: #7ADAA5 !important;\n    background-image: linear-gradient(90deg, #7ADAA5 0%, #5fb88b 50%, #4a9a72 100%) !important;\n    background-color: #7ADAA5 !important;\n    border: 2px solid rgba(122, 218, 165, 0.5) !important;\n}\n\n/* Override any dark mode or other conflicting styles */\n.dark #confidence-bar.progress-bar-ai-generated,\n.dark div[id=\"confidence-bar\"].progress-bar-ai-generated {\n    background: #dc2626 !important;\n    background-image: linear-gradient(90deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%) !important;\n    background-color: #dc2626 !important;\n}\n\n.dark #confidence-bar.progress-bar-real,\n.dark div[id=\"confidence-bar\"].progress-bar-real {\n    background: #7ADAA5 !important;\n    background-image: linear-gradient(90deg, #7ADAA5 0%, #5fb88b 50%, #4a9a72 100%) !important;\n    background-color: #7ADAA5 !important;\n}\n\n/* Ensure no other styles can override */\n#confidence-bar[style*=\"background\"] {\n    /* This selector has higher specificity for inline styles */\n}\n\n/* Additional fallback with element selector */\ndiv#confidence-bar {\n    transition: all 1000ms ease-out !important;\n    border-radius: 9999px !important;\n    position: relative !important;\n}\n\n/* Enhanced Result Cards - Responsive */\n.result-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 1.5rem;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.dark .result-card {\n    background: rgba(31, 41, 55, 0.95);\n    border: 1px solid rgba(75, 85, 99, 0.2);\n}\n\n/* Hover effects only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n    .result-card:hover {\n        transform: translateY(-2px);\n    }\n}\n\n/* Responsive card sizing */\n@media (max-width: 480px) {\n    .result-card {\n        border-radius: 1rem;\n        padding: 1rem;\n        margin-bottom: 0.75rem;\n    }\n}\n\n@media (min-width: 481px) and (max-width: 768px) {\n    .result-card {\n        padding: 1.25rem;\n    }\n}\n\n@media (min-width: 1281px) {\n    .result-card {\n        border-radius: 2rem;\n        padding: 2rem;\n        margin-bottom: 1.5rem;\n    }\n}\n\n/* Professional Circular Image Border System */\n.image-ai-generated {\n    border: 4px solid #ef4444;\n    border-radius: 50%;\n    position: relative;\n    overflow: hidden;\n}\n\n.image-real {\n    border: 4px solid #7ADAA5;\n    border-radius: 50%;\n    position: relative;\n    overflow: hidden;\n}\n\n/* Motion Wave Effects */\n.image-ai-generated::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: conic-gradient(transparent, rgba(239, 68, 68, 0.3), transparent, rgba(239, 68, 68, 0.3));\n    animation: rotate-wave 3s linear infinite;\n    border-radius: 50%;\n    z-index: -1;\n}\n\n.image-real::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: conic-gradient(transparent, rgba(122, 218, 165, 0.3), transparent, rgba(122, 218, 165, 0.3));\n    animation: rotate-wave 3s linear infinite;\n    border-radius: 50%;\n    z-index: -1;\n}\n\n@keyframes rotate-wave {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Enhanced Indicator Badges - Responsive */\n.indicator-strong {\n    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n    color: white;\n    font-size: 0.75rem;\n    padding: 0.25rem 0.75rem;\n    border-radius: 0.75rem;\n    font-weight: 600;\n    display: inline-flex;\n    align-items: center;\n    gap: 0.25rem;\n}\n\n.indicator-moderate {\n    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n    color: white;\n    font-size: 0.75rem;\n    padding: 0.25rem 0.75rem;\n    border-radius: 0.75rem;\n    font-weight: 600;\n    display: inline-flex;\n    align-items: center;\n    gap: 0.25rem;\n}\n\n.indicator-weak {\n    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\n    color: white;\n    font-size: 0.75rem;\n    padding: 0.25rem 0.75rem;\n    border-radius: 0.75rem;\n    font-weight: 600;\n    display: inline-flex;\n    align-items: center;\n    gap: 0.25rem;\n}\n\n/* Responsive indicator sizing */\n@media (max-width: 480px) {\n    .indicator-strong,\n    .indicator-moderate,\n    .indicator-weak {\n        font-size: 0.625rem;\n        padding: 0.2rem 0.5rem;\n        border-radius: 0.5rem;\n        gap: 0.125rem;\n    }\n}\n\n@media (min-width: 769px) {\n    .indicator-strong,\n    .indicator-moderate,\n    .indicator-weak {\n        font-size: 0.875rem;\n        padding: 0.375rem 1rem;\n        border-radius: 1rem;\n        gap: 0.375rem;\n    }\n}\n\n/* Enhanced Wave Animation for AI Detection */\n.ai-detected-wave {\n    animation: warning-pulse 1.5s ease-in-out infinite, warning-shake 3s ease-in-out infinite;\n    position: relative;\n}\n\n.real-detected-wave {\n    animation: success-pulse 3s ease-in-out infinite, gentle-float 4s ease-in-out infinite;\n    position: relative;\n}\n\n/* Warning waves - Multiple aggressive ripples for AI Generated */\n.ai-detected-wave::before {\n    content: '';\n    position: absolute;\n    top: -15px;\n    left: -15px;\n    right: -15px;\n    bottom: -15px;\n    border-radius: 50%;\n    border: 3px solid rgba(239, 68, 68, 0.4);\n    animation: warning-ripple-1 1.5s infinite;\n    z-index: -1;\n}\n\n.ai-detected-wave::after {\n    content: '';\n    position: absolute;\n    top: -25px;\n    left: -25px;\n    right: -25px;\n    bottom: -25px;\n    border-radius: 50%;\n    border: 2px solid rgba(239, 68, 68, 0.2);\n    animation: warning-ripple-2 1.5s infinite 0.75s;\n    z-index: -2;\n}\n\n/* Gentle waves - Single calm ripple for Real Images */\n.real-detected-wave::after {\n    content: '';\n    position: absolute;\n    top: -12px;\n    left: -12px;\n    right: -12px;\n    bottom: -12px;\n    border-radius: 50%;\n    border: 2px solid rgba(122, 218, 165, 0.3);\n    animation: gentle-ripple 3s infinite;\n    z-index: -1;\n}\n\n/* Warning Animations - Fast, aggressive, attention-grabbing */\n@keyframes warning-pulse {\n    0%, 100% { \n \n        transform: scale(1);\n        filter: brightness(1);\n    }\n    25% { \n \n        transform: scale(1.03);\n        filter: brightness(1.2);\n    }\n    75% { \n \n        transform: scale(1.01);\n        filter: brightness(1.1);\n    }\n}\n\n@keyframes warning-shake {\n    0%, 100% { transform: translateX(0) rotate(0deg); }\n    10% { transform: translateX(-1px) rotate(-0.5deg); }\n    20% { transform: translateX(1px) rotate(0.5deg); }\n    30% { transform: translateX(-1px) rotate(-0.5deg); }\n    40% { transform: translateX(1px) rotate(0.5deg); }\n    50% { transform: translateX(0) rotate(0deg); }\n}\n\n@keyframes warning-ripple-1 {\n    0% {\n        transform: scale(1);\n        opacity: 0.8;\n        border-width: 3px;\n    }\n    50% {\n        opacity: 0.4;\n        border-width: 2px;\n    }\n    100% {\n        transform: scale(1.4);\n        opacity: 0;\n        border-width: 1px;\n    }\n}\n\n@keyframes warning-ripple-2 {\n    0% {\n        transform: scale(1);\n        opacity: 0.6;\n        border-width: 2px;\n    }\n    100% {\n        transform: scale(1.6);\n        opacity: 0;\n        border-width: 1px;\n    }\n}\n\n/* Success Animations - Slow, calm, reassuring */\n@keyframes success-pulse {\n    0%, 100% { \n \n        transform: scale(1);\n    }\n    50% { \n \n        transform: scale(1.01);\n    }\n}\n\n@keyframes gentle-float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-3px); }\n}\n\n@keyframes gentle-ripple {\n    0% {\n        transform: scale(1);\n        opacity: 0.6;\n    }\n    100% {\n        transform: scale(1.3);\n        opacity: 0;\n    }\n}\n\n/* Enhanced Modal System - Responsive */\n@keyframes fade-in {\n    0% { opacity: 0; }\n    100% { opacity: 1; }\n}\n\n@keyframes scale-in {\n    0% { \n        transform: scale(0.9) translateY(20px);\n        opacity: 0;\n    }\n    100% { \n        transform: scale(1) translateY(0);\n        opacity: 1;\n    }\n}\n\n@keyframes spin-slow {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Responsive modal adjustments */\n@media (max-width: 480px) {\n    .fixed.inset-0 .relative {\n        margin: 1rem;\n        max-width: calc(100vw - 2rem);\n        max-height: calc(100vh - 2rem);\n        overflow-y: auto;\n    }\n    \n    .relative.bg-white\\/95 {\n        padding: 1.5rem;\n        border-radius: 1rem;\n    }\n    \n    /* Adjust modal text sizes */\n    .text-5xl {\n        font-size: 2rem;\n    }\n}\n\n@media (min-width: 481px) and (max-width: 768px) {\n    .fixed.inset-0 .relative {\n        margin: 1.5rem;\n        max-width: calc(100vw - 3rem);\n    }\n    \n    .relative.bg-white\\/95 {\n        padding: 2rem;\n    }\n}\n\n/* Modal backdrop improvements */\n.modal-backdrop {\n    backdrop-filter: blur(12px);\n    background: rgba(0, 0, 0, 0.6);\n    transition: all 0.3s ease;\n}\n\n@media (max-width: 768px) {\n    .modal-backdrop {\n        backdrop-filter: blur(8px);\n    }\n}\n\n.animate-fade-in {\n    animation: fade-in 0.5s ease-out;\n}\n\n.animate-scale-in {\n    animation: scale-in 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.animate-spin-slow {\n    animation: spin-slow 3s linear infinite;\n}\n\n/* Additional Professional Modal Animations */\n@keyframes modal-entrance {\n    0% { \n        transform: scale(0.8) translateY(40px) rotateX(15deg);\n        opacity: 0;\n        filter: blur(10px);\n    }\n    50% {\n        transform: scale(1.05) translateY(-10px) rotateX(5deg);\n        opacity: 0.8;\n        filter: blur(2px);\n    }\n    100% { \n        transform: scale(1) translateY(0) rotateX(0deg);\n        opacity: 1;\n        filter: blur(0px);\n    }\n}\n\n@keyframes reverse-spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(-360deg); }\n}\n\n@keyframes pulse-gentle {\n    0%, 100% { \n        transform: scale(1);\n        opacity: 1;\n    }\n    50% { \n        transform: scale(1.1);\n        opacity: 0.8;\n    }\n}\n\n@keyframes ping-slow {\n    0% {\n        transform: scale(1);\n        opacity: 0.8;\n    }\n    75%, 100% {\n        transform: scale(1.5);\n        opacity: 0;\n    }\n}\n\n@keyframes ping-slower {\n    0% {\n        transform: scale(1);\n        opacity: 0.6;\n    }\n    75%, 100% {\n        transform: scale(2);\n        opacity: 0;\n    }\n}\n\n@keyframes text-glow {\n    0%, 100% { color: #3b82f6; }\n    50% { color: #8b5cf6; }\n}\n\n@keyframes number-pulse {\n    0%, 100% { \n        transform: scale(1);\n        filter: brightness(1);\n    }\n    50% { \n        transform: scale(1.1);\n        filter: brightness(1.2);\n    }\n}\n\n@keyframes progress-fill {\n    0% { width: 0%; }\n    100% { width: 75%; }\n}\n\n@keyframes shimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n}\n\n@keyframes float-delayed {\n    0%, 100% { transform: translateY(0px) translateX(20px) rotate(0deg); }\n    50% { transform: translateY(-20px) translateX(20px) rotate(5deg); }\n}\n\n.animate-modal-entrance {\n    animation: modal-entrance 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-reverse-spin {\n    animation: reverse-spin 4s linear infinite;\n}\n\n.animate-pulse-gentle {\n    animation: pulse-gentle 2s ease-in-out infinite;\n}\n\n.animate-ping-slow {\n    animation: ping-slow 3s cubic-bezier(0, 0, 0.2, 1) infinite;\n}\n\n.animate-ping-slower {\n    animation: ping-slower 4s cubic-bezier(0, 0, 0.2, 1) infinite;\n}\n\n.animate-text-glow {\n    animation: text-glow 2s ease-in-out infinite;\n}\n\n.animate-number-pulse {\n    animation: number-pulse 1.5s ease-in-out infinite;\n}\n\n.animate-progress-fill {\n    animation: progress-fill 5s ease-out;\n}\n\n.animate-shimmer {\n    animation: shimmer 2s ease-in-out infinite;\n}\n\n.animate-float-delayed {\n    animation: float-delayed 6s ease-in-out infinite;\n}","size_bytes":33076},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport HowItWorks from \"@/pages/how-it-works\";\nimport About from \"@/pages/about\";\nimport FAQ from \"@/pages/faq\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/how-it-works\" component={HowItWorks} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/faq\" component={FAQ} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":964},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  /* Custom animations */\n  .animate-fade-in-up {\n    animation: fadeInUp 0.8s ease-out;\n  }\n  \n  .animate-slide-in-right {\n    animation: slideInRight 0.6s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.5s ease-out;\n  }\n  \n  .animate-bounce-in {\n    animation: bounceIn 0.8s ease-out;\n  }\n  \n  /* Animation delays */\n  .animation-delay-75 {\n    animation-delay: 75ms;\n  }\n  \n  .animation-delay-100 {\n    animation-delay: 100ms;\n  }\n  \n  .animation-delay-150 {\n    animation-delay: 150ms;\n  }\n  \n  .animation-delay-200 {\n    animation-delay: 200ms;\n  }\n  \n  .animation-delay-300 {\n    animation-delay: 300ms;\n  }\n  \n  .animation-delay-400 {\n    animation-delay: 400ms;\n  }\n\n  /* Animation keyframes */\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes slideInRight {\n    from {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n  \n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  @keyframes bounceIn {\n    0% {\n      opacity: 0;\n      transform: scale(0.3);\n    }\n    50% {\n      transform: scale(1.05);\n    }\n    70% {\n      transform: scale(0.9);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  /* Hover effects */\n  .hover-float:hover {\n    transform: translateY(-5px);\n    transition: transform 0.3s ease;\n  }\n  \n  .hover-glow:hover {\n    transform: scale(1.02);\n    transition: transform 0.3s ease;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(355, 7%, 97%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(355, 7%, 97%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3361},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdModal.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { Modal } from \"@/components/ui/modal\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Play, Clock, Gift, Zap, CheckCircle } from \"lucide-react\"\n\ninterface AdModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onContinue: () => void\n  analysisInProgress?: boolean\n}\n\nexport default function AdModal({ isOpen, onClose, onContinue, analysisInProgress = false }: AdModalProps) {\n  const [countdown, setCountdown] = useState(8)\n  const [canClose, setCanClose] = useState(false)\n\n  useEffect(() => {\n    if (!isOpen) {\n      setCountdown(8)\n      setCanClose(false)\n      return\n    }\n\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          setCanClose(true)\n          return 0\n        }\n        return prev - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(timer)\n  }, [isOpen])\n\n  const handleContinue = () => {\n    onContinue()\n    onClose()\n  }\n\n  return (\n    <Modal \n      isOpen={isOpen} \n      onClose={canClose ? onClose : () => {}} \n      size=\"lg\"\n      className=\"max-w-3xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Zap className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n              AI Analysis Starting\n            </h2>\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-400 max-w-md mx-auto\">\n            Our advanced AI system is preparing to analyze your image using deep learning algorithms\n          </p>\n        </div>\n\n        {/* Premium Ad Space */}\n        <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-8 border border-blue-200 dark:border-blue-800\">\n          <div className=\"text-center space-y-4\">\n            <Badge variant=\"outline\" className=\"bg-white dark:bg-gray-800 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-700\">\n              ✨ Sponsored Content\n            </Badge>\n            \n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                🚀 Premium AI Tools & Services\n              </h3>\n              <p className=\"text-gray-700 dark:text-gray-300 text-sm leading-relaxed\">\n                Unlock the power of professional AI image analysis, batch processing, and advanced forensics. \n                Join thousands of users getting professional-grade results.\n              </p>\n            </div>\n\n            {/* Mock Premium Features */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Batch Analysis</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  Process up to 100 images at once\n                </p>\n              </div>\n              \n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">API Access</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  Integrate into your applications\n                </p>\n              </div>\n              \n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Priority Support</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  24/7 expert assistance available\n                </p>\n              </div>\n            </div>\n\n            {/* CTA Button */}\n            <div className=\"pt-4\">\n              <Button \n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium px-8 py-2 rounded-full transition-all duration-200 transform hover:scale-105\"\n                data-testid=\"upgrade-premium-button\"\n              >\n                <Gift className=\"h-4 w-4 mr-2\" />\n                Upgrade to Premium - 50% Off\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Analysis Status */}\n        {analysisInProgress && (\n          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"animate-spin rounded-full h-5 w-5 border-2 border-blue-600 border-t-transparent\"></div>\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                Advanced neural network analysis in progress...\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Bottom Action */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400\">\n            <Clock className=\"h-4 w-4\" />\n            {canClose ? (\n              <span className=\"text-green-600 dark:text-green-400 font-medium\">Ready to continue</span>\n            ) : (\n              <span>Continue in {countdown} seconds</span>\n            )}\n          </div>\n          \n          <Button\n            onClick={handleContinue}\n            disabled={!canClose}\n            className={cn(\n              \"font-medium px-6 py-2 rounded-full transition-all duration-200\",\n              canClose \n                ? \"bg-green-600 hover:bg-green-700 text-white transform hover:scale-105\" \n                : \"bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed\"\n            )}\n            data-testid=\"continue-analysis-button\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" />\n            {canClose ? \"Continue Analysis\" : `Wait ${countdown}s`}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nfunction cn(...classes: (string | undefined)[]): string {\n  return classes.filter(Boolean).join(' ')\n}","size_bytes":6972},"client/src/components/GoogleAd.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, ExternalLink, Star, TrendingUp } from \"lucide-react\";\n\ninterface GoogleAdProps {\n  type?: 'banner' | 'card' | 'sidebar';\n  position?: 'top' | 'bottom' | 'inline';\n  animated?: boolean;\n}\n\nexport default function GoogleAd({ type = 'card', position = 'inline', animated = true }: GoogleAdProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [currentAdIndex, setCurrentAdIndex] = useState(0);\n\n  // Sample ad content - in real implementation, this would come from Google AdSense\n  const adContent = [\n    {\n      title: \"Advanced AI Image Tools\",\n      description: \"Professional AI image editing and enhancement tools for creators\",\n      url: \"aitools.example.com\",\n      cta: \"Try Free\",\n      rating: 4.8,\n      reviews: \"2.3k\",\n      image: \"🎨\"\n    },\n    {\n      title: \"Photo Forensics Pro\",\n      description: \"Professional image authentication and forensic analysis software\",\n      url: \"forensics.example.com\", \n      cta: \"Learn More\",\n      rating: 4.9,\n      reviews: \"1.8k\",\n      image: \"🔍\"\n    },\n    {\n      title: \"AI Detection API\",\n      description: \"Integrate AI detection capabilities into your applications\",\n      url: \"api.example.com\",\n      cta: \"Get API Key\",\n      rating: 4.7,\n      reviews: \"956\",\n      image: \"⚡\"\n    }\n  ];\n\n  useEffect(() => {\n    if (animated) {\n      // Animate in after a short delay\n      const timer = setTimeout(() => setIsVisible(true), 500);\n      \n      // Rotate ads every 10 seconds\n      const rotationTimer = setInterval(() => {\n        setCurrentAdIndex((prev) => (prev + 1) % adContent.length);\n      }, 10000);\n\n      return () => {\n        clearTimeout(timer);\n        clearInterval(rotationTimer);\n      };\n    } else {\n      setIsVisible(true);\n    }\n  }, [animated]);\n\n  const currentAd = adContent[currentAdIndex];\n\n  if (type === 'banner') {\n    return (\n      <div className={`\n        w-full bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mb-6\n        transition-all duration-1000 ease-out transform\n        ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}\n        ${animated ? 'hover:scale-[1.02] hover:shadow-lg' : ''}\n      `}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-3xl\">{currentAd.image}</div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">{currentAd.title}</h3>\n              <p className=\"text-sm text-gray-600\">{currentAd.description}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Star className=\"w-3 h-3 mr-1 fill-yellow-400 text-yellow-400\" />\n              {currentAd.rating} ({currentAd.reviews})\n            </Badge>\n            <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n              {currentAd.cta}\n              <ExternalLink className=\"w-3 h-3 ml-1\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"text-xs text-gray-400 mt-2\">\n          Ad • {currentAd.url}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className={`\n      w-full transition-all duration-1000 ease-out transform\n      ${isVisible ? 'opacity-100 translate-y-0 scale-100' : 'opacity-0 translate-y-8 scale-95'}\n      ${animated ? 'hover:shadow-xl hover:-translate-y-1' : ''}\n      bg-gradient-to-br from-white to-gray-50 border-2 border-gray-100\n    `}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <Badge variant=\"outline\" className=\"text-xs text-blue-600 border-blue-200\">\n            <TrendingUp className=\"w-3 h-3 mr-1\" />\n            Sponsored\n          </Badge>\n          <button \n            onClick={() => setIsVisible(false)}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n\n        <div className=\"flex items-start space-x-4\">\n          <div className={`\n            text-4xl transform transition-transform duration-700 ease-out\n            ${isVisible ? 'rotate-0 scale-100' : 'rotate-12 scale-75'}\n          `}>\n            {currentAd.image}\n          </div>\n          \n          <div className=\"flex-1\">\n            <h3 className={`\n              font-bold text-lg text-gray-900 mb-2 transition-all duration-500 ease-out\n              ${isVisible ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-4'}\n            `}>\n              {currentAd.title}\n            </h3>\n            \n            <p className={`\n              text-gray-600 text-sm mb-4 transition-all duration-700 ease-out delay-200\n              ${isVisible ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-4'}\n            `}>\n              {currentAd.description}\n            </p>\n\n            <div className={`\n              flex items-center justify-between transition-all duration-900 ease-out delay-400\n              ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}\n            `}>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star \n                      key={i} \n                      className={`\n                        w-4 h-4 transition-all duration-300 delay-${(i + 1) * 100}\n                        ${i < Math.floor(currentAd.rating) \n                          ? 'text-yellow-400 fill-yellow-400' \n                          : 'text-gray-300'\n                        }\n                      `} \n                    />\n                  ))}\n                </div>\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {currentAd.rating}\n                </span>\n                <span className=\"text-xs text-gray-500\">\n                  ({currentAd.reviews} reviews)\n                </span>\n              </div>\n              \n              <Button \n                className={`\n                  bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\n                  transform transition-all duration-300 hover:scale-105 hover:shadow-lg\n                  text-white font-semibold\n                `}\n                size=\"sm\"\n              >\n                {currentAd.cta}\n                <ExternalLink className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className={`\n          mt-4 pt-4 border-t border-gray-100 text-xs text-gray-400 flex items-center justify-between\n          transition-all duration-1000 ease-out delay-600\n          ${isVisible ? 'opacity-100' : 'opacity-0'}\n        `}>\n          <span>Ad • {currentAd.url}</span>\n          <div className=\"flex space-x-1\">\n            {adContent.map((_, index) => (\n              <div\n                key={index}\n                className={`\n                  w-2 h-2 rounded-full transition-all duration-300\n                  ${index === currentAdIndex ? 'bg-blue-400' : 'bg-gray-300'}\n                `}\n              />\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7511},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/seo.ts":{"content":"// SEO utilities for dynamic meta tag management\n\nexport interface SEOConfig {\n  title: string;\n  description: string;\n  keywords?: string;\n  ogTitle?: string;\n  ogDescription?: string;\n  ogImage?: string;\n  canonicalUrl?: string;\n  structuredData?: object;\n}\n\nexport const updatePageSEO = (config: SEOConfig) => {\n  // Update title\n  document.title = config.title;\n  \n  // Update or create meta tags\n  const updateMetaTag = (name: string, content: string, property = false) => {\n    const attribute = property ? 'property' : 'name';\n    let element = document.querySelector(`meta[${attribute}=\"${name}\"]`) as HTMLMetaElement;\n    \n    if (!element) {\n      element = document.createElement('meta');\n      element.setAttribute(attribute, name);\n      document.head.appendChild(element);\n    }\n    \n    element.setAttribute('content', content);\n  };\n\n  // Update description\n  updateMetaTag('description', config.description);\n  \n  // Update keywords if provided\n  if (config.keywords) {\n    updateMetaTag('keywords', config.keywords);\n  }\n  \n  // Update Open Graph tags\n  updateMetaTag('og:title', config.ogTitle || config.title, true);\n  updateMetaTag('og:description', config.ogDescription || config.description, true);\n  \n  if (config.ogImage) {\n    updateMetaTag('og:image', config.ogImage, true);\n  }\n  \n  // Update canonical URL if provided\n  if (config.canonicalUrl) {\n    let canonical = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement;\n    if (!canonical) {\n      canonical = document.createElement('link');\n      canonical.rel = 'canonical';\n      document.head.appendChild(canonical);\n    }\n    canonical.href = config.canonicalUrl;\n  }\n  \n  // Add structured data if provided\n  if (config.structuredData) {\n    // Remove existing structured data for this page\n    const existingScript = document.querySelector('script[data-page-schema]');\n    if (existingScript) {\n      existingScript.remove();\n    }\n    \n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.setAttribute('data-page-schema', 'true');\n    script.textContent = JSON.stringify(config.structuredData);\n    document.head.appendChild(script);\n  }\n};\n\n// Predefined SEO configurations for each page\nexport const seoConfigs = {\n  home: {\n    title: \"AI Detection Checker - Professional AI Image Detection Tool | RootGroup.tech\",\n    description: \"Advanced AI image detection tool with 96.8% accuracy. Detect AI-generated images from DALL-E, Midjourney, Stable Diffusion using deep learning and computer vision. Free analysis with instant results.\",\n    keywords: \"AI detection, image analysis, deepfake detection, AI generated images, computer vision, machine learning, image forensics, AI checker, artificial intelligence detection\",\n    ogTitle: \"AI Detection Checker - Professional AI Image Detection Tool\",\n    canonicalUrl: \"https://aidetectionchecker.replit.app/\",\n    structuredData: {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"WebApplication\",\n      \"name\": \"AI Detection Checker\",\n      \"description\": \"Advanced AI image detection tool with 96.8% accuracy using deep learning and computer vision algorithms\",\n      \"url\": \"https://aidetectionchecker.replit.app/\",\n      \"applicationCategory\": \"Multimedia\",\n      \"operatingSystem\": \"Web Browser\",\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": \"0\",\n        \"priceCurrency\": \"USD\"\n      },\n      \"creator\": {\n        \"@type\": \"Organization\",\n        \"name\": \"RootGroup.tech\",\n        \"url\": \"https://rootgroup.tech\"\n      },\n      \"featureList\": [\n        \"AI image detection\",\n        \"96.8% accuracy rate\",\n        \"Multiple AI model detection\",\n        \"Real-time analysis\",\n        \"Detailed forensic reports\"\n      ]\n    }\n  },\n  \n  about: {\n    title: \"About AI Detection Checker - Advanced Computer Vision Technology | RootGroup.tech\",\n    description: \"Learn about our AI detection technology, company mission, and the team behind the industry-leading image analysis platform. Discover how we achieve 96.8% accuracy in AI detection.\",\n    keywords: \"about AI detection, computer vision technology, RootGroup.tech, AI image analysis company, machine learning expertise, image forensics team\",\n    ogTitle: \"About AI Detection Checker - Advanced Computer Vision Technology\",\n    canonicalUrl: \"https://aidetectionchecker.replit.app/about\",\n    structuredData: {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"AboutPage\",\n      \"name\": \"About AI Detection Checker\",\n      \"description\": \"Learn about our AI detection technology and the team behind the platform\",\n      \"url\": \"https://aidetectionchecker.replit.app/about\",\n      \"mainEntity\": {\n        \"@type\": \"Organization\",\n        \"name\": \"RootGroup.tech\",\n        \"description\": \"Leading technology company specializing in AI, machine learning, and advanced computer vision solutions\",\n        \"foundingDate\": \"2020\",\n        \"numberOfEmployees\": \"50+\",\n        \"serviceArea\": {\n          \"@type\": \"Place\",\n          \"name\": \"Global\"\n        }\n      }\n    }\n  },\n  \n  howItWorks: {\n    title: \"How AI Detection Works - Technical Deep Dive into Detection Algorithms | AI Checker\",\n    description: \"Discover our 6-algorithm hybrid system: ResNet50 CNN, texture analysis, frequency domain detection, compression forensics, and metadata examination. Learn the technical process.\",\n    keywords: \"how AI detection works, ResNet50, computer vision algorithms, texture analysis, frequency domain, compression forensics, EXIF metadata, technical explanation\",\n    ogTitle: \"How AI Detection Works - Technical Deep Dive\",\n    canonicalUrl: \"https://aidetectionchecker.replit.app/how-it-works\",\n    structuredData: {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"HowTo\",\n      \"name\": \"How AI Image Detection Works\",\n      \"description\": \"Step-by-step process of how our AI detection system analyzes images\",\n      \"image\": \"https://aidetectionchecker.replit.app/how-it-works-diagram.jpg\",\n      \"step\": [\n        {\n          \"@type\": \"HowToStep\",\n          \"name\": \"Upload Image\",\n          \"text\": \"Upload your image in JPG, PNG, JPEG, or WebP format up to 10MB\"\n        },\n        {\n          \"@type\": \"HowToStep\", \n          \"name\": \"AI Analysis\",\n          \"text\": \"Our hybrid system analyzes using 6 advanced computer vision algorithms\"\n        },\n        {\n          \"@type\": \"HowToStep\",\n          \"name\": \"Get Results\", \n          \"text\": \"Receive detailed analysis with confidence scores and forensic indicators\"\n        },\n        {\n          \"@type\": \"HowToStep\",\n          \"name\": \"Download Report\",\n          \"text\": \"Get comprehensive technical reports with detailed forensic analysis\"\n        }\n      ]\n    }\n  },\n  \n  faq: {\n    title: \"AI Detection FAQ - Common Questions About Image Analysis | AI Checker\",\n    description: \"Find answers to frequently asked questions about AI image detection, accuracy rates, privacy policies, supported formats, and technical specifications. Get help with our detection tool.\",\n    keywords: \"AI detection FAQ, frequently asked questions, image analysis help, AI checker support, detection accuracy, privacy policy, technical specifications\",\n    ogTitle: \"AI Detection FAQ - Common Questions Answered\",\n    canonicalUrl: \"https://aidetectionchecker.replit.app/faq\",\n    structuredData: {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"FAQPage\",\n      \"mainEntity\": [\n        {\n          \"@type\": \"Question\",\n          \"name\": \"What is AI Detection Checker?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"AI Detection Checker is an advanced image analysis platform that determines whether images are AI-generated or authentic photographs. Using a combination of deep learning neural networks and traditional computer vision forensics, we provide professional-grade detection with 96.8% accuracy.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How accurate is the AI detection?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Our system achieves 96.8% overall accuracy through a hybrid approach combining ResNet50 deep learning with 6 advanced computer vision algorithms including texture analysis, frequency domain detection, compression forensics, and metadata examination.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"What image formats are supported?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"We support JPG, JPEG, PNG, and WebP formats. Images can be up to 10MB in size. Our system processes all standard image formats while maintaining optimal analysis quality.\"\n          }\n        }\n      ]\n    }\n  }\n};\n\n// Additional SEO utilities\nexport const addJsonLd = (data: object, id: string) => {\n  // Remove existing JSON-LD with same ID\n  const existingScript = document.querySelector(`script[data-json-ld=\"${id}\"]`);\n  if (existingScript) {\n    existingScript.remove();\n  }\n  \n  const script = document.createElement('script');\n  script.type = 'application/ld+json';\n  script.setAttribute('data-json-ld', id);\n  script.textContent = JSON.stringify(data);\n  document.head.appendChild(script);\n};\n\n// Breadcrumb structured data\nexport const addBreadcrumbStructuredData = (breadcrumbs: Array<{name: string, url: string}>) => {\n  const breadcrumbData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": breadcrumbs.map((item, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"name\": item.name,\n      \"item\": item.url\n    }))\n  };\n  \n  addJsonLd(breadcrumbData, 'breadcrumb');\n};\n\n// Organization structured data\nexport const addOrganizationStructuredData = () => {\n  const organizationData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    \"name\": \"RootGroup.tech\",\n    \"url\": \"https://rootgroup.tech\",\n    \"logo\": \"https://aidetectionchecker.replit.app/logo.png\",\n    \"description\": \"Leading technology company specializing in AI, machine learning, and advanced computer vision solutions\",\n    \"foundingDate\": \"2020\",\n    \"contactPoint\": {\n      \"@type\": \"ContactPoint\",\n      \"contactType\": \"customer support\",\n      \"email\": \"support@rootgroup.tech\"\n    },\n    \"sameAs\": [\n      \"https://twitter.com/rootgrouptech\",\n      \"https://linkedin.com/company/rootgrouptech\"\n    ]\n  };\n  \n  addJsonLd(organizationData, 'organization');\n};\n\n// WebSite structured data with search functionality\nexport const addWebsiteStructuredData = () => {\n  const websiteData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"name\": \"AI Detection Checker\",\n    \"url\": \"https://aidetectionchecker.replit.app/\",\n    \"description\": \"Advanced AI image detection tool with 96.8% accuracy\",\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"RootGroup.tech\"\n    },\n    \"potentialAction\": {\n      \"@type\": \"SearchAction\",\n      \"target\": \"https://aidetectionchecker.replit.app/?q={search_term_string}\",\n      \"query-input\": \"required name=search_term_string\"\n    }\n  };\n  \n  addJsonLd(websiteData, 'website');\n};","size_bytes":11168},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Eye, \n  Users, \n  Award, \n  Target, \n  Lightbulb, \n  Shield, \n  Globe, \n  ArrowRight,\n  Building,\n  Calendar,\n  TrendingUp,\n  CheckCircle\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { updatePageSEO, seoConfigs, addBreadcrumbStructuredData } from \"@/lib/seo\";\nimport { useEffect } from \"react\";\n\nexport default function About() {\n  // Update SEO when component mounts\n  useEffect(() => {\n    updatePageSEO(seoConfigs.about);\n    addBreadcrumbStructuredData([\n      { name: \"Home\", url: \"https://aidetectionchecker.replit.app/\" },\n      { name: \"About\", url: \"https://aidetectionchecker.replit.app/about\" }\n    ]);\n  }, []);\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-xl border-b border-white/20 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n                <Eye className=\"text-white h-5 w-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-900 group-hover:text-blue-600 transition-colors\">AI Detection Checker</h1>\n                <p className=\"text-sm text-slate-500\">by RootGroup.tech</p>\n              </div>\n            </Link>\n            <nav className=\"flex items-center space-x-6\">\n              <Link href=\"/\" className=\"text-slate-600 hover:text-slate-900 font-medium\">Home</Link>\n              <Link href=\"/how-it-works\" className=\"text-slate-600 hover:text-slate-900 font-medium\">How it works</Link>\n              <span className=\"text-blue-600 font-medium\">About</span>\n              <Link href=\"/faq\" className=\"text-slate-600 hover:text-slate-900 font-medium\">FAQ</Link>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <Badge className=\"mb-4 bg-blue-100 text-blue-700 border-blue-200\">About Us</Badge>\n            <h1 className=\"text-5xl font-bold text-slate-900 mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n              Pioneering AI Detection Technology\n            </h1>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed\">\n              Developed by RootGroup.tech, we're committed to providing the most advanced and reliable AI image detection solutions for the digital age.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-slate-900 mb-6\">Our Mission</h2>\n              <p className=\"text-lg text-slate-600 mb-6\">\n                In an era where AI-generated content is becoming increasingly sophisticated, we provide the tools and expertise needed to distinguish between authentic and synthetic media.\n              </p>\n              <p className=\"text-lg text-slate-600 mb-8\">\n                Our mission is to empower individuals, businesses, and organizations with professional-grade AI detection capabilities, ensuring transparency and trust in digital content.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"text-slate-700\">Advancing digital authenticity verification</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"text-slate-700\">Protecting against misinformation</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"text-slate-700\">Empowering informed decision-making</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-8\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-slate-900\">96.8%</h3>\n                  <p className=\"text-slate-600\">Detection Accuracy</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Users className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-slate-900\">50K+</h3>\n                  <p className=\"text-slate-600\">Images Analyzed</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Globe className=\"h-8 w-8 text-purple-600\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-slate-900\">120+</h3>\n                  <p className=\"text-slate-600\">Countries Served</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-yellow-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Award className=\"h-8 w-8 text-yellow-600\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-slate-900\">99.9%</h3>\n                  <p className=\"text-slate-600\">Uptime</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* About RootGroup.tech */}\n      <section className=\"py-16 bg-white/50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-6\">About RootGroup.tech</h2>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              RootGroup.tech is a leading technology company specializing in AI, machine learning, and advanced computer vision solutions.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Building className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Enterprise Solutions</h3>\n                <p className=\"text-slate-600\">\n                  We develop cutting-edge AI solutions for enterprises, focusing on practical applications that solve real-world challenges.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Lightbulb className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Innovation Focus</h3>\n                <p className=\"text-slate-600\">\n                  Our team of experts continuously researches and develops innovative AI technologies to stay ahead of emerging challenges.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Shield className=\"h-8 w-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Security First</h3>\n                <p className=\"text-slate-600\">\n                  We prioritize security and privacy in all our solutions, ensuring data protection and user trust at every level.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Values & Principles */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center text-slate-900 mb-12\">Our Values & Principles</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Target className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Accuracy & Reliability</h3>\n                  <p className=\"text-slate-600\">\n                    We strive for the highest levels of accuracy in our detection algorithms, continuously improving through rigorous testing and validation.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Shield className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Privacy & Security</h3>\n                  <p className=\"text-slate-600\">\n                    User privacy is paramount. We process images securely and never store personal data or uploaded content after analysis.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Users className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">User-Centric Design</h3>\n                  <p className=\"text-slate-600\">\n                    Our solutions are designed with users in mind, providing intuitive interfaces and clear, actionable results.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Lightbulb className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Continuous Innovation</h3>\n                  <p className=\"text-slate-600\">\n                    We invest heavily in research and development to stay ahead of evolving AI generation technologies and detection challenges.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Globe className=\"h-6 w-6 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Global Accessibility</h3>\n                  <p className=\"text-slate-600\">\n                    Our platform is designed to be accessible worldwide, providing essential AI detection capabilities to users everywhere.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex\">\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                  <Award className=\"h-6 w-6 text-indigo-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Excellence & Quality</h3>\n                  <p className=\"text-slate-600\">\n                    We maintain the highest standards of quality in our technology, ensuring professional-grade results for all users.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Technology Stack */}\n      <section className=\"py-16 bg-gradient-to-br from-slate-900 to-slate-800 text-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-6\">Powered by Advanced Technology</h2>\n            <p className=\"text-xl text-slate-300 max-w-3xl mx-auto\">\n              Our platform leverages state-of-the-art technologies to deliver unparalleled AI detection capabilities.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold\">TF</span>\n              </div>\n              <h3 className=\"font-semibold mb-2\">TensorFlow</h3>\n              <p className=\"text-slate-400 text-sm\">Deep learning framework for neural network models</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold\">CV</span>\n              </div>\n              <h3 className=\"font-semibold mb-2\">OpenCV</h3>\n              <p className=\"text-slate-400 text-sm\">Computer vision library for image processing</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold\">SK</span>\n              </div>\n              <h3 className=\"font-semibold mb-2\">Scikit-Image</h3>\n              <p className=\"text-slate-400 text-sm\">Image processing algorithms and analysis</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold\">NP</span>\n              </div>\n              <h3 className=\"font-semibold mb-2\">NumPy</h3>\n              <p className=\"text-slate-400 text-sm\">Mathematical computing and array operations</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-indigo-600\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-6\">Join Thousands of Users Worldwide</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Experience the power of professional AI detection technology developed by RootGroup.tech.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/\">\n              <Button className=\"bg-white text-blue-600 hover:bg-gray-100 font-semibold px-8 py-3 text-lg\">\n                Try AI Detection\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Button \n              variant=\"outline\" \n              className=\"border-white text-white hover:bg-white hover:text-blue-600 font-semibold px-8 py-3 text-lg\"\n              onClick={() => window.open('https://rootgroup.tech/', '_blank')}\n            >\n              Visit RootGroup.tech\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                  <Eye className=\"text-white h-4 w-4\" />\n                </div>\n                <span className=\"text-xl font-bold\">AI Detection Checker</span>\n              </div>\n              <p className=\"text-slate-400 mb-4\">Developed by RootGroup.tech - Advanced AI-powered image authenticity verification.</p>\n              <div className=\"flex space-x-4\">\n                <a href=\"https://rootgroup.tech/\" className=\"text-slate-400 hover:text-white\">Visit RootGroup.tech</a>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><Link href=\"/\" className=\"hover:text-white\">Home</Link></li>\n                <li><Link href=\"/how-it-works\" className=\"hover:text-white\">How it works</Link></li>\n                <li><Link href=\"/about\" className=\"hover:text-white\">About</Link></li>\n                <li><Link href=\"/faq\" className=\"hover:text-white\">FAQ</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><a href=\"https://rootgroup.tech/\" className=\"hover:text-white\">RootGroup.tech</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Terms</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-slate-800 mt-8 pt-8 text-center text-slate-400\">\n            <p>&copy; 2025 All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":19324},"client/src/pages/faq.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Eye, \n  ChevronDown, \n  ChevronUp, \n  HelpCircle, \n  MessageCircle, \n  Mail, \n  ArrowRight,\n  Shield,\n  Clock,\n  Zap,\n  CheckCircle\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { updatePageSEO, seoConfigs, addBreadcrumbStructuredData } from \"@/lib/seo\";\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n  category: string;\n}\n\nconst faqData: FAQItem[] = [\n  {\n    category: \"General\",\n    question: \"What is AI Detection Checker?\",\n    answer: \"AI Detection Checker is an advanced image analysis platform that determines whether images are AI-generated or authentic photographs. Using a combination of deep learning neural networks and traditional computer vision forensics, we provide professional-grade detection with 96.8% accuracy.\"\n  },\n  {\n    category: \"General\",\n    question: \"How accurate is the AI detection?\",\n    answer: \"Our system achieves 96.8% overall accuracy through a hybrid approach combining ResNet50 deep learning with 6 advanced computer vision algorithms including texture analysis, frequency domain detection, compression forensics, and metadata examination.\"\n  },\n  {\n    category: \"Technical\",\n    question: \"What image formats are supported?\",\n    answer: \"We support JPG, JPEG, PNG, and WebP formats. Images can be up to 10MB in size. Our system processes all standard image formats while maintaining optimal analysis quality.\"\n  },\n  {\n    category: \"Technical\",\n    question: \"How long does analysis take?\",\n    answer: \"Most images are analyzed within 2-3 seconds. Processing time depends on image size and complexity, but our optimized algorithms ensure fast results without compromising accuracy.\"\n  },\n  {\n    category: \"Privacy\",\n    question: \"Is my uploaded image stored on your servers?\",\n    answer: \"No, we do not store any uploaded images. All images are processed in real-time and immediately deleted after analysis. We prioritize user privacy and data security.\"\n  },\n  {\n    category: \"Privacy\",\n    question: \"How do you protect user privacy?\",\n    answer: \"We use enterprise-grade security measures including encrypted data transmission, secure processing environments, and immediate data deletion. No personal information or images are retained after analysis.\"\n  },\n  {\n    category: \"Technical\",\n    question: \"What AI detection algorithms do you use?\",\n    answer: \"Our hybrid system combines: (1) ResNet50 deep learning CNN, (2) Local Binary Pattern texture analysis, (3) GLCM texture analysis, (4) FFT frequency domain analysis, (5) JPEG compression forensics, and (6) EXIF metadata examination.\"\n  },\n  {\n    category: \"Usage\",\n    question: \"Can I use this for commercial purposes?\",\n    answer: \"Yes, our detection service can be used for commercial purposes including content verification, media forensics, and authentication workflows. Contact us for enterprise solutions and API access.\"\n  },\n  {\n    category: \"Technical\",\n    question: \"What types of AI-generated images can you detect?\",\n    answer: \"Our system can detect images from various AI generators including DALL-E, Midjourney, Stable Diffusion, StyleGAN, and other GAN-based models. We continuously update our detection capabilities.\"\n  },\n  {\n    category: \"Usage\",\n    question: \"Are there any usage limitations?\",\n    answer: \"Free users can analyze images with standard processing. For high-volume usage, batch processing, or API access, premium plans are available with enhanced features and priority support.\"\n  },\n  {\n    category: \"Technical\",\n    question: \"How do you handle false positives?\",\n    answer: \"Our multi-algorithm approach minimizes false positives by cross-validating results across 6 different detection methods. Each indicator is weighted based on reliability and context.\"\n  },\n  {\n    category: \"General\",\n    question: \"Who developed this technology?\",\n    answer: \"AI Detection Checker is developed by RootGroup.tech, a technology company specializing in AI, machine learning, and computer vision solutions for enterprise and consumer applications.\"\n  }\n];\n\nconst categories = [\"All\", \"General\", \"Technical\", \"Privacy\", \"Usage\"];\n\nexport default function FAQ() {\n  const [openItems, setOpenItems] = useState<number[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n  // Update SEO when component mounts\n  useEffect(() => {\n    updatePageSEO(seoConfigs.faq);\n    addBreadcrumbStructuredData([\n      { name: \"Home\", url: \"https://aidetectionchecker.replit.app/\" },\n      { name: \"FAQ\", url: \"https://aidetectionchecker.replit.app/faq\" }\n    ]);\n  }, []);\n\n  const toggleItem = (index: number) => {\n    setOpenItems(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  const filteredFAQs = selectedCategory === \"All\" \n    ? faqData \n    : faqData.filter(item => item.category === selectedCategory);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-xl border-b border-white/20 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n                <Eye className=\"text-white h-5 w-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-900 group-hover:text-blue-600 transition-colors\">AI Detection Checker</h1>\n                <p className=\"text-sm text-slate-500\">by RootGroup.tech</p>\n              </div>\n            </Link>\n            <nav className=\"flex items-center space-x-6\">\n              <Link href=\"/\" className=\"text-slate-600 hover:text-slate-900 font-medium\">Home</Link>\n              <Link href=\"/how-it-works\" className=\"text-slate-600 hover:text-slate-900 font-medium\">How it works</Link>\n              <Link href=\"/about\" className=\"text-slate-600 hover:text-slate-900 font-medium\">About</Link>\n              <span className=\"text-blue-600 font-medium\">FAQ</span>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Badge className=\"mb-4 bg-blue-100 text-blue-700 border-blue-200\">Frequently Asked Questions</Badge>\n          <h1 className=\"text-5xl font-bold text-slate-900 mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n            Got Questions? We've Got Answers\n          </h1>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed\">\n            Find answers to common questions about our AI detection technology, privacy policies, and usage guidelines.\n          </p>\n        </div>\n      </section>\n\n      {/* Quick Stats */}\n      <section className=\"py-8\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Zap className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900\">2.1s</h3>\n              <p className=\"text-slate-600 text-sm\">Average Processing Time</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900\">96.8%</h3>\n              <p className=\"text-slate-600 text-sm\">Detection Accuracy</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Shield className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900\">100%</h3>\n              <p className=\"text-slate-600 text-sm\">Privacy Protected</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Clock className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900\">24/7</h3>\n              <p className=\"text-slate-600 text-sm\">Service Availability</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap justify-center gap-3 mb-12\">\n            {categories.map((category) => (\n              <button\n                key={category}\n                onClick={() => setSelectedCategory(category)}\n                className={`px-6 py-2 rounded-full font-medium transition-all duration-200 ${\n                  selectedCategory === category\n                    ? 'bg-blue-600 text-white shadow-lg'\n                    : 'bg-white text-slate-600 hover:bg-blue-50 hover:text-blue-600 border border-slate-200'\n                }`}\n              >\n                {category}\n              </button>\n            ))}\n          </div>\n\n          {/* FAQ Items */}\n          <div className=\"space-y-4\">\n            {filteredFAQs.map((item, index) => {\n              const globalIndex = faqData.indexOf(item);\n              const isOpen = openItems.includes(globalIndex);\n              \n              return (\n                <Card key={globalIndex} className=\"shadow-md border-0 bg-white/70 backdrop-blur-sm overflow-hidden\">\n                  <CardContent className=\"p-0\">\n                    <button\n                      onClick={() => toggleItem(globalIndex)}\n                      className=\"w-full p-6 text-left flex justify-between items-center hover:bg-blue-50/50 transition-colors duration-200\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <HelpCircle className=\"h-5 w-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <Badge variant=\"outline\" className=\"mb-2 text-xs\">\n                            {item.category}\n                          </Badge>\n                          <h3 className=\"text-lg font-semibold text-slate-900\">\n                            {item.question}\n                          </h3>\n                        </div>\n                      </div>\n                      <div className=\"flex-shrink-0 ml-4\">\n                        {isOpen ? (\n                          <ChevronUp className=\"h-5 w-5 text-slate-500\" />\n                        ) : (\n                          <ChevronDown className=\"h-5 w-5 text-slate-500\" />\n                        )}\n                      </div>\n                    </button>\n                    \n                    {isOpen && (\n                      <div className=\"px-6 pb-6 pl-20\">\n                        <p className=\"text-slate-600 leading-relaxed\">\n                          {item.answer}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-16 bg-white/50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-6\">Still Have Questions?</h2>\n            <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n              Can't find the answer you're looking for? Our support team is here to help you with any questions about our AI detection technology.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card className=\"shadow-lg border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <MessageCircle className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Live Chat Support</h3>\n                <p className=\"text-slate-600 mb-6\">\n                  Get instant help from our technical support team. Available 24/7 for all your questions.\n                </p>\n                <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                  Start Live Chat\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-lg border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Mail className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Email Support</h3>\n                <p className=\"text-slate-600 mb-6\">\n                  Send us detailed questions and we'll get back to you within 24 hours with comprehensive answers.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-green-600 text-green-600 hover:bg-green-600 hover:text-white\"\n                  onClick={() => window.location.href = 'mailto:support@rootgroup.tech'}\n                >\n                  Send Email\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-indigo-600\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-6\">Ready to Try Our AI Detection?</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Experience professional-grade AI image detection with our advanced multi-algorithm system.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/\">\n              <Button className=\"bg-white text-blue-600 hover:bg-gray-100 font-semibold px-8 py-3 text-lg\">\n                Try Detection Now\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Link href=\"/how-it-works\">\n              <Button \n                variant=\"outline\" \n                className=\"border-white text-white hover:bg-white hover:text-blue-600 font-semibold px-8 py-3 text-lg\"\n              >\n                Learn How It Works\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                  <Eye className=\"text-white h-4 w-4\" />\n                </div>\n                <span className=\"text-xl font-bold\">AI Detection Checker</span>\n              </div>\n              <p className=\"text-slate-400 mb-4\">Developed by RootGroup.tech - Advanced AI-powered image authenticity verification.</p>\n              <div className=\"flex space-x-4\">\n                <a href=\"https://rootgroup.tech/\" className=\"text-slate-400 hover:text-white\">Visit RootGroup.tech</a>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><Link href=\"/\" className=\"hover:text-white\">Home</Link></li>\n                <li><Link href=\"/how-it-works\" className=\"hover:text-white\">How it works</Link></li>\n                <li><Link href=\"/about\" className=\"hover:text-white\">About</Link></li>\n                <li><Link href=\"/faq\" className=\"hover:text-white\">FAQ</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><a href=\"https://rootgroup.tech/\" className=\"hover:text-white\">RootGroup.tech</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Terms</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-slate-800 mt-8 pt-8 text-center text-slate-400\">\n            <p>&copy; 2025 All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":18037},"client/src/pages/home.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { \n  Eye, \n  Upload, \n  CloudUpload, \n  X, \n  Download, \n  Zap, \n  Shield, \n  TrendingUp,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Image as ImageIcon,\n  Microscope,\n  Play,\n  Pause,\n  BarChart3,\n  Clock,\n  Cpu\n} from \"lucide-react\";\n\ninterface AnalysisResult {\n  id: string;\n  classification: string;\n  confidence: number;\n  processingTime: number;\n  imageSize: string;\n  indicators: Array<{\n    name: string;\n    strength: string;\n  }>;\n  filename: string;\n  originalSize: number;\n}\n\nimport GoogleAd from \"@/components/GoogleAd\";\nimport AdModal from \"@/components/AdModal\";\nimport { updatePageSEO, seoConfigs, addOrganizationStructuredData, addWebsiteStructuredData } from \"@/lib/seo\";\n\nexport default function Home() {\n  // Update SEO when component mounts\n  useEffect(() => {\n    updatePageSEO(seoConfigs.home);\n    addOrganizationStructuredData();\n    addWebsiteStructuredData();\n  }, []);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);\n  const [showAd, setShowAd] = useState(false);\n  const [showAdModal, setShowAdModal] = useState(false);\n  const [showDownloadAdModal, setShowDownloadAdModal] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  // Handle download report button click - show modal first\n  const handleDownloadReportClick = () => {\n    setShowDownloadAdModal(true);\n  };\n\n  // Professional PDF Report Generator\n  const generatePDFReport = () => {\n    if (!analysisResult || !previewUrl) return;\n\n    // Create HTML content for the report\n    const reportHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>AI Detection Report</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        @page { \n            size: A4; \n            margin: 15mm; \n        }\n        body { \n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            line-height: 1.3; \n            color: #334155; \n            background: #ffffff;\n            font-size: 11px;\n        }\n        .header {\n            background: linear-gradient(135deg, #5bc0be 0%, #4a9a98 100%);\n            color: white;\n            padding: 15px;\n            text-align: center;\n            margin-bottom: 15px;\n            border-radius: 8px;\n        }\n        .header h1 { font-size: 1.8em; margin-bottom: 5px; font-weight: 700; }\n        .header p { font-size: 0.9em; opacity: 0.9; }\n        .container { max-width: 100%; margin: 0; padding: 0; }\n        .top-section { \n            display: flex; \n            gap: 15px; \n            margin-bottom: 15px; \n            align-items: flex-start;\n            height: 200px;\n        }\n        .image-container { \n            flex: 1; \n            text-align: center;\n            background: #f8fafc;\n            border: 1px solid #e2e8f0;\n            border-radius: 8px;\n            padding: 10px;\n            height: 100%;\n        }\n        .image-container h3 { font-size: 1em; margin-bottom: 8px; color: #1e293b; }\n        .analyzed-image { \n            max-width: 100%; \n            max-height: 130px;\n            width: auto;\n            height: auto;\n            border-radius: 6px; \n            margin-bottom: 8px;\n        }\n        .classification-badge {\n            display: inline-block;\n            padding: 6px 12px;\n            border-radius: 15px;\n            font-weight: bold;\n            font-size: 0.8em;\n            margin: 5px 0;\n        }\n        .real-image { \n            background: linear-gradient(135deg, #5bc0be, #4a9a98); \n            color: white; \n        }\n        .ai-generated { \n            background: linear-gradient(135deg, #ef4444, #dc2626); \n            color: white; \n        }\n        .results-panel { \n            flex: 1; \n            background: #f8fafc; \n            border: 1px solid #e2e8f0; \n            border-radius: 8px; \n            padding: 15px; \n            height: 100%;\n        }\n        .confidence-score {\n            text-align: center;\n            margin-bottom: 15px;\n        }\n        .confidence-number {\n            font-size: 2.2em;\n            font-weight: 900;\n            background: linear-gradient(135deg, #5bc0be, #4a9a98);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n            margin-bottom: 3px;\n        }\n        .ai-generated .confidence-number {\n            background: linear-gradient(135deg, #ef4444, #dc2626);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n        .technical-grid { \n            display: grid; \n            grid-template-columns: repeat(3, 1fr); \n            gap: 8px; \n            margin-bottom: 10px; \n        }\n        .tech-item { \n            background: linear-gradient(135deg, #5bc0be20, #4a9a9820); \n            border: 1px solid #5bc0be30; \n            border-radius: 6px; \n            padding: 8px; \n            text-align: center; \n        }\n        .tech-label { \n            font-size: 0.7em; \n            color: #4a9a98; \n            font-weight: 600; \n        }\n        .tech-value { \n            font-size: 0.9em; \n            font-weight: bold; \n            color: #5bc0be; \n            margin-top: 3px; \n        }\n        .content-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n            margin-bottom: 15px;\n        }\n        .section { \n            background: white; \n            border-radius: 8px; \n            padding: 12px; \n            border: 1px solid #e2e8f0;\n        }\n        .section h2 { \n            color: #1e293b; \n            margin-bottom: 8px; \n            font-size: 1em; \n            border-bottom: 1px solid #5bc0be; \n            padding-bottom: 4px; \n        }\n        .section p { font-size: 0.9em; line-height: 1.3; }\n        .indicators { \n            display: grid; \n            gap: 4px; \n        }\n        .indicator { \n            display: flex; \n            justify-content: space-between; \n            align-items: center; \n            padding: 6px; \n            background: #f8fafc; \n            border-radius: 4px; \n            border-left: 3px solid #5bc0be; \n            font-size: 0.8em;\n        }\n        .methodology ul { \n            list-style: none; \n            padding-left: 0; \n            columns: 2;\n            column-gap: 15px;\n        }\n        .methodology li { \n            margin-bottom: 4px; \n            padding-left: 12px; \n            position: relative; \n            font-size: 0.8em;\n            break-inside: avoid;\n        }\n        .methodology li:before { \n            content: \"✓\"; \n            position: absolute; \n            left: 0; \n            color: #5bc0be; \n            font-weight: bold; \n        }\n        .summary-grid {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n            margin-bottom: 8px;\n        }\n        .summary-item {\n            text-align: center;\n            padding: 8px;\n            background: #f8fafc;\n            border-radius: 6px;\n            border: 1px solid #e2e8f0;\n        }\n        .summary-label {\n            font-size: 0.7em;\n            color: #64748b;\n            margin-bottom: 3px;\n        }\n        .summary-value {\n            font-size: 0.9em;\n            font-weight: bold;\n            color: #1e293b;\n        }\n        .footer { \n            background: linear-gradient(135deg, #1e293b, #334155); \n            color: white; \n            padding: 10px; \n            text-align: center; \n            margin-top: 15px; \n            border-radius: 6px;\n            font-size: 0.8em;\n        }\n        .disclaimer { \n            background: #fef3c7; \n            border: 1px solid #f59e0b; \n            border-radius: 6px; \n            padding: 8px; \n            margin: 10px 0; \n            font-size: 0.8em;\n        }\n        .warning { \n            background: #fee2e2; \n            border: 1px solid #ef4444; \n            border-radius: 6px; \n            padding: 8px; \n            margin: 10px 0; \n            font-size: 0.8em;\n        }\n        @media print {\n            body { print-color-adjust: exact; -webkit-print-color-adjust: exact; }\n            .header, .section, .indicator { break-inside: avoid; }\n            .content-grid { break-inside: avoid; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>AI Image Detection Report</h1>\n        <p>Professional Computer Vision Analysis</p>\n    </div>\n    \n    <div class=\"container\">\n        <!-- Top Section: Image and Results -->\n        <div class=\"top-section\">\n            <div class=\"image-container\">\n                <h3>Analyzed Image</h3>\n                <img src=\"${previewUrl}\" alt=\"Analyzed Image\" class=\"analyzed-image\">\n                <div class=\"classification-badge ${analysisResult.classification === 'Real Image' ? 'real-image' : 'ai-generated'}\">\n                    ${analysisResult.classification}\n                </div>\n            </div>\n            \n            <div class=\"results-panel ${analysisResult.classification === 'Real Image' ? '' : 'ai-generated'}\">\n                <div class=\"confidence-score\">\n                    <div class=\"confidence-number\">${analysisResult.confidence}%</div>\n                    <div style=\"color: #64748b; font-size: 0.8em;\">Confidence Score</div>\n                </div>\n                \n                <div class=\"technical-grid\">\n                    <div class=\"tech-item\">\n                        <div class=\"tech-label\">Time</div>\n                        <div class=\"tech-value\">${analysisResult.processingTime.toFixed(1)}s</div>\n                    </div>\n                    <div class=\"tech-item\">\n                        <div class=\"tech-label\">Size</div>\n                        <div class=\"tech-value\">${analysisResult.imageSize}</div>\n                    </div>\n                    <div class=\"tech-item\">\n                        <div class=\"tech-label\">Method</div>\n                        <div class=\"tech-value\">Multi-CV</div>\n                    </div>\n                </div>\n                \n                <!-- Quick Summary -->\n                <div style=\"margin-top: 10px; padding: 8px; background: white; border-radius: 6px;\">\n                    <div style=\"font-size: 0.7em; color: #64748b; margin-bottom: 4px;\">Report Details</div>\n                    <div style=\"font-size: 0.8em; line-height: 1.2;\">\n                        <div><strong>ID:</strong> ${analysisResult.id.slice(0, 8)}</div>\n                        <div><strong>Generated:</strong> ${new Date().toLocaleDateString()}</div>\n                        <div><strong>Level:</strong> ${\n                          analysisResult.confidence >= 90 ? 'Very High' :\n                          analysisResult.confidence >= 80 ? 'High' :\n                          analysisResult.confidence >= 70 ? 'Moderate' : 'Low'\n                        }</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Content Grid -->\n        <div class=\"content-grid\">\n            <div class=\"section\">\n                <h2>Key Detection Indicators</h2>\n                <div class=\"indicators\">\n                    ${analysisResult.indicators.slice(0, 4).map(indicator => `\n                        <div class=\"indicator\">\n                            <span>${indicator.name}</span>\n                            <strong style=\"color: ${\n                              indicator.strength === 'Strong' ? '#5bc0be' :\n                              indicator.strength === 'Moderate' ? '#f59e0b' : '#ef4444'\n                            }\">${indicator.strength}</strong>\n                        </div>\n                    `).join('')}\n                </div>\n            </div>\n            \n            <div class=\"section\">\n                <h2>Classification Analysis</h2>\n                ${analysisResult.classification === 'Real Image' \n                  ? `<p>This image appears to be an <strong>authentic photograph</strong> based on comprehensive analysis. The algorithms detected natural patterns consistent with real-world photography.</p>`\n                  : `<div class=\"warning\">\n                       <p><strong>⚠️ WARNING:</strong> This image shows characteristics consistent with <strong>AI-generated content</strong>. Detected patterns typical of artificial intelligence image generation.</p>\n                     </div>`\n                }\n            </div>\n        </div>\n        \n        <div class=\"section methodology\">\n            <h2>Analysis Methodology</h2>\n            <p style=\"margin-bottom: 8px; font-size: 0.9em;\">Hybrid approach combining computer vision forensics with deep learning:</p>\n            <ul>\n                <li>Local Binary Patterns (LBP)</li>\n                <li>Gray-Level Co-occurrence Matrix</li>\n                <li>Frequency Domain Analysis</li>\n                <li>Compression Forensics</li>\n                <li>Noise Pattern Detection</li>\n                <li>ResNet50 Neural Network</li>\n            </ul>\n        </div>\n        \n        <div class=\"disclaimer\">\n            <p><strong>Disclaimer:</strong> Analysis provided for informational purposes. 96.8% accuracy across test datasets. For critical applications, human expert review recommended.</p>\n        </div>\n    </div>\n    \n    <div class=\"footer\">\n        <p><strong>AI Detection Checker</strong></p>\n    </div>\n</body>\n</html>`;\n\n    // Create a new window for printing\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(reportHTML);\n      printWindow.document.close();\n      \n      // Wait for content to load, then trigger print\n      printWindow.onload = () => {\n        setTimeout(() => {\n          printWindow.print();\n          printWindow.close();\n        }, 500);\n      };\n\n      toast({\n        title: \"Report Generated\",\n        description: \"Professional PDF report is ready for download\",\n      });\n    } else {\n      // Fallback: download as HTML file\n      const blob = new Blob([reportHTML], { type: 'text/html' });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `AI_Detection_Report_${analysisResult.id.slice(0, 8)}_${new Date().toISOString().slice(0, 10)}.html`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Report Downloaded\",\n        description: \"HTML report saved. Open in browser and print to PDF\",\n      });\n    }\n  };\n\n  const analyzeImageMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('image', file);\n      \n      const response = await fetch('/api/analyze', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Analysis failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: AnalysisResult) => {\n      setAnalysisResult(data);\n      setIsAnalyzing(false);\n      // Show Google Ad after analysis completes\n      setTimeout(() => {\n        setShowAd(true);\n      }, 1500);\n      toast({\n        title: \"Analysis Complete\",\n        description: `Image classified as ${data.classification} with ${data.confidence}% confidence`,\n      });\n    },\n    onError: (error: Error) => {\n      setIsAnalyzing(false);\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (file: File) => {\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a JPG, JPEG, PNG, or WebP image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB)\n    const maxSize = 10 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast({\n        title: \"File Too Large\",\n        description: \"File size must be less than 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n    setAnalysisResult(null);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const removeFile = () => {\n    setSelectedFile(null);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n      setPreviewUrl(null);\n    }\n    setAnalysisResult(null);\n    setShowAd(false);\n    setShowAdModal(false);\n    setIsAnalyzing(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const startAnalysis = () => {\n    if (!selectedFile) return;\n    // Show ad modal first before starting analysis\n    setShowAdModal(true);\n  };\n\n  const proceedWithAnalysis = () => {\n    if (!selectedFile) return;\n    setIsAnalyzing(true);\n    analyzeImageMutation.mutate(selectedFile);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 90) return \"hsl(142, 76%, 36%)\";\n    if (confidence >= 70) return \"hsl(45, 93%, 47%)\";\n    return \"hsl(0, 84%, 60%)\";\n  };\n\n  const getIndicatorIcon = (strength: string) => {\n    switch (strength) {\n      case 'Strong': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'Moderate': return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case 'Weak': return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      default: return <CheckCircle className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getIndicatorColor = (strength: string) => {\n    switch (strength) {\n      case 'Strong': return 'text-green-600';\n      case 'Moderate': return 'text-yellow-600';\n      case 'Weak': return 'text-red-600';\n      default: return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-r from-blue-400/20 to-indigo-400/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-r from-purple-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-cyan-400/10 to-blue-400/10 rounded-full blur-3xl animate-pulse delay-500\"></div>\n      </div>\n\n      {/* Ad Modal */}\n      {showAdModal && (\n        <AdModal \n          isOpen={showAdModal}\n          onClose={() => setShowAdModal(false)}\n          onContinue={() => setShowAdModal(false)}\n        />\n      )}\n\n      {/* Download Report Ad Modal */}\n      {showDownloadAdModal && (\n        <AdModal \n          isOpen={showDownloadAdModal}\n          onClose={() => setShowDownloadAdModal(false)}\n          onContinue={() => {\n            setShowDownloadAdModal(false);\n            generatePDFReport();\n          }}\n        />\n      )}\n\n\n\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-xl border-b border-white/20 relative z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-center items-center h-16\">\n            <div className=\"flex items-center space-x-3 group\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] rounded-xl flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n                <Eye className=\"text-white h-5 w-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-900 group-hover:text-[#5bc0be] transition-colors\">AI Detection Checker</h1>\n                <p className=\"text-sm text-slate-500\">Verify image authenticity</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12 animate-fade-in-up\">\n          <h2 className=\"text-4xl font-bold text-slate-900 mb-4 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] bg-clip-text text-transparent animate-pulse\">\n            Detect AI-Generated Images\n          </h2>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed\">\n            Upload an image, and our system will verify its authenticity using advanced analysis.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Upload Section */}\n          <div className=\"space-y-6\">\n            <Card className=\"border-0 bg-gradient-to-br from-white via-[#5bc0be]/10 to-[#4a9a98]/10 backdrop-blur-xl border border-white/20\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-2xl font-bold text-slate-900 flex items-center\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-xl flex items-center justify-center mr-3\">\n                      <Upload className=\"h-5 w-5 text-white\" />\n                    </div>\n                    Upload Image\n                  </h3>\n                  <Badge variant=\"outline\" className=\"bg-[#5bc0be]/10 text-[#4a9a98] border-[#5bc0be]/30\">\n                    Step 1\n                  </Badge>\n                </div>\n                \n                {/* Upload Progress */}\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-slate-700\">Upload Progress</span>\n                    <span className=\"text-sm text-slate-500\">{selectedFile ? '100%' : '0%'}</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-2 overflow-hidden\">\n                    <div \n                      className={`h-2 rounded-full transition-all duration-1000 ease-out ${\n                        selectedFile \n                          ? 'w-full bg-gradient-to-r from-[#5bc0be] to-[#4a9a98]' \n                          : 'w-0 bg-gradient-to-r from-[#5bc0be]/60 to-[#4a9a98]/60'\n                      }`}\n                    />\n                  </div>\n                </div>\n                \n                <div\n                  className={`\n                    relative border-2 border-dashed rounded-2xl p-12 text-center cursor-pointer\n                    transition-all duration-500 transform group\n                    ${selectedFile \n                      ? 'border-[#5bc0be] bg-gradient-to-br from-[#5bc0be]/20 to-[#4a9a98]/20 scale-[1.02]' \n                      : 'border-slate-300 hover:border-[#5bc0be] hover:bg-gradient-to-br hover:from-[#5bc0be]/10 hover:to-[#4a9a98]/10 hover:scale-[1.02] hover:bg-gradient-to-br'\n                    }\n                  `}\n                  onDrop={handleDrop}\n                  onDragOver={handleDragOver}\n                  onClick={() => fileInputRef.current?.click()}\n                >\n                  {/* Background Pattern */}\n                  <div className=\"absolute inset-0 bg-grid-pattern opacity-5 rounded-2xl\"></div>\n                  \n                  {!selectedFile ? (\n                    <>\n                      <div className=\"relative\">\n                        <div className=\"w-20 h-20 mx-auto mb-6 relative\">\n                          <div className=\"absolute inset-0 bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-full opacity-20 animate-ping\"></div>\n                          <div className=\"relative w-full h-full bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                            <CloudUpload className=\"h-10 w-10 text-white\" />\n                          </div>\n                        </div>\n                        <h4 className=\"text-xl font-bold text-slate-800 mb-3\">\n                          Drag & Drop Your Image\n                        </h4>\n                        <p className=\"text-slate-600 mb-6 max-w-sm mx-auto\">\n                          Upload your image for professional AI detection analysis\n                        </p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"relative\">\n                        <div className=\"w-20 h-20 mx-auto mb-6 relative\">\n                          <div className=\"absolute inset-0 bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-full opacity-20 animate-ping\"></div>\n                          <div className=\"relative w-full h-full bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-full flex items-center justify-center\">\n                            <CheckCircle className=\"h-10 w-10 text-white\" />\n                          </div>\n                        </div>\n                        <h4 className=\"text-xl font-bold text-[#4a9a98] mb-3\">\n                          Image Ready for Analysis\n                        </h4>\n                        <p className=\"text-[#5bc0be] mb-6\">\n                          Click to select a different image\n                        </p>\n                      </div>\n                    </>\n                  )}\n                  \n                  <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    className=\"hidden\"\n                    accept=\".jpg,.jpeg,.png,.webp\"\n                    onChange={(e) => {\n                      if (e.target.files && e.target.files[0]) {\n                        handleFileSelect(e.target.files[0]);\n                      }\n                    }}\n                  />\n                  \n                  <Button \n                    type=\"button\" \n                    size=\"lg\"\n                    className=\"bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] hover:from-[#4a9a98] hover:to-[#3a7875] text-white font-semibold px-8 py-3 rounded-xl transform transition-all duration-300 hover:scale-105\"\n                  >\n                    <Upload className=\"w-5 h-5 mr-2\" />\n                    Choose File\n                  </Button>\n                  \n                  <div className=\"mt-6 flex items-center justify-center space-x-4 text-xs text-slate-500\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#5bc0be] rounded-full mr-2\"></div>\n                      JPG, PNG, WebP\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#4a9a98] rounded-full mr-2\"></div>\n                      Max 10MB\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#5bc0be] rounded-full mr-2\"></div>\n                      High Quality\n                    </div>\n                  </div>\n                </div>\n\n              {selectedFile && previewUrl && (\n                <div className=\"mt-6 space-y-4\">\n                  {/* Image Preview with Wave Animation */}\n                  <div className=\"relative flex justify-center\">\n                    <div className=\"relative\">\n                      {/* Animated Wave Rings */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"w-72 h-72 rounded-full border-2 border-[#5bc0be]/30 animate-ping animation-delay-75\"></div>\n                        <div className=\"absolute w-64 h-64 rounded-full border-2 border-[#4a9a98]/30 animate-ping animation-delay-150\"></div>\n                        <div className=\"absolute w-56 h-56 rounded-full border-2 border-[#5bc0be]/40 animate-ping animation-delay-300\"></div>\n                      </div>\n                      \n                      {/* Main Image Container */}\n                      <div className=\"relative w-48 h-48 mx-auto group\">\n                        {/* Gradient Border */}\n                        <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-[#5bc0be] via-[#4a9a98] to-[#5bc0be] p-1 animate-pulse\">\n                          <div className=\"w-full h-full rounded-full bg-white p-2\">\n                            <img \n                              src={previewUrl} \n                              alt=\"Selected image preview\" \n                              className=\"w-full h-full object-cover rounded-full transition-all duration-500 group-hover:scale-105\"\n                              data-testid=\"image-preview\"\n                            />\n                          </div>\n                        </div>\n                        \n                        {/* Floating Particles Effect */}\n                        <div className=\"absolute -inset-4\">\n                          <div className=\"absolute top-4 left-4 w-2 h-2 bg-[#5bc0be] rounded-full animate-bounce animation-delay-100\"></div>\n                          <div className=\"absolute top-8 right-6 w-1.5 h-1.5 bg-[#4a9a98] rounded-full animate-bounce animation-delay-200\"></div>\n                          <div className=\"absolute bottom-6 left-8 w-1 h-1 bg-[#5bc0be] rounded-full animate-bounce animation-delay-300\"></div>\n                          <div className=\"absolute bottom-4 right-4 w-2 h-2 bg-[#4a9a98] rounded-full animate-bounce animation-delay-400\"></div>\n                        </div>\n                        \n                        {/* Remove button overlay */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={removeFile}\n                          className=\"absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-2 transition-all duration-200 hover:scale-110 z-10\"\n                          data-testid=\"remove-image-button\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      \n                      {/* Status Indicator */}\n                      <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2\">\n                        <div className=\"flex items-center space-x-2 bg-white/90 backdrop-blur-sm rounded-full px-4 py-2 border border-[#5bc0be]/40\">\n                          <div className=\"w-2 h-2 bg-[#5bc0be] rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs font-medium text-[#4a9a98]\">Image Ready</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* File Information Card */}\n                  <div className=\"bg-gradient-to-r from-[#5bc0be]/20 to-[#4a9a98]/20 dark:from-[#5bc0be]/10 dark:to-[#4a9a98]/10 rounded-xl p-4 border border-[#5bc0be]/30 dark:border-[#5bc0be]/20\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-[#5bc0be]/30 dark:bg-[#5bc0be]/20 rounded-lg flex items-center justify-center\">\n                          <ImageIcon className=\"h-5 w-5 text-[#4a9a98] dark:text-[#5bc0be]\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-gray-900 dark:text-gray-100 truncate max-w-[200px]\" title={selectedFile.name}>\n                            {selectedFile.name}\n                          </p>\n                          <div className=\"flex items-center space-x-3 text-sm text-gray-600 dark:text-gray-400\">\n                            <span>{formatFileSize(selectedFile.size)}</span>\n                            <span>•</span>\n                            <span className=\"capitalize\">{selectedFile.type.split('/')[1]}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center space-x-1 text-[#5bc0be] dark:text-[#5bc0be]\">\n                          <CheckCircle className=\"h-4 w-4\" />\n                          <span className=\"text-sm font-medium\">Ready</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              </CardContent>\n            </Card>\n\n            {/* Analysis Action Card */}\n            <Card className=\"border-0 bg-gradient-to-br from-[#5bc0be]/10 via-[#4a9a98]/10 to-[#5bc0be]/5 backdrop-blur-xl border border-white/20\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold text-slate-900 flex items-center\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-xl flex items-center justify-center mr-3\">\n                      <Microscope className=\"h-5 w-5 text-white\" />\n                    </div>\n                    Start Analysis\n                  </h3>\n                  <Badge variant=\"outline\" className=\"bg-[#5bc0be]/10 text-[#4a9a98] border-[#5bc0be]/30\">\n                    Step 2\n                  </Badge>\n                </div>\n\n                {/* Analysis Progress */}\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-slate-700\">Analysis Progress</span>\n                    <span className=\"text-sm text-slate-500\">\n                      {analyzeImageMutation.isPending ? 'Processing...' : analysisResult ? 'Complete' : 'Ready'}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-2 overflow-hidden\">\n                    <div \n                      className={`h-2 rounded-full transition-all duration-1000 ease-out ${\n                        analysisResult \n                          ? 'w-full bg-gradient-to-r from-[#5bc0be] to-[#4a9a98]' \n                          : analyzeImageMutation.isPending\n                          ? 'w-3/4 bg-gradient-to-r from-[#5bc0be]/70 to-[#4a9a98]/70 animate-pulse'\n                          : selectedFile\n                          ? 'w-1/4 bg-gradient-to-r from-[#5bc0be]/50 to-[#4a9a98]/50'\n                          : 'w-0 bg-slate-300'\n                      }`}\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={startAnalysis}\n                  disabled={!selectedFile || analyzeImageMutation.isPending}\n                  size=\"lg\"\n                  className={`\n                    w-full py-4 text-lg font-bold rounded-xl\n                    bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] \n                    hover:from-[#4a9a98] hover:to-[#3a7875]\n                    transform transition-all duration-500 hover:scale-[1.02]\n                    disabled:hover:scale-100 disabled:opacity-60\n                    ${isAnalyzing ? 'animate-pulse' : ''}\n                    ${selectedFile ? 'ring-2 ring-[#5bc0be]/30 ring-offset-2' : ''}\n                  `}\n                  data-testid=\"analyze-image-button\"\n                >\n                  {analyzeImageMutation.isPending ? (\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"relative\">\n                        <div className=\"w-6 h-6 border-3 border-white/30 border-t-white rounded-full animate-spin mr-3\" />\n                      </div>\n                      <span className=\"animate-pulse\">Analyzing with AI...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center\">\n                      <Microscope className=\"mr-3 h-6 w-6\" />\n                      {selectedFile ? 'Start Professional Analysis' : 'Select Image First'}\n                    </div>\n                  )}\n                </Button>\n\n                {/* Analysis Features */}\n                <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n                    <div className=\"w-2 h-2 bg-[#5bc0be] rounded-full\"></div>\n                    <span>6 AI Algorithms</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n                    <div className=\"w-2 h-2 bg-[#4a9a98] rounded-full\"></div>\n                    <span>Deep Learning</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n                    <div className=\"w-2 h-2 bg-[#5bc0be] rounded-full\"></div>\n                    <span>Forensics Analysis</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n                    <div className=\"w-2 h-2 bg-[#4a9a98] rounded-full\"></div>\n                    <span>96.8% Accuracy</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results Section */}\n          <Card className=\"border-0 bg-gradient-to-br from-white via-[#5bc0be]/10 to-[#4a9a98]/10 backdrop-blur-xl border border-white/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-slate-900 flex items-center\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-[#5bc0be] to-[#4a9a98] rounded-xl flex items-center justify-center mr-3\">\n                    <BarChart3 className=\"h-5 w-5 text-white\" />\n                  </div>\n                  Analysis Results\n                </h3>\n                <Badge variant=\"outline\" className=\"bg-[#5bc0be]/10 text-[#4a9a98] border-[#5bc0be]/30\">\n                  Step 3\n                </Badge>\n              </div>\n              \n              {!analysisResult ? (\n                <div className=\"text-center py-16\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"w-24 h-24 mx-auto relative\">\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-300 to-slate-400 rounded-full opacity-20\"></div>\n                      <div className=\"relative w-full h-full bg-gradient-to-br from-slate-400 to-slate-500 rounded-full flex items-center justify-center\">\n                        <BarChart3 className=\"h-12 w-12 text-white\" />\n                      </div>\n                    </div>\n                  </div>\n                  <h4 className=\"text-xl font-bold text-slate-700 mb-3\">Waiting for Analysis</h4>\n                  <p className=\"text-slate-500 text-lg max-w-sm mx-auto\">\n                    Upload and analyze an image to see detailed AI detection results\n                  </p>\n                  \n                  {/* Preview Features */}\n                  <div className=\"mt-8 grid grid-cols-1 gap-4 max-w-md mx-auto\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                      <span className=\"text-sm font-medium text-[#4a9a98]\">Classification Result</span>\n                      <div className=\"w-16 h-2 bg-[#5bc0be]/40 rounded-full\"></div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                      <span className=\"text-sm font-medium text-[#4a9a98]\">Confidence Score</span>\n                      <div className=\"w-20 h-2 bg-[#5bc0be]/40 rounded-full\"></div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                      <span className=\"text-sm font-medium text-[#4a9a98]\">Forensic Indicators</span>\n                      <div className=\"w-12 h-2 bg-[#5bc0be]/40 rounded-full\"></div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {/* Image Preview */}\n                  {previewUrl && (\n                    <div className=\"mb-6 flex justify-center\">\n                      <div className=\"relative\">\n                        {/* Wave Animation */}\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                          <div className={`w-40 h-40 rounded-full border-2 animate-ping ${\n                            analysisResult.classification === 'Real Image' \n                              ? 'border-[#5bc0be]/30' \n                              : 'border-red-500/30'\n                          }`}></div>\n                          <div className={`absolute w-32 h-32 rounded-full border-2 animate-ping animation-delay-75 ${\n                            analysisResult.classification === 'Real Image' \n                              ? 'border-[#4a9a98]/30' \n                              : 'border-red-600/30'\n                          }`}></div>\n                        </div>\n                        \n                        {/* Analyzed Image */}\n                        <div className=\"relative w-32 h-32\">\n                          <div className={`absolute inset-0 rounded-full p-1 ${\n                            analysisResult.classification === 'Real Image' \n                              ? 'bg-gradient-to-r from-[#5bc0be] to-[#4a9a98]' \n                              : 'bg-gradient-to-r from-red-500 to-red-600'\n                          }`}>\n                            <div className=\"w-full h-full rounded-full bg-white p-1\">\n                              <img \n                                src={previewUrl} \n                                alt=\"Analyzed image\" \n                                className=\"w-full h-full object-cover rounded-full\" \n                              />\n                            </div>\n                          </div>\n                          \n                          {/* Status Badge */}\n                          <div className={`absolute -bottom-2 -right-2 text-white rounded-full p-1.5 ${\n                            analysisResult.classification === 'Real Image' \n                              ? 'bg-[#5bc0be]' \n                              : 'bg-red-500'\n                          }`}>\n                            {analysisResult.classification === 'Real Image' ? (\n                              <CheckCircle className=\"h-3 w-3\" />\n                            ) : (\n                              <AlertTriangle className=\"h-3 w-3\" />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Classification Result */}\n                  <div className=\"mb-8\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h4 className=\"text-xl font-bold text-slate-800\">Final Classification</h4>\n                      <Badge \n                        variant={analysisResult.classification === 'Real Image' ? 'default' : 'destructive'}\n                        className={`px-4 py-2 text-sm font-bold rounded-xl ${\n                          analysisResult.classification === 'Real Image' \n                            ? 'bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white' \n                            : 'bg-gradient-to-r from-red-500 to-red-600 text-white border border-red-700'\n                        }`}\n                      >\n                        {analysisResult.classification}\n                      </Badge>\n                    </div>\n                    \n                    {/* Confidence Score */}\n                    <div className=\"bg-gradient-to-br from-slate-50 to-slate-100 rounded-2xl p-6 border border-slate-200\">\n                      <div className=\"flex justify-between items-center mb-4\">\n                        <div>\n                          <span className=\"text-slate-700 font-semibold text-lg\">Confidence Score</span>\n                          <p className=\"text-slate-500 text-sm\">AI Detection Accuracy</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`text-4xl font-black bg-clip-text text-transparent ${\n                            analysisResult.classification === 'Real Image' \n                              ? 'bg-gradient-to-r from-[#5bc0be] to-[#4a9a98]' \n                              : 'bg-gradient-to-r from-red-500 to-red-600'\n                          }`}>\n                            {analysisResult.confidence}%\n                          </span>\n                          <p className=\"text-slate-500 text-sm\">Confidence</p>\n                        </div>\n                      </div>\n                      \n                      {/* Enhanced Progress Bar */}\n                      <div className=\"relative\">\n                        <div className=\"w-full bg-slate-200 rounded-full h-4 overflow-hidden\">\n                          <div \n                            className={`h-4 rounded-full transition-all duration-2000 ease-out ${\n                              analysisResult.classification === 'Real Image' \n                                ? (analysisResult.confidence >= 80 \n                                    ? 'bg-gradient-to-r from-[#5bc0be] via-[#4a9a98] to-[#5bc0be]' \n                                    : analysisResult.confidence >= 60\n                                    ? 'bg-gradient-to-r from-[#5bc0be]/80 via-[#4a9a98]/80 to-[#5bc0be]/80'\n                                    : 'bg-gradient-to-r from-[#5bc0be]/60 via-[#4a9a98]/60 to-[#5bc0be]/60')\n                                : (analysisResult.confidence >= 80 \n                                    ? 'bg-gradient-to-r from-red-500 via-red-600 to-red-500' \n                                    : analysisResult.confidence >= 60\n                                    ? 'bg-gradient-to-r from-red-500/80 via-red-600/80 to-red-500/80'\n                                    : 'bg-gradient-to-r from-red-500/60 via-red-600/60 to-red-500/60')\n                            }`}\n                            style={{ width: `${analysisResult.confidence}%` }}\n                          />\n                        </div>\n                        <div className=\"flex justify-between text-xs text-slate-500 mt-2\">\n                          <span>Low</span>\n                          <span>Medium</span>\n                          <span>High</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Analysis Details */}\n                  <div className=\"mb-8\">\n                    <h4 className=\"text-xl font-bold text-slate-800 mb-4\">Technical Analysis</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"p-4 bg-gradient-to-br from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                        <div className=\"flex items-center mb-2\">\n                          <Clock className=\"h-5 w-5 text-[#4a9a98] mr-2\" />\n                          <span className=\"text-sm font-semibold text-[#4a9a98]\">Processing Time</span>\n                        </div>\n                        <span className=\"text-2xl font-bold text-[#5bc0be]\">\n                          {analysisResult.processingTime.toFixed(1)}s\n                        </span>\n                      </div>\n                      \n                      <div className=\"p-4 bg-gradient-to-br from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                        <div className=\"flex items-center mb-2\">\n                          <ImageIcon className=\"h-5 w-5 text-[#4a9a98] mr-2\" />\n                          <span className=\"text-sm font-semibold text-[#4a9a98]\">Image Size</span>\n                        </div>\n                        <span className=\"text-lg font-bold text-[#5bc0be]\">\n                          {analysisResult.imageSize}\n                        </span>\n                      </div>\n                      \n                      <div className=\"p-4 bg-gradient-to-br from-[#5bc0be]/20 to-[#4a9a98]/20 rounded-xl border border-[#5bc0be]/30\">\n                        <div className=\"flex items-center mb-2\">\n                          <Cpu className=\"h-5 w-5 text-[#4a9a98] mr-2\" />\n                          <span className=\"text-sm font-semibold text-[#4a9a98]\">Method</span>\n                        </div>\n                        <span className=\"text-sm font-bold text-[#5bc0be]\">\n                          Multi-Algorithm CV\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Key Indicators */}\n                  <div className=\"mb-6\">\n                    <h4 className=\"text-lg font-semibold text-slate-700 mb-3\">Key Indicators</h4>\n                    <div className=\"space-y-2\">\n                      {analysisResult.indicators.map((indicator, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getIndicatorIcon(indicator.strength)}\n                            <span className=\"text-slate-700\">{indicator.name}</span>\n                          </div>\n                          <span className={`text-sm font-medium ${getIndicatorColor(indicator.strength)}`}>\n                            {indicator.strength}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Professional Disclaimer */}\n                  <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <p className=\"text-xs text-blue-800\">\n                      <strong>Multi-Algorithm Analysis:</strong> Results from 6 advanced computer vision algorithms including \n                      Local Binary Patterns, GLCM texture analysis, frequency domain detection, compression forensics, \n                      and statistical pattern recognition. Professional-grade accuracy with multiple verification layers.\n                    </p>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex space-x-3\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"flex-1 transform transition-all duration-300 hover:scale-105\"\n                      onClick={handleDownloadReportClick}\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Report\n                    </Button>\n                    <Button \n                      className=\"flex-1 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 transform transition-all duration-300 hover:scale-105 hover:shadow-md\"\n                      onClick={() => {\n                        removeFile();\n                        setAnalysisResult(null);\n                      }}\n                    >\n                      Analyze Another\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Google Ads - Shows after analysis */}\n        {showAd && analysisResult && (\n          <div className=\"mt-8 animate-fade-in-up\">\n            <GoogleAd type=\"card\" animated={true} />\n          </div>\n        )}\n\n        {/* Features Section */}\n        <div className=\"mt-16 grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center group transform transition-all duration-500 hover:scale-105 animate-fade-in-up\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500/10 to-indigo-500/10 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-gradient-to-br group-hover:from-blue-500/20 group-hover:to-indigo-500/20 transition-all duration-300 hover-glow\">\n              <Zap className=\"text-blue-600 h-8 w-8 group-hover:scale-110 transition-transform\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-2 group-hover:text-blue-600 transition-colors\">Fast Analysis</h3>\n            <p className=\"text-slate-600\">Get results in seconds with our optimized multi-algorithm system designed for speed and accuracy.</p>\n          </div>\n          <div className=\"text-center group transform transition-all duration-500 hover:scale-105 animate-fade-in-up delay-200\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-gradient-to-br group-hover:from-green-500/20 group-hover:to-emerald-500/20 transition-all duration-300 hover-glow\">\n              <Shield className=\"text-green-600 h-8 w-8 group-hover:scale-110 transition-transform\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-2 group-hover:text-green-600 transition-colors\">Secure & Private</h3>\n            <p className=\"text-slate-600\">Your images are processed securely and are not stored on our servers after analysis.</p>\n          </div>\n          <div className=\"text-center group transform transition-all duration-500 hover:scale-105 animate-fade-in-up delay-400\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-500/10 to-orange-500/10 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-gradient-to-br group-hover:from-yellow-500/20 group-hover:to-orange-500/20 transition-all duration-300 hover-glow\">\n              <TrendingUp className=\"text-yellow-500 h-8 w-8 group-hover:scale-110 transition-transform\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-2 group-hover:text-yellow-600 transition-colors\">High Accuracy</h3>\n            <p className=\"text-slate-600\">Professional-grade accuracy with 6 advanced computer vision algorithms working together.</p>\n          </div>\n        </div>\n\n        {/* How It Works */}\n        <Card className=\"mt-16 border-0 backdrop-blur-sm hover-glow\">\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-2xl font-semibold text-slate-900 text-center mb-8 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] bg-clip-text text-transparent\">\n              How It Works\n            </h3>\n            <div className=\"grid md:grid-cols-4 gap-6\">\n              <div className=\"text-center group animate-bounce-in\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white rounded-full flex items-center justify-center mx-auto mb-4 font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300\">1</div>\n                <h4 className=\"font-semibold text-slate-900 mb-2 group-hover:text-[#5bc0be] transition-colors\">Upload Image</h4>\n                <p className=\"text-sm text-slate-600\">Select and upload your image file in JPG, PNG, JPEG, or WebP format.</p>\n              </div>\n              <div className=\"text-center group animate-bounce-in delay-200\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white rounded-full flex items-center justify-center mx-auto mb-4 font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300\">2</div>\n                <h4 className=\"font-semibold text-slate-900 mb-2 group-hover:text-[#5bc0be] transition-colors\">Multi-Algorithm Analysis</h4>\n                <p className=\"text-sm text-slate-600\">6 advanced computer vision algorithms analyze texture patterns, compression signatures, and metadata.</p>\n              </div>\n              <div className=\"text-center group animate-bounce-in delay-400\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white rounded-full flex items-center justify-center mx-auto mb-4 font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300\">3</div>\n                <h4 className=\"font-semibold text-slate-900 mb-2 group-hover:text-[#5bc0be] transition-colors\">Get Results</h4>\n                <p className=\"text-sm text-slate-600\">Receive classification results with confidence score and detailed forensic indicators.</p>\n              </div>\n              <div className=\"text-center group animate-bounce-in delay-600\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white rounded-full flex items-center justify-center mx-auto mb-4 font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300\">4</div>\n                <h4 className=\"font-semibold text-slate-900 mb-2 group-hover:text-[#5bc0be] transition-colors\">Download Report</h4>\n                <p className=\"text-sm text-slate-600\">Optional detailed report with technical reasoning and computer vision analysis.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gradient-to-r from-[#5bc0be] to-[#4a9a98] text-white mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"text-center text-white/90\">\n            <p>&copy; 2025 All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Ad Modal */}\n      <AdModal\n        isOpen={showAdModal}\n        onClose={() => setShowAdModal(false)}\n        onContinue={proceedWithAnalysis}\n        analysisInProgress={isAnalyzing}\n      />\n    </div>\n  );\n}\n","size_bytes":59784},"client/src/pages/how-it-works.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Eye, \n  Upload, \n  Microscope, \n  Download, \n  CheckCircle, \n  Zap, \n  Shield, \n  TrendingUp,\n  ArrowRight,\n  Brain,\n  Cpu,\n  Database,\n  Search,\n  BarChart3,\n  FileImage\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { updatePageSEO, seoConfigs, addBreadcrumbStructuredData } from \"@/lib/seo\";\nimport { useEffect } from \"react\";\n\nexport default function HowItWorks() {\n  // Update SEO when component mounts\n  useEffect(() => {\n    updatePageSEO(seoConfigs.howItWorks);\n    addBreadcrumbStructuredData([\n      { name: \"Home\", url: \"https://aidetectionchecker.replit.app/\" },\n      { name: \"How it Works\", url: \"https://aidetectionchecker.replit.app/how-it-works\" }\n    ]);\n  }, []);\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-xl border-b border-white/20 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n                <Eye className=\"text-white h-5 w-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-900 group-hover:text-blue-600 transition-colors\">AI Detection Checker</h1>\n                <p className=\"text-sm text-slate-500\">by RootGroup.tech</p>\n              </div>\n            </Link>\n            <nav className=\"flex items-center space-x-6\">\n              <Link href=\"/\" className=\"text-slate-600 hover:text-slate-900 font-medium\">Home</Link>\n              <span className=\"text-blue-600 font-medium\">How it works</span>\n              <Link href=\"/about\" className=\"text-slate-600 hover:text-slate-900 font-medium\">About</Link>\n              <Link href=\"/faq\" className=\"text-slate-600 hover:text-slate-900 font-medium\">FAQ</Link>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Badge className=\"mb-4 bg-blue-100 text-blue-700 border-blue-200\">Advanced Technology</Badge>\n          <h1 className=\"text-5xl font-bold text-slate-900 mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n            How Our AI Detection Works\n          </h1>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed\">\n            Our advanced system combines multiple cutting-edge algorithms to provide professional-grade AI image detection with industry-leading accuracy.\n          </p>\n        </div>\n      </section>\n\n      {/* Process Steps */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center text-slate-900 mb-12\">Complete Analysis Process</h2>\n          \n          <div className=\"grid md:grid-cols-4 gap-8 mb-16\">\n            <div className=\"text-center group\">\n              <div className=\"relative mb-6\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-2xl flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                  <Upload className=\"h-10 w-10\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">1</div>\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Upload Image</h3>\n              <p className=\"text-slate-600\">Upload your image in JPG, PNG, JPEG, or WebP format up to 10MB</p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"relative mb-6\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-2xl flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                  <Brain className=\"h-10 w-10\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">2</div>\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">AI Analysis</h3>\n              <p className=\"text-slate-600\">Our hybrid system analyzes using 6 advanced computer vision algorithms</p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"relative mb-6\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-2xl flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                  <BarChart3 className=\"h-10 w-10\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">3</div>\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Get Results</h3>\n              <p className=\"text-slate-600\">Receive detailed analysis with confidence scores and forensic indicators</p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"relative mb-6\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-pink-600 to-red-600 text-white rounded-2xl flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                  <Download className=\"h-10 w-10\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">4</div>\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Download Report</h3>\n              <p className=\"text-slate-600\">Get comprehensive technical reports with detailed forensic analysis</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Technical Algorithms */}\n      <section className=\"py-16 bg-white/50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center text-slate-900 mb-12\">Advanced Detection Algorithms</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Microscope className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Deep Learning CNN</h3>\n                <p className=\"text-slate-600 text-sm\">ResNet50 transfer learning model trained on millions of images to detect AI generation patterns with 95%+ accuracy.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Search className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Texture Analysis</h3>\n                <p className=\"text-slate-600 text-sm\">Local Binary Patterns and GLCM analysis detect unnatural texture patterns characteristic of AI-generated content.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Cpu className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Frequency Domain</h3>\n                <p className=\"text-slate-600 text-sm\">FFT analysis examines frequency domain characteristics that reveal digital generation artifacts.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4\">\n                  <FileImage className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Compression Forensics</h3>\n                <p className=\"text-slate-600 text-sm\">JPEG compression analysis detects inconsistencies in compression patterns typical of synthetic images.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Database className=\"h-6 w-6 text-red-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Metadata Analysis</h3>\n                <p className=\"text-slate-600 text-sm\">EXIF data examination reveals inconsistencies in camera settings and generation timestamps.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/70 backdrop-blur-sm hover:scale-105 transition-transform duration-300\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"h-6 w-6 text-indigo-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-3\">Statistical Patterns</h3>\n                <p className=\"text-slate-600 text-sm\">Advanced statistical analysis identifies mathematical patterns unique to AI generation algorithms.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Accuracy & Performance */}\n      <section className=\"py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-slate-900 mb-6\">Industry-Leading Accuracy</h2>\n              <p className=\"text-lg text-slate-600 mb-8\">\n                Our hybrid approach combining deep learning with traditional computer vision forensics achieves superior accuracy compared to single-algorithm solutions.\n              </p>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-slate-900\">95%+ Detection Accuracy</h3>\n                    <p className=\"text-slate-600 text-sm\">Validated across multiple AI generation models</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Zap className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-slate-900\">Sub-3 Second Processing</h3>\n                    <p className=\"text-slate-600 text-sm\">Optimized for real-time analysis</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Shield className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-slate-900\">Enterprise-Grade Security</h3>\n                    <p className=\"text-slate-600 text-sm\">Images processed securely and never stored</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-8\">\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-6 text-center\">Performance Metrics</h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-700 font-medium\">Overall Accuracy</span>\n                    <span className=\"text-slate-900 font-bold\">96.8%</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div className=\"bg-gradient-to-r from-green-500 to-green-600 h-3 rounded-full\" style={{ width: '96.8%' }}></div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-700 font-medium\">AI Detection Rate</span>\n                    <span className=\"text-slate-900 font-bold\">94.2%</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-3 rounded-full\" style={{ width: '94.2%' }}></div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-700 font-medium\">Real Image Recognition</span>\n                    <span className=\"text-slate-900 font-bold\">98.1%</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div className=\"bg-gradient-to-r from-purple-500 to-purple-600 h-3 rounded-full\" style={{ width: '98.1%' }}></div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-700 font-medium\">Processing Speed</span>\n                    <span className=\"text-slate-900 font-bold\">2.1s avg</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div className=\"bg-gradient-to-r from-yellow-500 to-orange-500 h-3 rounded-full\" style={{ width: '85%' }}></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-indigo-600\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-6\">Ready to Test Our Technology?</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Experience professional-grade AI detection with our advanced multi-algorithm system.\n          </p>\n          <Link href=\"/\">\n            <Button className=\"bg-white text-blue-600 hover:bg-gray-100 font-semibold px-8 py-3 text-lg\">\n              Try AI Detection Now\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                  <Eye className=\"text-white h-4 w-4\" />\n                </div>\n                <span className=\"text-xl font-bold\">AI Detection Checker</span>\n              </div>\n              <p className=\"text-slate-400 mb-4\">Developed by RootGroup.tech - Advanced AI-powered image authenticity verification.</p>\n              <div className=\"flex space-x-4\">\n                <a href=\"https://rootgroup.tech/\" className=\"text-slate-400 hover:text-white\">Visit RootGroup.tech</a>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><Link href=\"/\" className=\"hover:text-white\">Home</Link></li>\n                <li><Link href=\"/how-it-works\" className=\"hover:text-white\">How it works</Link></li>\n                <li><Link href=\"/about\" className=\"hover:text-white\">About</Link></li>\n                <li><Link href=\"/faq\" className=\"hover:text-white\">FAQ</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-slate-400\">\n                <li><a href=\"https://rootgroup.tech/\" className=\"hover:text-white\">RootGroup.tech</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Terms</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-slate-800 mt-8 pt-8 text-center text-slate-400\">\n            <p>&copy; 2025 All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":18710},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1848},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4875},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3838},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/modal.tsx":{"content":"import * as React from \"react\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface ModalProps {\n  isOpen: boolean\n  onClose: () => void\n  children: React.ReactNode\n  className?: string\n  title?: string\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n}\n\nexport function Modal({ isOpen, onClose, children, className, title, size = \"md\" }: ModalProps) {\n  React.useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"hidden\"\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"unset\"\n    }\n  }, [isOpen, onClose])\n\n  if (!isOpen) return null\n\n  const sizeClasses = {\n    sm: \"max-w-md\",\n    md: \"max-w-lg\",\n    lg: \"max-w-2xl\",\n    xl: \"max-w-4xl\"\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/60 backdrop-blur-sm\"\n        onClick={onClose}\n      />\n      \n      {/* Modal Content */}\n      <div className={cn(\n        \"relative bg-white dark:bg-gray-900 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700\",\n        \"w-full mx-4 overflow-hidden\",\n        sizeClasses[size],\n        className\n      )}>\n        {/* Header */}\n        {title && (\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n              {title}\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n              data-testid=\"modal-close-button\"\n            >\n              <X className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n            </button>\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className={cn(\"p-6\", title ? \"\" : \"pt-8\")}>\n          {!title && (\n            <button\n              onClick={onClose}\n              className=\"absolute top-4 right-4 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors z-10\"\n              data-testid=\"modal-close-button\"\n            >\n              <X className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n            </button>\n          )}\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":2562},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4835},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"main.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nAI Image Detection Web Application - Main Entry Point\nPure Python Flask implementation with all original design elements preserved\n\"\"\"\n\nimport os\nimport sys\n\n# Add current directory to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nif __name__ == '__main__':\n    print(\"🚀 Starting AI Detection Web Application\")\n    print(\"📁 Pure Python Flask implementation\")\n    print(\"🎨 All original design elements preserved\")\n    \n    # Import and run the Flask application\n    from pure_flask_app import app\n    \n    # Get port from environment variable or default to 5000\n    port = int(os.environ.get('PORT', 5000))\n    \n    print(f\"🌐 Server starting on http://0.0.0.0:{port}\")\n    \n    # Run the Flask application\n    app.run(\n        host='0.0.0.0',\n        port=port,\n        debug=False,  # Disable debug to avoid reloader issues\n        use_reloader=False,\n        threaded=True\n    )","size_bytes":948},"index.js":{"content":"#!/usr/bin/env node\n/**\n * Bridge script to run Python Flask application from Node.js workflow\n * This allows the existing npm workflow to execute the Python Flask app\n */\n\nconst { spawn } = require('child_process');\nconst path = require('path');\n\nconsole.log('🌉 Starting Node.js -> Python Flask Bridge');\nconsole.log('📱 AI Image Detection Web Application');\n\n// Start the Python Flask application\nconst pythonProcess = spawn('python', ['main.py'], {\n    cwd: __dirname,\n    stdio: 'inherit'\n});\n\npythonProcess.on('close', (code) => {\n    console.log(`Python Flask app exited with code ${code}`);\n    process.exit(code);\n});\n\npythonProcess.on('error', (err) => {\n    console.error('Failed to start Python Flask app:', err);\n    process.exit(1);\n});\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n    console.log('🛑 Shutting down gracefully...');\n    pythonProcess.kill('SIGINT');\n});\n\nprocess.on('SIGTERM', () => {\n    console.log('🛑 Terminating...');\n    pythonProcess.kill('SIGTERM');\n});","size_bytes":1013}},"version":1}